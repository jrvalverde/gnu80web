@* dxlinr.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] F                                                         
\item[OUTPUT:] XNEW                                                      
\item[OUTPUT:] DXRMS                                                     
\item[OUTPUT:] DXMAX                                                     
\item[INPUT:] NVAR                                                      
\item[OUTPUT:] OK                                                        
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  ES      FF      FNCCNV  FS      IOUT    XX             
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GABS    GSQRT                                          
\item[Called by]   GRDOPT                                                 
                                                                    
\end{description}
@a
      subroutine dxlinr(F,XNEW,DXRMS,DXMAX,NVAR,OK)
      implicit none
      double precision a1 , a2 , a3 , a4 , Convf , cutoff , ddx , dx , 
     &                 DXMAX , Dxmaxt , DXRMS , Eiglim , Eigmax , 
     &                 Eigmin , Es , F , Fc , Ff , Fmaxt , fmid
      double precision Fnccnv , Fncerr , fnew , fold , four , Fs , 
     &                 Fswtch , g , gabs , Grderr , gsqrt , half , p , 
     &                 Rlim , Rmax , Rmin , root , rx , s , six
      double precision ssqm4p , three , twlv , two , x , Xc , xkcube , 
     &                 Xname , XNEW , xtemp , Xx , zero
      integer i , Ic , ij , In , Iout , Ipunch , Istep , Ndum2 , Neg , 
     &        Nmax , Np , Nstep , NVAR
      logical OK
      logical Prnt , Exit
      dimension XNEW(50) , F(50)
      common /optgrd/ Xc(100) , Xname(100) , Fc(2500) , Es , Fs(50) , 
     &                Xx(50,50) , Ff(50,50) , Convf , Fmaxt , Dxmaxt , 
     &                Rmax , Rmin , Rlim , Eigmax , Eigmin , Eiglim , 
     &                Fswtch , Fncerr , Grderr , Fnccnv , Ic(50) , 
     &                Nstep , Istep , Nmax , Np , Neg , Prnt , Exit , 
     &                Ndum2
      common /io    / In , Iout , Ipunch
      data zero , two , four , six , twlv/0.D0 , 2.D0 , 4.D0 , 6.D0 , 
     &     12.D0/
      data three , half/3.D0 , 0.5D0/
      data cutoff/1.D-10/
C
C
C     fit a polynomial through the last two points and extrapolate
C     to the minimum along the line.  this step is referred to as the
C     linear search.  the quadratic search is then made starting from
C     this extrapolted minimum in subroutine dxquad.
C
C
C
C
C
99001 format (' LINEAR SEARCH NOT ATTEMPTED, NEGATIVE SECOND',
     &        ' DERIVATIVE IN SEARCH DIRECTION')
C
C
      OK = .true.
      ij = 0
      fold = zero
      fnew = zero
C     at this point fs(1) contains energy from previous calculation
      xkcube = (Fs(1)-Es)*Fnccnv
C
C     evaluate first derivative components old and new along
C     direction of motion.
C
      do 100 i = 1 , NVAR
         dx = Xx(i,2) - Xx(i,1)
         fold = fold + Ff(i,2)*dx
         fnew = fnew + Ff(i,1)*dx
 100  continue
      fmid = (fold+fnew)/two
      a1 = -(three*xkcube+fmid)/two
      a3 = twlv*(xkcube+fmid)
      s = fnew - fold
C
C     do not attempt extrapolation if a negative second derivative
C     is encountered.
C
      if ( s.ge.zero ) then
C
C
C      extrapolate using a quartic curve fitted to first three
C      derivatives and adjusted so that the second derivative
C      just reaches zero but does not become negative
C
         p = a3**2/(four*twlv)
         ssqm4p = s**2 - four*p
C
C     if the cubic term is too large, only quadratic extrapolation.
C
         if ( ssqm4p.lt.zero ) then
C
            x = -a1/s
         else
            root = gsqrt(ssqm4p)
            a2 = (s+root)/two
            a4 = (s-root)*twlv
C
C     use repeated small steps to find stationary point.
C
            dx = -a1/(twlv*a2)
            x = dx
 120        g = a1 + a2*x + a3*x**2/two + a4*x**3/six
            if ( g.gt.zero ) then
C
               x = x - dx
               dx = dx/twlv
               if ( gabs(dx).ge.cutoff ) goto 120
            else
               x = x + dx
               goto 120
            endif
         endif
      else
         write (Iout,99001)
         OK = .false.
         return
      endif
      xtemp = x - half
C     if(gabs(xtemp).gt.one) xtemp=gsign(one,xtemp)
      DXRMS = zero
      DXMAX = zero
      fnew = zero
      rx = zero
      do 200 i = 1 , NVAR
         ddx = (Xx(i,2)-Xx(i,1))
         dx = xtemp*ddx
         rx = rx + ddx**2
         XNEW(i) = XNEW(i) - dx
         DXRMS = DXRMS + dx**2
         if ( gabs(dx).gt.DXMAX ) DXMAX = gabs(dx)
         F(i) = F(i) - xtemp*(Ff(i,2)-Ff(i,1))
         fnew = fnew + F(i)*ddx
 200  continue
      fnew = fnew/rx
      do 300 i = 1 , NVAR
         F(i) = F(i) - fnew*(Xx(i,2)-Xx(i,1))
 300  continue
      DXRMS = gsqrt(DXRMS/NVAR)
      return
C
      end
@* INDEX.
