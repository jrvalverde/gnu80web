@* matprt.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] A                                                         
\item[INPUT:] MD                                                        
\item[INPUT:] ND                                                        
\item[INPUT:] NROWS                                                     
\item[INPUT:] NCOLS                                                     
\item[INPUT:] LROW                                                      
\item[INPUT:] LCOL                                                      
\item[PASSED:] ROWLAB                                                    
\item[PASSED:] COLLAB                                                    
\item[INPUT:] ISYM                                                      
\item[INPUT:] EIG                                                       
\item[INPUT:] IFEIG                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  IOUT                                                   
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GETB    GETCHR  SKIP                                   
\item[Called by]   DXQUAD  GESPRT  GRDOPT  MSPRNT  MULPOP                 
                                                                    
\end{description}
@a
      subroutine matprt(A,MD,ND,NROWS,NCOLS,LROW,LCOL,ROWLAB,COLLAB,
     &                  ISYM,EIG,IFEIG)
C ----------------------------------------------------------------------
      implicit none
      integer blank , colcur , coldat , COLLAB , collim , colmax , 
     &        colmin , getchr , i , IFEIG , In , Iout , ipass , Ipunch , 
     &        ISYM , j , LCOL , lcur , len , line
      integer LROW , ltab , maxlen , MD , NCOLS , ND , npass , NROWS , 
     &        row , rowcur , ROWLAB , rowm1 , rowmax , rowmin , rowwid , 
     &        tcur , tmp
      double precision A(MD,ND) , EIG(NCOLS)
      dimension tmp(16) , line(80) , ROWLAB(*) , COLLAB(*)
      common /io    / In , Iout , Ipunch
      data coldat/5/ , blank/1H /
C          a matrix output routine to deal with possible row and/or
C     column headings.  the matrix to be printed is in "a", and is of
C     dimension "a(md,nd)".  it is filled to "nrows x ncols".  "lrow"
C     and "lcol", determine what kind of row and/or column labels are
C     desired:
C
C          lrow/lcol = 0 ... numbers only.
C                    = 1 ... label only.
C                    = 2 ... number and label.
C
C     for row labels, the routine figures out how wide the label field
C     must be (tabs to 8 or 16 characters).  for column
C     labels, the maximum number of characters is 8.  the labels for
C     rows and columns should be provided as delimited strings
C     (sections) in "rowlab" and "collab".  "isym" specifies whether
C     only the lower triangle of a symmetric matrix is to be printed:
C     0/1 --- no/yes.
C          "eig" contains eigenvalues to be printed if ifeig
C     is non-zero.
C            if "isym" is less that zero, then only one column of
C      the matrix will be printed.  the iabs(isym)-th column will
C      appear as a row in the output.  note that the column heading
C      info in the calling arguments refers to the columns of the
C      output, thus to the row of the matrix.  is this sufficiently
C      confusing                                                       0
C ----------------------------------------------------------------------
C
C
C
C
C ----------------------------------------------------------------------
C                              format statements.
C                  ... for integer headings.
99001 format (22x,10(i6,4x))
C                  ... for eigenvalues.
99002 format (5x,15HEIGENVALUES -- ,1x,10F10.5)
C                  ... for column labels.
99003 format (1x,80A1)
C                  ... for the various types of rows.
99004 format (1x,i9,11x,5F10.5)
99005 format (1x,10x,8A1,2x,5F10.5)
99006 format (1x,2x,16A1,2x,5F10.5)
99007 format (1x,4x,i3,2x,8A1,3x,5F10.5)
99008 format (1x,i3,1x,16A1,5F10.5)
C ----------------------------------------------------------------------
C
C
C                              initialization.
      rowmin = 1
      rowmax = NROWS
      colmin = 0
      colmax = 0
      colcur = 0
C
C                              scan the row labels, find longest.
      maxlen = 0
      rowwid = 8
      if ( LROW.ne.0 ) then
         rowcur = 0
         do 50 i = 1 , NROWS
            call getb(2,tmp,len,ROWLAB,rowcur)
            if ( len.gt.maxlen ) maxlen = len
 50      continue
         if ( maxlen.gt.8 ) rowwid = 16
         rowcur = 0
      endif
C
      npass = (NCOLS-1)/coldat + 1
      if ( ISYM.lt.0 ) npass = (NROWS-1)/coldat + 1
C
C                              top of loop over "passes".
C                              --------------------------
      do 200 ipass = 1 , npass
C
C                        get new column limits.
         colmin = colmax + 1
         colmax = colmax + coldat
         colmax = min0(NCOLS,colmax)
C
C                        for lower triangles, get row limit.
         if ( ISYM.eq.1 ) rowmin = colmin
         if ( ISYM.lt.0 ) rowmin = -ISYM
         if ( ISYM.lt.0 ) rowmax = -ISYM
C
C                        for lower triangles, position row cursor
C                        to proper label.
         rowcur = 0
         if ( ISYM.ne.0 .and. LROW.ne.0 ) then
            if ( rowmin.ne.1 ) then
               rowm1 = rowmin - 1
               do 60 j = 1 , rowm1
                  call skip(2,ROWLAB,rowcur)
 60            continue
            endif
         endif
C
C                  print heading.  integers first.
         if ( LCOL.ne.1 ) write (Iout,99001) (i,i=colmin,colmax)
C
C                  ... then the column labels.
         if ( LCOL.ne.0 ) then
C            first, erase "line".
            do 80 i = 1 , 80
               line(i) = blank
 80         continue
C            ... then build labels into "line".
            ltab = 26
            do 100 j = colmin , colmax
               call getb(2,tmp,len,COLLAB,colcur)
C            truncate label to 8 characters.
               len = min0(len,8)
C            unpack string into "a1".
               lcur = ltab - len/2
               tcur = 0
               do 90 i = 1 , len
                  lcur = lcur + 1
                  line(lcur) = getchr(tmp,tcur)
 90            continue
               ltab = ltab + 10
 100        continue
C
            write (Iout,99003) (line(i),i=1,lcur)
         endif
C
C                        write out eigenvalues if requested.
         if ( IFEIG.ne.0 ) write (Iout,99002) (EIG(i),i=colmin,colmax)
C
C                              loop over rows for output.
C                              --------------------------
         do 150 row = rowmin , rowmax
C
C                        fetch the row label.
            if ( LROW.ne.0 ) then
C  make sure not to over-run /label/
               if ( rowcur.le.4000 ) call getb(2,tmp,len,ROWLAB,rowcur)
C                  erase "line".
               do 110 i = 1 , 16
                  line(i) = blank
 110           continue
C                  unpack the label into "a1".
               len = min0(len,rowwid)
               tcur = 0
C don't use junk from /label/
               if ( rowcur.le.4000 ) then
                  do 115 i = 1 , len
                     line(i) = getchr(tmp,tcur)
 115              continue
               endif
            endif
C
C                        deal with ppossible lower triangle.
            collim = colmax
            if ( ISYM.gt.0 ) collim = min0(row,colmax)
C
C
C                        a bunch of write statements.
C
C                  ... for numbers only.
            if ( LROW.eq.0 ) write (Iout,99004) row , 
     &                              (A(row,j),j=colmin,collim)
C
C                  ... for labels only (long or short).
            if ( LROW.eq.1 .and. rowwid.eq.8 ) write (Iout,99005)
     &           (line(i),i=1,8) , (A(row,j),j=colmin,collim)
            if ( LROW.eq.1 .and. rowwid.eq.16 ) write (Iout,99006)
     &           (line(i),i=1,16) , (A(row,j),j=colmin,collim)
C
C                  ... for numbers and labels.
            if ( LROW.eq.2 .and. rowwid.eq.8 ) write (Iout,99007) row , 
     &           (line(i),i=1,8) , (A(row,j),j=colmin,collim)
C
            if ( LROW.eq.2 .and. rowwid.eq.16 ) write (Iout,99008) row , 
     &           (line(i),i=1,16) , (A(row,j),j=colmin,collim)
C
 150     continue
 200  continue
      return
C
      end
@* INDEX.
