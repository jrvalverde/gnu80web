@* fileio.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] IOPER                                                     
\item[INPUT:] IFILNO                                                    
\item[OUTPUT:] LEN                                                       
\item[INPUT:] Q                                                         
\item[INPUT:] IPOS                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    FSTAT   MPOS    NFILES                                 
\item[Uses]  FSTAT   IDUMP   IOUT    LEN18   MAXPOS  MPOS    NFILES 
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       FDUMP   LNK1E   NTRAN                                  
\item[Called by]   AACLOS  ALLDUN  CHAIN   CIDENS  CIDS5   CLEAN   COMIJW 
             CONDDF  DD1SD4  DD2     DD3     DEFBUC  DOUBAR  DRVSRD 
             EXCHN1  EXCHN3  EXCHN4  EXCHN5  EXCHN6  EXP78   EXPABA 
             EXPABS  EXPAND  EXPIJA  EXPIJS  EXPIJW  EXPSYM  GETA   
             INIBUC  ITQRY   LINK1   LNK1E   MATCA1  MATCA2  MATCAB 
             MATTRN  MULTVC  NEXTOV  NORMDS  PFORM   PUTSMT  RSTART 
             SANTAB  SANTIJ  SCALP   SCALP1  SCANAA  SCANAB  SCANSS 
             SUMANT  SUMN    TIOC    TQUERY  TRANSP  TRCL80  TRCLOS 
             TREAD   TROP80  TROPEN  TRSFR   TSTARA  TSTARB  TWRITE 
             UHFTST  VEWA    VEWB    VEWS    WTOADA  WTOADB  WTOAS  
                                                                    
\end{description}
@a
      subroutine fileio(IOPER,IFILNO,LEN,Q,IPOS)
C1fileio
C
C     fileio() is a common dispatch routine for all file i/o
C     operations.
C
      implicit none
      integer async , base , end , fclose , fdef , fdefsb , fdelov , 
     &        fdelr , fdelsp , ffbase , ffend , ffnum , ffrptr , 
     &        ffwptr , filno , finit , fopen , fread , free , fretln
      integer Fstat , fwait , fwrite , i , Idum , Idump , ierr , 
     &        IFILNO , In , ind , indp , inew , Io , IOPER , Iout , 
     &        IPOS , Ipunch , isav , j , k
      integer kff , knew , kp , l , LEN , Len18 , length , lng , 
     &        maxfil , Maxpos , Mpos , Nfiles , nfnew , nfold , ntcl , 
     &        ntop , ntpos , ntrd , ntreop , ntrwnd
      integer ntwait , ntwr , num , Nunits , op , oper , pos , remove , 
     &        retjmp , rwptr , start , thrsh , unit , Units , Wait
      double precision Q(*)
      dimension IFILNO(2)
      character*8 flio
      logical Print , Syncs
      common /fstat / Nfiles , Mpos , Fstat(1000)
      common /io    / In , Iout , Ipunch
      common /fidump/ Idump
      common /len18 / Len18
C      common /ntr/wait(3,4),io(3,4),units(4),nunits,maxpos(4)
      common /ntr   / Wait(3,4) , Io(3,4) , Units(4) , Nunits , 
     &                Maxpos(4) , Print(4) , Syncs(4) , Idum
C     Define the operations supported
      data fdef/0/ , fread/2/ , fwrite/1/ , fwait/3/
      data fdefsb/4/ , fdelsp/5/ , fdelov/8/
      data fdelr/6/ , finit/12/ , fclose/10/ , fretln/11/
      data fopen/9/
      data ffnum/1/ , ffbase/2/ , ffend/3/ , ffwptr/4/ , ffrptr/5/
      data ntrd/2/ , ntwr/1/ , ntrwnd/10/ , ntpos/6/ , ntwait/23/ , 
     &     ntcl/22/
      data ntreop/21/
      data free/0/ , remove/ - 1/
      data flio/' FILEIO:'/
      data unit/18/
      data maxfil/200/
C
C     define some codes for special file numbers.
C
C
      if ( Idump.ne.0 ) write (Iout,99012) flio , IOPER , IFILNO(1) , 
     &                         LEN , IPOS
C
C     oper is set to the absolute value of ioper, and
C     the flag async is set.
      oper = iabs(IOPER)
      async = 0
      if ( IOPER.lt.0 ) async = 1
C
C     go wait, if that's what's requested.
C
      if ( oper.eq.fwait ) then
         call ntran(unit,ntwait,1,Q,l)
         return
C
C
C     see if this is an operation which doesn't need the file
C     number.
C
      elseif ( oper.eq.finit ) then
C
C
C                        initialize fstat.
C                        *****************
C only do this if creating a new file on unit nr 18:
         Nfiles = 1
         Fstat(1) = 0
         Fstat(2) = 3 + 3*maxfil
         Fstat(3) = Len18*4095
         Fstat(4) = 0
         Fstat(5) = 0
C initialise unit 18:
         call ntran(unit,26,1,Q,l)
         i = 0
         if ( Idump.ge.2 ) i = 1
         call ntran(unit,29,i,Q,l)
         call ntran(unit,ntrwnd,1,Q,l)
         Mpos = Maxpos(1)
         call ntran(unit,-ntwr,3*maxfil+2,Nfiles,l)
         return
      elseif ( oper.eq.fclose ) then
C
C                        save fstat (close).
C                        *******************
C
C     first, pack the data to be saved down (throw away the read
C     and write pointers).
         nfnew = 0
         nfold = 0
         do 50 i = 1 , Nfiles
            do 20 j = 1 , 3
               Fstat(nfnew+j) = Fstat(nfold+j)
 20         continue
            nfnew = nfnew + 3
            nfold = nfold + 5
 50      continue
C
C     now, write the data out.
         Mpos = Maxpos(1)
         call ntran(unit,ntrwnd,1,Q,l)
         call ntran(unit,-ntwr,3*maxfil+2,Nfiles,l)
C finaly close this unit (spool the buffer)
         call ntran(unit,ntcl,0,Q,l)
         return
      elseif ( oper.eq.fretln ) then
C
C                        return length of specified file.
C                        ********************************
C
         LEN = 0
         k = 0
         filno = iabs(IFILNO(1))
         do 100 i = 1 , Nfiles
            kff = k + ffnum
            if ( Fstat(k+ffnum).eq.filno ) goto 1700
            k = k + 5
 100     continue
         return
      elseif ( oper.eq.fopen ) then
C
C                        'reopen' fstat.
C                        *****************
C
C define unit 18; (if this was not done already)
         call ntran(unit,26,0,Q,l)
         i = 0
         if ( Idump.ge.2 ) i = 1
         call ntran(unit,29,i,Q,l)
C     reopen ntran unit.
         call ntran(unit,ntreop,1,Q,l)
C
C     read in the part of fstat that was saved (number,base,end).
         call ntran(unit,-ntrd,3*maxfil+2,Nfiles,l)
C     set maxpos in ntran to the last record:
         call ntran(unit,ntreop,Mpos,Q,l)
C
C     now, unpack the data, making space for the read and write
C     pointers.
         nfnew = 5*Nfiles - 1
         nfold = 3*Nfiles + 1
         do 150 i = 1 , Nfiles
            do 120 j = 1 , 3
               Fstat(nfnew-j) = Fstat(nfold-j)
 120        continue
            nfnew = nfnew - 5
            nfold = nfold - 3
 150     continue
C
C     finally, 'rewind' the read and write pointers.
C
         num = 0
         do 200 i = 1 , Nfiles
            Fstat(num+ffrptr) = Fstat(num+ffbase)
            Fstat(num+ffwptr) = Fstat(num+ffbase)
            num = num + 5
 200     continue
         return
      else
         if ( oper.le.fdelov .and. oper.ge.fdelr ) goto 1100
C
C     filno is set to the absolute value of ifilno(1), and
C     this file number is located in fstat.
C
         if ( IFILNO(1).ne.0 ) then
C
            filno = iabs(IFILNO(1))
C
C     find the file number.
            ind = -5 + ffnum
            do 220 i = 1 , Nfiles
               ind = ind + 5
               if ( filno.eq.Fstat(ind) ) then
                  ind = ind - ffnum
                  isav = i
                  goto 240
               endif
C
 220        continue
C
C     the file is not found in fstat.  if this is a define
C     file or a write operation, go define the file,
C     otherwise ---> error.
C
            if ( oper.eq.fdef ) goto 400
            if ( oper.eq.fwrite ) goto 400
            ierr = 6
            goto 1800
C
C
C     file was found.  if this is a define file operation,
C     then error.
C
 240        if ( oper.eq.fdef ) then
               ierr = 7
               goto 1800
C
            elseif ( oper.eq.fwrite .or. oper.eq.fread ) then
C
C     multiply len by two to get number of longwords.
               length = LEN*2
               if ( length.lt.0 ) then
                  ierr = 4
                  goto 1800
               endif
            elseif ( oper.eq.fdefsb ) then
C
C                        define a subfile.
C                        *****************
C
C
C     rewind file if necessary.
               if ( IFILNO(1).lt.0 ) Fstat(ind+ffwptr)
     &              = Fstat(ind+ffbase)
               pos = IPOS*2
               start = Fstat(ind+ffwptr) + pos
               if ( start.ge.Fstat(ind+ffbase) .and. 
     &              start.le.Fstat(ind+ffend) ) then
C
                  length = LEN*2
                  if ( length.gt.0 ) then
C
                     end = start + length
                     if ( end.le.Fstat(ind+ffend) ) then
C
                        Fstat(ind+ffwptr) = end
C
C     copy the last (free) file up one notch.
                        indp = 5*Nfiles
                        ind = indp - 5
                        do 242 i = 1 , 5
                           Fstat(indp+i) = Fstat(ind+i)
 242                    continue
C
C     initialize the file.
                        Fstat(ind+ffnum) = IFILNO(2)
                        Fstat(ind+ffbase) = start
                        Fstat(ind+ffend) = end
                        Fstat(ind+ffwptr) = start
                        Fstat(ind+ffrptr) = start
C
C     increment nfiles.
                        Nfiles = Nfiles + 1
                        if ( Nfiles.lt.maxfil ) return
                        ierr = 9
                     else
                        ierr = 5
                     endif
                  else
                     ierr = 4
                  endif
               else
                  ierr = 3
               endif
               goto 1800
            else
               if ( oper.ne.fdelsp ) goto 1100
C
C                        delete a file.
C                        **************
C
C     this section deletes the file pointed to by 'ind'.
C
C     assign 8000 to retjmp
               retjmp = 1
               goto 700
            endif
         else
            ierr = 1
            goto 1800
         endif
      endif
C
C
C                        perform read or write operation.
C                        ********************************
C
 300  rwptr = ffwptr
      if ( oper.eq.fread ) rwptr = ffrptr
C
C     multiply ipos by two to get number of longwords
      pos = IPOS*2
C
C     rewind appropriate pointer if ifilno(1) is negative.
      if ( IFILNO(1).lt.0 ) Fstat(ind+rwptr) = Fstat(ind+ffbase)
C
C     get start and end of of file operation, and
C     check to be sure it's in range.
      start = Fstat(ind+rwptr) + pos
      if ( start.ge.Fstat(ind+ffbase) .and. start.le.Fstat(ind+ffend) )
     &     then
C
         end = start + length
         if ( end.le.Fstat(ind+ffend) ) then
C
C
C     now make calls to ntran to perform the io.
C
            if ( length.ne.0 ) then
               call ntran(unit,ntpos,start,Q,l)
               ntop = ntwr
               if ( oper.eq.fread ) ntop = ntrd
C     if asynchronous---> error
               if ( async.eq.1 ) then
C
                  write (Iout,99011) flio
                  goto 1900
               else
                  call ntran(unit,ntop,length,Q,l)
                  if ( Idump.gt.2 ) then
                     length = LEN
                     if ( Idump.le.3 .and. length.gt.500 ) length = 500
                     write (Iout,99001) (Q(i),i=1,length)
C
99001                format (1x,10D13.5)
                  endif
               endif
            endif
C
C
C     update the pointer.
            Fstat(ind+rwptr) = end
C
            return
         else
            ierr = 5
            goto 1800
         endif
      else
         ierr = 3
         goto 1800
      endif
C
C                        define a file.
C                        **************
C
C
C     multiply len by two to get number of longwords.
 400  length = 2*LEN
      if ( length.ge.0 ) then
C
C
C     look for the first available space and set k to
C     point to it.
C
         k = -5
         do 450 i = 1 , Nfiles
            k = k + 5
            if ( Fstat(k+ffnum).eq.free ) then
               lng = Fstat(k+ffend) - Fstat(k+ffbase)
               if ( length.le.lng ) goto 500
            endif
C
 450     continue
         ierr = 8
      else
         ierr = 4
      endif
      goto 1800
C
C
C     sufficient space has been found.  if the free space file
C     has exactly the right amount of space, mark it for removal.
 500  if ( length.eq.lng ) Fstat(k+ffnum) = remove
C
C     move the base of the free space file, thus reserving the
C     space for the new file.
      base = Fstat(k+ffbase)
      Fstat(k+ffbase) = base + length
C
C     copy the last file up one notch.
      indp = 5*Nfiles
      ind = indp - 5
      do 600 i = 1 , 5
         Fstat(indp+i) = Fstat(ind+i)
 600  continue
C
C     put the new file in the resulting slot.
      Fstat(ind+ffnum) = filno
      Fstat(ind+ffbase) = base
      Fstat(ind+ffend) = base + length
C
C     initialize the read and write pointers for the file.
      Fstat(ind+ffrptr) = base
      Fstat(ind+ffwptr) = base
C
C     increment nfiles.
      Nfiles = Nfiles + 1
      if ( Nfiles.lt.maxfil ) goto 1500
      ierr = 9
C
      goto 1800
C
C     mark the file as free space.
 700  Fstat(ind+ffnum) = free
C
C     look to see if this file is a subfile of another
C     file.  in this case, no space is freed, so the
C     file must be re-marked for removal from the list.
C
      k = -5
      start = Fstat(ind+ffbase)
      end = Fstat(ind+ffend)
      do 800 i = 1 , Nfiles
         k = k + 5
         if ( i.ne.isav ) then
            if ( start.ge.Fstat(k+ffbase) .and. end.le.Fstat(k+ffend) )
     &           then
C
C     the file is a subfile.
               Fstat(ind+ffnum) = remove
               goto 900
            endif
         endif
C
 800  continue
C
C     now, see if the file being deleted has subfiles.  if
C     so, then mark these for removal.
C
 900  k = -5
      do 1000 i = 1 , Nfiles
         k = k + 5
         if ( i.ne.isav ) then
            if ( Fstat(k+ffnum).ne.free ) then
               if ( Fstat(k+ffnum).ne.remove ) then
C
C     mark the subfile for removal.
                  if ( start.le.Fstat(k+ffbase) .and. 
     &                 end.ge.Fstat(k+ffend) ) Fstat(k+ffnum) = remove
               endif
            endif
         endif
 1000 continue
      if ( retjmp.eq.1 ) goto 1300
      if ( retjmp.eq.2 ) goto 1200
C
C                        delete a group of files.
C                        ************************
C
 1100 op = oper - 7
      if ( op.lt.0 ) then
         thrsh = 3000
      elseif ( op.eq.0 ) then
C
         thrsh = 2000
      else
C
         thrsh = 1000
      endif
C
C     assign 4050 to retjmp
      retjmp = 2
      isav = 0
      ind = -5
 1200 isav = isav + 1
      ind = ind + 5
      if ( isav.le.Nfiles ) then
         if ( Fstat(ind+ffnum).ge.thrsh ) goto 700
         goto 1200
      endif
C
C                        pack fstat.
C                        ***********
C
C
C     first, look for two consecutive free space files.  if found,
C     merge these into a single file.
C
 1300 k = 0
      do 1400 i = 2 , Nfiles
         k = k + 5
         if ( Fstat(k+ffnum).eq.free ) then
            kp = -5
            do 1320 j = 1 , i
               kp = kp + 5
               if ( Fstat(kp+ffnum).eq.free ) then
                  if ( Fstat(kp+ffbase).ne.Fstat(k+ffend) ) then
C
                     if ( Fstat(kp+ffend).ne.Fstat(k+ffbase) ) goto 1320
                     Fstat(k+ffbase) = Fstat(kp+ffbase)
                  else
                     Fstat(k+ffend) = Fstat(kp+ffend)
                  endif
                  Fstat(kp+ffnum) = remove
               endif
 1320       continue
         endif
 1400 continue
C
C     now, remove from the list of files, those marked for removal.
C
 1500 k = -5
      knew = 0
      inew = 0
C
      do 1600 i = 1 , Nfiles
         k = k + 5
         if ( Fstat(k+ffnum).ne.remove ) then
            inew = inew + 1
C
            do 1520 j = 1 , 5
               knew = knew + 1
               Fstat(knew) = Fstat(k+j)
 1520       continue
         endif
 1600 continue
      ind = ind - 5*(Nfiles-inew)
      Nfiles = inew
      if ( oper.eq.fwrite ) goto 300
      return
C
 1700 LEN = (Fstat(k+ffend)-Fstat(k+ffbase))/2
      return
C
C
C
C                        error handling section.
C                        ***********************
C
 1800 if ( ierr.eq.2 ) then
C
         write (Iout,99003) flio
      elseif ( ierr.eq.3 ) then
C
         write (Iout,99004) flio , start
      elseif ( ierr.eq.4 ) then
C
         write (Iout,99005) flio
      elseif ( ierr.eq.5 ) then
C
         write (Iout,99006) flio
      elseif ( ierr.eq.6 ) then
C
         write (Iout,99007) flio
      elseif ( ierr.eq.7 ) then
C
         write (Iout,99008) flio
      elseif ( ierr.eq.8 ) then
C
         write (Iout,99009) flio
      elseif ( ierr.eq.9 ) then
C
         write (Iout,99010) flio
      else
C
         write (Iout,99002) flio
      endif
C
 1900 write (Iout,99012) flio , IOPER , IFILNO(1) , LEN , IPOS
      call fdump
      call lnk1e
      stop
C
99002 format (a8,' CALLED WITH FILE NUMBER OF ZERO.')
99003 format ('  ')
99004 format (a8,' START OF FILE OPERATION OUT OF RANGE:',i9)
99005 format (a8,' A NEGATIVE FILE LENGTH WAS DETECTED.')
99006 format (a8,' END OF FILE; OPERATION OUT OF RANGE.')
99007 format (a8,' ATTEMPT WAS MADE TO READ NON-EXISTING FILE.')
99008 format (a8,' ATTEMPT WAS MADE TO RE-DEFINE EXISTING FILE.')
99009 format (a8,' NO FREE SPACE FOUND FOR NEW FILE.')
99010 format (a8,' FSTATS OVERFLOW, TOO MANY FILES.')
99011 format (a8,' ATTEMPT WAS MADE TO USE UNIT NR 18 ASYNCHRONOUSLY')
C
99012 format (a8,' IOPER=',i2,', IFILNO(1)=',i5,', LEN=',i8,', IPOS=',
     &        i8)
C
C
      end
@* INDEX.
