@* nextx.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] X                                                         
\item[OUTPUT:] XLAST                                                     
\item[INPUT:] G                                                         
\item[OUTPUT:] GLAST                                                     
\item[OUTPUT:] S                                                         
\item[INPUT:] P                                                         
\item[OUTPUT:] Q                                                         
\item[OUTPUT:] Z                                                         
\item[INPUT:] F                                                         
\item[OUTPUT:] FLAST                                                     
\item[INPUT:] N                                                         
\item[INPUT:] NMAX                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    ALPHA   GNORM   IDNTS   IERR    IGO     PNORM          
\item[Transmits as argument]  GKM1P                                                  
\item[Uses]  ALPHA   DELTA1  DELTA2  EPSILN  FCONV   FLOWB   GKM1P  
             IDNTS   IGO     IGUESS  IOUT    ISTYPE  PNORM   STPMIN 
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       AXMXV   GABS    GMIN1   GSQRT   IDENT   NORM1   VTXV   
\item[Called by]   MSOPT                                                  
                                                                    
\end{description}
@a
      subroutine nextx(X,XLAST,G,GLAST,S,P,Q,Z,F,FLAST,N,NMAX)
      implicit none
      double precision Alpha , c , Delta1 , Delta2 , diff , Epsiln , F , 
     &                 Fconv , FLAST , Flowb , G , gabs , Gkm1p , gkp , 
     &                 GLAST , gmin1 , Gnorm , gsqrt , half , one
      double precision P , Pnorm , Q , S , Stpmin , test , three , two , 
     &                 w , X , XLAST , Z , zee , zero , ztg , ztz
      integer i , Idnts , Ierr , Igo , Iguess , In , Iout , Ipunch , 
     &        irset , Istype , j , N , Ndum , NMAX
      double precision norm1
      dimension X(N) , XLAST(N) , G(N) , GLAST(N) , Q(N) , Z(N) , P(N)
      dimension S(NMAX,NMAX)
      common /ctests/ Alpha , Delta1 , Delta2 , Epsiln , Stpmin , 
     &                Fconv , Flowb , Gkm1p , Pnorm , Gnorm , Idnts , 
     &                Iguess , Ierr , Igo , Istype , Ndum
      common /io    / In , Iout , Ipunch
      data zero/0.0D0/ , half/0.5D0/ , one/1.0D0/
      data two/2.0D0/ , three/3.0D0/
C
C
C     this routine computes the position for the next function
C     evaluation in the minimization scheme of murtagh and sargent
C     (computer j. vol. 13 p. 185)
C     ***written by nicholas e. ertz feb. 1975***
C     ***modified in terms of style but not content by d.j. defrees
C         for gaussian-80***
C     - the calling parameters are
C          -x,xlast,g,glast,p,q,z are vectors of length n
C           x-on input the coordinates of the most recent function
C             evaluation, on output the coordinates for the next
C             function evaluation
C           xlast-contains the last set of coordinates
C           g-on input the gradient of the function at x
C           glast-the last gradient
C           p,q,z-work arrays
C           s-an array with machine dimension nmax by nmax, working
C             dimension n by n.  only the upper half is used.
C           f-the value of the function at x
C           flast-the last f
C           n-the working dimension
C           nmax-the machine dimension
C     before the first call only x,g, and f should be set;
C     there after only g and f.  the subroutine will do all transfers.
C
C
C
C    the common block /ctests/ contains various thest parameters which
C    should be set in the calling routine.  suggested values are given
C    below, further explination may be found in the paper.
C          alpha=the stepsize
C          delta1=10**-8
C          delta2=10**-4 when gnorm is less than delta2 the routine will
C                 indicate convergence
C          epsiln=10**-8
C          istype=0 for reset1  =1 for reset2 (see paper) suggest reset2
C          fconv=10**-6 the 'smoothness' of the function
C          idnts=1 if s has been initialized in the calling routine
C                  other wise s will be set to the identity
C          gnorm=the norm of the gradient
C          gkm1p=set initially to gmin1(f-flowb,10**-6)
C          iguess=1 guess the initial alpha assuming quadratic behavior
C                   otherwise use 1.0
C          flowb=an estimate of the function value at the minimum
C                (this is used only wnen iguess=1)
C          igo=1 on the first call **this causes initialization
C          ierr=-1 the minimum has been reached
C               =0 no errors, the next point is in x
C               =1 stepsize too small, no chance for convergence for
C                  this starting point or set of parameters
C
C
C
99001 format (1x,'PREVIOUS STEP FAILED, RE-DO WITH ALPHA = ',f9.6)
99002 format (/1x,'C IS TOO SMALL'/1x,
     &        '     -- RESETTING SECOND DERIVATIVE MATRIX'/1x,
     &        '     -- RESET ',i1)
99003 format (/1x,'SECOND DERIVATIVE MATRIX INDICATES A LOCAL MAXIMUM'/1
     &        x,'     -- RESETTING SECOND DERIVATIVE MATRIX'/1x,
     &        '     -- RESET ',i1)
99004 format (/1x,'ALPHA = ',f9.6,' IS TOO SMALL.'/1x,
     &        'TRY A DIFFERENT STARTING POINT')
C
C
      if ( Igo.eq.2 ) then
C
C                                    test section
C
         Gnorm = norm1(G,N)
C
C      original convergence testing code removed from here.
C
         diff = FLAST - F
         test = -(Epsiln*Alpha*Gkm1p)
         if ( test.gt.zero .and. diff+Fconv.gt.test ) then
C                                    update section
            do 20 i = 1 , N
               Q(i) = G(i) - GLAST(i)
 20         continue
            call axmxv(Z,one,S,Q,NMAX,N)
            do 40 i = 1 , N
               Z(i) = Alpha*P(i) - Z(i)
 40         continue
            call vtxv(Q,Z,c,NMAX,N)
            call vtxv(Z,Z,ztz,NMAX,N)
            call vtxv(Z,GLAST,ztg,NMAX,N)
            irset = Istype + 1
            if ( gabs(c).ge.Delta2*ztz ) then
C
               if ( ztg/c.le.-Delta1 ) goto 500
               write (Iout,99003) irset
               if ( Istype.ne.0 ) then
                  c = ztz
                  goto 500
               endif
            else
               write (Iout,99002) irset
               if ( Istype.ne.0 ) then
                  c = ztz
                  goto 500
               endif
            endif
         else
            call vtxv(G,P,gkp,NMAX,N)
            if ( gabs(gkp).lt.Delta2 .or. Alpha*Pnorm.lt.Delta2 ) then
C
               Alpha = Alpha*half
               if ( Alpha.gt.Stpmin ) goto 300
               write (Iout,99004) Alpha
               Ierr = 1
               return
            else
               zee = three*diff/Alpha + Gkm1p + gkp
               w = gsqrt(zee**2-Gkm1p*gkp)
               Alpha = Alpha*(one-(gkp+w-zee)/(gkp-Gkm1p+two*w))
               goto 300
            endif
         endif
      endif
C                                    initialization section
      if ( Idnts.ne.1 ) call ident(S,NMAX,N)
C                                    determine step p
      Idnts = 0
      Igo = 2
 100  call axmxv(P,-one,S,G,NMAX,N)
      call vtxv(G,P,Gkm1p,NMAX,N)
      Pnorm = norm1(P,N)
      Alpha = one
      if ( Iguess.eq.1 ) Alpha = gmin1(one,two*gabs((Flowb-F)/Gkm1p))
      do 200 i = 1 , N
         GLAST(i) = G(i)
         XLAST(i) = X(i)
         X(i) = X(i) + Alpha*P(i)
 200  continue
      FLAST = F
      Ierr = 0
      return
C
 300  do 400 i = 1 , N
         X(i) = XLAST(i) + Alpha*P(i)
 400  continue
      Ierr = 0
      write (Iout,99001) Alpha
      return
C
 500  do 600 i = 1 , N
         do 550 j = i , N
            S(i,j) = S(i,j) + Z(i)*Z(j)/c
            S(j,i) = S(i,j)
 550     continue
 600  continue
      goto 100
C
      end
@* INDEX.
