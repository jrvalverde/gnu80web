@* transp.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NI                                                        
\item[INPUT:] NJ                                                        
\item[PASSED:] IBUC1                                                     
\item[PASSED:] IBUC2                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    V                                                      
\item[Uses]  MDV     V                                              
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       FILEIO  TRACK                                          
\item[Called by]   CIDENS  DD3                                            
                                                                    
\end{description}
@a
      subroutine transp(NI,NJ,IBUC1,IBUC2)
      implicit none
      integer i , IBUC1 , IBUC2 , ind , ind1 , ind2 , ind3 , j , kount , 
     &        leng , Mdv , mdv2 , mdv21 , NI , nic , nicore , nij , 
     &        nileft , nimax , NJ
      integer njcore , njleft , njmax
      double precision V
      common /v     / V(20000) , Mdv
C
C     ******************************************************************
C
C     accepts matrix a(ni,nj) from ibuc1
C     forms transposed matrix a(nj,ni) in ibuc2.
C
C     nov-1979. krishnan.
C
C     ******************************************************************
C
C
      call track('TRANSP')
C
      call fileio(2,-IBUC1,0,0,0)
      call fileio(1,-IBUC2,0,0,0)
C
      mdv2 = Mdv/2
      mdv21 = mdv2 + 1
      kount = 0
      nimax = mdv2/NJ
      njmax = mdv2/NI
      nij = NI*NJ
      nileft = NI
C
C     read a core-load from ibuc1.
 100  nicore = min0(nileft,nimax)
      nileft = nileft - nicore
      leng = nicore*NJ
      call fileio(2,IBUC1,leng,V(mdv21),0)
C
C     transpose
      ind1 = mdv2
      do 200 i = 1 , nicore
         ind2 = i
         do 150 j = 1 , NJ
            ind1 = ind1 + 1
            V(ind2) = V(ind1)
            ind2 = ind2 + nicore
 150     continue
 200  continue
C
C     divide into output core-loads and write out in ibuc2.
      njleft = NJ
      ind2 = 0
      ind3 = 1
 300  njcore = min0(njleft,njmax)
      njleft = njleft - njcore
      leng = njcore*nicore
      ind1 = kount*njcore*min0(NI,nimax)
      ind = ind1 + ind2
      call fileio(1,-IBUC2,leng,V(ind3),ind)
      ind3 = ind3 + leng
      ind2 = ind2 + njcore*NI
      if ( njleft.gt.0 ) goto 300
C
      kount = kount + 1
      if ( nileft.gt.0 ) goto 100
C
C     rearrange to get the transposed matrix in ibuc2.
      if ( nij.gt.mdv2 ) then
         call fileio(2,-IBUC2,0,0,0)
         call fileio(1,-IBUC2,0,0,0)
C
         njleft = NJ
         nicore = min0(NI,nimax)
 350     njcore = min0(njleft,njmax)
         njleft = njleft - njcore
         leng = njcore*NI
         call fileio(2,IBUC2,leng,V,0)
C
         ind1 = mdv2
         do 400 j = 1 , njcore
            nileft = NI
            ind = 0
 360        nic = min0(nileft,nicore)
            nileft = nileft - nic
            ind2 = ind + (j-1)*nic
C
            do 380 i = 1 , nic
               ind1 = ind1 + 1
               ind2 = ind2 + 1
               V(ind1) = V(ind2)
 380        continue
C
            ind = ind + nic*njcore
            if ( nileft.gt.0 ) goto 360
C
 400     continue
         call fileio(1,IBUC2,leng,V(mdv2+1),0)
C
         if ( njleft.gt.0 ) goto 350
      endif
C
      return
C
      end
@* INDEX.
