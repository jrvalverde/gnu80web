@* search.
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    ALPHA   D1VAR   F1      ISECT   LAMBDA  POOL0   POOL1  
             XI                                                     
\item[Transmits as argument]  D2VAR                                                  
\item[Uses]  ALPHA   D1VAR   D2VAR   F       F1      FZERO   H      
             INTENT  IOUT    IRET    K       LAMBDA  NVAR    POOL0  
             POOL1   XI                                             
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GFLOAT  GSQRT   VALUE                                  
\item[Called by]   FPMAIN                                                 
                                                                    
\end{description}
@a
      subroutine search
      implicit none
      double precision Alpha , Convrg , D1var , D1vold , D2var , 
     &                 Delvar , F , F1 , Fzero , gfloat , gsqrt , H , 
     &                 Pool0 , Pool1 , rlmbda , sqrtd2 , Tcurcy , 
     &                 Telcur , Teltot , Tlstcy
      double precision Tmax , Vname , Xi , Yold , zero
      integer i , Idone , Iflinf , Ihflag , In , Incldh , Index , 
     &        Intent , Iout , Ipunch , Iret , Isect , Istats , Ititle , 
     &        Itype , j , Jump , K , Lambda , Mode
      integer Ncyc , Ncycls , Ncytot , Noinch , Noruns , Npar , Nstep , 
     &        Nvar
      common /j102  / Jump , Iret
      common /io    / In , Iout , Ipunch
      common /fpinfo/ Pool0(30) , Pool1(30) , Delvar(30) , Yold(30) , 
     &                D1var(30) , D2var(30) , D1vold(30) , Xi(30) , 
     &                Fzero , F1(4) , F , Alpha , Convrg , Teltot , 
     &                Telcur , Tlstcy , Tmax , Tcurcy , Iflinf , K , 
     &                Nvar , Npar , Itype , Ncycls , Isect , Ncyc , 
     &                Noruns , Ncytot , Ititle(8) , Mode , Nstep , 
     &                Index , Lambda , Ihflag , Idone , H(30,30) , 
     &                Noinch , Incldh , Vname(30) , Istats , Intent
      data zero/0.0D0/
C
C
C
99001 format ('  AFTER EXTRAPOLATION, ALPHA = ',g20.10)
C
C
C     ******************************************************************
C     *  check for internal entry.                                     *
C     ******************************************************************
      if ( Intent.ne.0 ) goto 600
C     ****************************************************************
C     *  first entry... transform first derivatives and pool1 to       *
C     *  xi-space.                                                     *
C     ******************************************************************
      do 100 i = 1 , Nvar
         sqrtd2 = gsqrt(D2var(i))
         D1var(i) = D1var(i)/sqrtd2
         Pool1(i) = Pool1(i)*sqrtd2
 100  continue
C     ******************************************************************
C     *  set the increment counter lambda.                             *
C     ******************************************************************
      Lambda = 1
C     ******************************************************************
C     *  if this is the first fletcher-powell cycle, h has not been    *
C     *  formed, and is assumed to be i (the identity matrix).         *
C     ******************************************************************
      if ( K.ne.0 ) then
C     ******************************************************************
C     *  h-matrix is available.  set xi(i)=-h(i,j)*d1var(i).           *
C     *  but first, it is necessary to zero the array xi.              *
C     ******************************************************************
         do 150 i = 1 , Nvar
            Xi(i) = zero
 150     continue
C     ******************************************************************
C     *  then, carry out the actual scaler product of h(i,j) and the   *
C     *  derivatives.                                                  *
C     ******************************************************************
         do 200 i = 1 , Nvar
            do 160 j = 1 , Nvar
               Xi(i) = Xi(i) - (H(i,j)*D1var(j))
 160        continue
 200     continue
      else
C     ******************************************************************
C     *  if k=1, however, simply set xi equal to -1.*d1var.            *
C     ******************************************************************
         do 250 i = 1 , Nvar
            Xi(i) = -D1var(i)
 250     continue
      endif
C     ******************************************************************
C     *  now, set up pool0 (in xi-space) according to xi.              *
C     ******************************************************************
 300  rlmbda = gfloat(Lambda)
      do 400 i = 1 , Nvar
         Pool0(i) = Pool1(i) + rlmbda*Xi(i)
 400  continue
C     ******************************************************************
C     *  back transform pool0 into x-space and call value.             *
C     ******************************************************************
      do 500 i = 1 , Nvar
         Pool0(i) = Pool0(i)/(gsqrt(D2var(i)))
 500  continue
C
C     ..........
      call value
      if ( Iret.gt.0 ) goto 900
C     ..........
C
C     ******************************************************************
C     *  internal entry point.                                         *
C     ******************************************************************
C     ******************************************************************
C     *  get the value of the function from common/fpinfo/ and         *
C     *  pack it into the function save array according to the         *
C     *  value of lambda.                                              *
C     ******************************************************************
 600  F1(Lambda) = F
C     ******************************************************************
C     *  increment lambda.                                             *
C     ******************************************************************
      Lambda = Lambda + 1
      if ( Lambda.le.2 ) goto 300
C     ******************************************************************
C     *  conduct a parabolic fit to determine alpha.                   *
C     ******************************************************************
      Alpha = 1.0D0 - (F1(2)-Fzero)/(2.0D0*(F1(2)+Fzero-2.0D0*F1(1)))
      write (Iout,99001) Alpha
C     ******************************************************************
C     *  set up pool0 according to alpha from pool1.                   *
C     ******************************************************************
      do 700 i = 1 , Nvar
         Pool0(i) = Pool1(i) + Alpha*Xi(i)
 700  continue
C     ******************************************************************
C     *  back transform pool1 and pool0.                               *
C     ******************************************************************
      do 800 i = 1 , Nvar
         sqrtd2 = gsqrt(D2var(i))
         Pool0(i) = Pool0(i)/sqrtd2
         Pool1(i) = Pool1(i)/sqrtd2
 800  continue
C     ******************************************************************
C     *  set isect to the next step.
C     ******************************************************************
      Isect = 5
C     ******************************************************************
C     *  call value to get the fzero.                                  *
C     ******************************************************************
C
C     ..........
      call value
C     ..........
C
 900  return
C
      end
@* INDEX.
