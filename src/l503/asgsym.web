@* asgsym.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NBASIS                                                    
\item[OUTPUT:] A                                                         
\item[OUTPUT:] B                                                         
\item[INPUT:] MDIM                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    IOU     ISYM    S                                      
\item[Uses]  CMP     DEGEN   FUZZY   IOU     ISYM    NEST    S      
             SKPSYM  SPAN    STHRS   ZERO                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GABS    GMAX1   GSQRT   ILSW                           
\item[Called by]   FIRST                                                  
                                                                    
\end{description}
@a
      subroutine asgsym(NBASIS,A,B,MDIM)
      implicit none
      double precision A , a0 , B , Big , Crit , Degen , Dumscr , E , 
     &                 fmax , Four , Fuzzy , gabs , gmax1 , gsqrt , 
     &                 One , Onept5 , Pt5 , S , Small , Span
      double precision Sthrs , Three , Two , Zero
      integer i , i1 , ichk , Idscr , In , Ior , Iou , Iout , Ipunch , 
     &        Isym , Itcnt , Iuo , j , Key , Ksm , Kspin , Ksw , MDIM , 
     &        minprt , NBASIS
      integer Nesk , Nest , Nest1 , Nse , Nsep , nsym
      logical Cmp , Rhf , Skpsym
      dimension A(MDIM,*) , B(MDIM,*)
      common /scfcon/ Cmp , Rhf , Ksm , Kspin , Ksw(2) , Nesk(2) , Nse , 
     &                Nsep , Nest , Nest1
      common /con503/ Zero , Pt5 , One , Onept5 , Two , Three , Four , 
     &                Big , Small
      common /scr   / S(140) , Iou(70) , Iuo(70) , Ior(70,2) , E(140) , 
     &                Key , Itcnt , Crit , Skpsym , Idscr , Dumscr(5209)
      common /symmet/ Isym(140)
      common /fuzzyf/ Fuzzy , Degen , Sthrs , Span
      common /io    / In , Iout , Ipunch
C     ******************************************************************
C     determines to which block of f(1),t each m.o. belongs
C     (equivalent to assigning symmetry)
C
C     oct 76/rs9b
C     ******************************************************************
C
C
C     ******************************************************************
      call ilsw(2,21,minprt)
C
      do 100 i = 1 , NBASIS
         S(i) = A(i,i)
 100  continue
      fmax = Zero
C
C     condition f(1),t (i.e. set elements abs. smaller than 'fuzzy' to
C     zero)
C
C     real
      if ( Cmp ) then
C
C     complex
         do 150 i = 2 , NBASIS
            i1 = i - 1
            do 120 j = 1 , i1
               a0 = gsqrt(A(j,i)**2+A(j,i+MDIM)**2)
               if ( a0.lt.Fuzzy ) then
                  A(i,j) = Zero
                  A(j,i) = Zero
                  A(i,j+MDIM) = Zero
                  A(j,i+MDIM) = Zero
               endif
               B(i,j) = a0
               B(j,i) = a0
               fmax = gmax1(fmax,a0)
 120        continue
 150     continue
      else
         do 200 i = 2 , NBASIS
            i1 = i - 1
            do 160 j = 1 , i1
               a0 = gabs(A(j,i))
               if ( a0.lt.Fuzzy ) then
                  A(i,j) = Zero
                  A(j,i) = Zero
               endif
               B(i,j) = a0
               B(j,i) = a0
               fmax = gmax1(fmax,a0)
 160        continue
 200     continue
      endif
      if ( fmax.lt.Sthrs ) return
C
      do 300 i = 1 , NBASIS
         Iou(i) = 0
 300  continue
C
C     assigning and checking symmetry (blockstructure of f(1),t)
      nsym = 0
      do 400 i = 1 , NBASIS
         ichk = 0
         do 350 j = 1 , NBASIS
            if ( gabs(S(i)-S(j)).gt.Degen .and. B(j,i).gt.Span ) then
               if ( Iou(j)+Iou(i).ne.0 ) then
C
                  if ( ichk.eq.0 ) ichk = Iou(j)
                  if ( Iou(j).eq.0 ) Iou(j) = ichk
                  if ( ichk.ne.Iou(j) ) goto 900
                  Iou(i) = ichk
               else
                  nsym = nsym + 1
                  Iou(i) = nsym
                  Iou(j) = nsym
                  ichk = nsym
               endif
            endif
 350     continue
 400  continue
C
C     take care of degenerate orbitals (they do not factorize)
      do 500 i = 1 , NBASIS
         do 450 j = i , NBASIS
            if ( Iou(j).eq.0 ) then
               if ( gabs(S(i)-S(j)).le.Degen ) Iou(j) = Iou(i)
            endif
 450     continue
 500  continue
C
C     take care of the rest
      do 600 i = 1 , NBASIS
         if ( Iou(i).le.0 ) then
            nsym = nsym + 1
            Iou(i) = nsym
         endif
 600  continue
C
C     compare with assignment of previous cycle
      if ( .not.(Skpsym) ) then
         do 650 i = 1 , NBASIS
            if ( Iou(i).ne.Isym(i+Nest) ) goto 700
 650     continue
         if ( minprt.ne.0 ) return
         return
      endif
C
 700  do 800 i = 1 , NBASIS
         Isym(i+Nest) = Iou(i)
 800  continue
      return
C
C     error: ambiguity in assigning
 900  do 1000 i = 1 , NBASIS
         Isym(i+Nest) = 0
 1000 continue
      return
C
      end
@* INDEX.
