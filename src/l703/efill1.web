@* efill1.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] ISHELL                                                    
\item[INPUT:] JSHELL                                                    
\item[INPUT:] KSHELL                                                    
\item[INPUT:] LSHELL                                                    
\item[INPUT:] ISTART                                                    
\item[INPUT:] JSTART                                                    
\item[INPUT:] KSTART                                                    
\item[INPUT:] LSTART                                                    
\item[INPUT:] IEND                                                      
\item[OUTPUT:] JEND                                                      
\item[OUTPUT:] KEND                                                      
\item[OUTPUT:] LEND                                                      
\item[INPUT:] IMJ                                                       
\item[INPUT:] IMKJML                                                    
\item[INPUT:] KML                                                       
\item[INPUT:] ISCF                                                      
\item[INPUT:] DA                                                        
\item[INPUT:] DB                                                        
\item[OUTPUT:] D1234                                                     
\item[OUTPUT:] DNSMAX                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  AOS     LDMAX   NORDR   UBOUND                         
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GABS                                                   
\item[Called by]   DPHNIX                                                 
                                                                    
\end{description}
@a
      subroutine efill1(ISHELL,JSHELL,KSHELL,LSHELL,ISTART,JSTART,
     &                  KSTART,LSTART,IEND,JEND,KEND,LEND,IMJ,IMKJML,
     &                  KML,ISCF,DA,DB,D1234,DNSMAX)
      implicit none
      double precision C1 , C2 , C3 , C4 , cc2 , cc4 , d12 , D1234 , 
     &                 d12b , d13 , d13b , d13q , d14 , d14b , d23 , 
     &                 d23b , d23q , d24 , d24b , d34
      double precision d34b , DA , DB , DNSMAX , dtemp , Exx , gabs , 
     &                 half , pt25 , sigmas , X , Y , Z , zero
      integer i , IEND , ijkl , IMJ , IMKJML , ISCF , iscfp , ISHELL , 
     &        ist , ISTART , j , Jan , JEND , JSHELL , jst , JSTART , 
     &        k , KEND , KML , KSHELL
      integer kst , KSTART , l , Lamax , lambda , Lbmax , Lbound , 
     &        Lcmax , Ldmax , LENB , LEND , lmbdas , lmbsgm , Lpmax , 
     &        Lpqmax , Lqmax , LSHELL , lst , LSTART , MAXPRM
      integer MAXS21 , MAXSH1 , MAXSHL , Maxtyp , mu , mulmb , munu , 
     &        mus , musgm , N10ord , N5ord , N6ord , N7ord , Nordr , 
     &        Nshell , nu , nulmb , nus , nusgm
      integer Shella , Shelln , Shellt , Shellc , Shladf , Aos , Aon
      integer Ubound , Ulpure , sigma
      logical open , complx
      dimension DA(*) , DB(*) , D1234(*)
      parameter (MAXSHL=100,MAXPRM=(3*MAXSHL),MAXSH1=(MAXSHL+1),
     &           MAXS21=(2*MAXSHL+1),LENB=(15*MAXSHL+7*MAXSHL/2+1))
      common /b     / Exx(MAXPRM) , C1(MAXPRM) , C2(MAXPRM) , C3(MAXPRM)
     &                , X(MAXSHL) , Y(MAXSHL) , Z(MAXSHL) , Jan(MAXSHL)
     &                , Shella(MAXSHL) , Shelln(MAXSHL) , Shellt(MAXSHL)
     &                , Shellc(MAXSHL) , Aos(MAXSHL) , Aon(MAXSHL) , 
     &                Nshell , Maxtyp
      dimension C4(MAXSHL) , Shladf(MAXSHL)
      equivalence (C4(1),C3(MAXSH1)) , (Shladf(1),C3(MAXS21))
      common /order / Nordr(20) , N6ord(10) , N5ord(9) , N10ord(10) , 
     &                N7ord(7) , Lbound(4,3) , Ubound(4) , Ulpure(4)
      common /max   / Lamax , Lbmax , Lcmax , Ldmax , Lpmax , Lqmax , 
     &                Lpqmax
      data half/0.5D0/ , pt25/0.25D0/ , zero/0.0D0/
C
C***********************************************************************
C     routine to fill the array d1234 with the density matrix
C     combinations needed for the curre.t shell pass, and to
C     determine the maximum value dnsmax.
C***********************************************************************
C
C
C
C
C
C
C     determine local control variables.
      iscfp = ISCF + 1
      open = ISCF.eq.1
      complx = ISCF.eq.2
C
C     loop over the angular values, determining the entries into
C     d1234.
      ist = Aos(ISHELL) - 1
      jst = Aos(JSHELL) - 1
      kst = Aos(KSHELL) - 1
      lst = Aos(LSHELL) - 1
      ijkl = 0
      DNSMAX = zero
      do 100 i = ISTART , IEND
         if ( IMJ.eq.0 ) JEND = i
         if ( IMKJML.eq.0 ) KEND = i
         mu = ist + Nordr(i)
         mus = mu*(mu-1)/2
C
         do 50 j = JSTART , JEND
            nu = jst + Nordr(j)
            nus = nu*(nu-1)/2
            munu = mus + nu
            if ( mu.lt.nu ) munu = mu + nus
            cc2 = half
            if ( mu.ne.nu ) cc2 = cc2 + cc2
            d12 = DA(munu)
            if ( open ) d12b = DB(munu)
C
            do 20 k = KSTART , KEND
               LEND = Ubound(Ldmax)
               if ( KML.eq.0 ) LEND = k
               if ( IMKJML.eq.0 .and. i.eq.k ) LEND = j
               lambda = kst + Nordr(k)
               lmbdas = lambda*(lambda-1)/2
               mulmb = mus + lambda
               nulmb = nus + lambda
               if ( mu.lt.lambda ) mulmb = mu + lmbdas
               if ( nu.lt.lambda ) nulmb = nu + lmbdas
               d13 = DA(mulmb)
               d13q = d13*pt25
               d23 = DA(nulmb)
               d23q = d23*pt25
               if ( open .or. complx ) then
                  d23b = DB(nulmb)
                  d13b = DB(mulmb)
                  if ( complx ) then
                     if ( lambda.lt.nu ) d23b = -d23b
                     if ( lambda.lt.mu ) d13b = -d13b
                  endif
               endif
C
               do 10 l = LSTART , LEND
                  ijkl = ijkl + 1
                  sigma = lst + Nordr(l)
                  sigmas = sigma*(sigma-1)/2
                  cc4 = cc2
                  if ( lambda.ne.sigma ) cc4 = cc4 + cc4
                  musgm = mus + sigma
                  nusgm = nus + sigma
                  lmbsgm = lmbdas + sigma
                  if ( mu.lt.sigma ) musgm = mu + sigmas
                  if ( nu.lt.sigma ) nusgm = nu + sigmas
                  if ( lambda.lt.sigma ) lmbsgm = lambda + sigmas
                  if ( munu.ne.lmbsgm ) cc4 = cc4 + cc4
                  d14 = DA(musgm)
                  d24 = DA(nusgm)
                  d34 = DA(lmbsgm)
C
C     select appropriate formula based on iscf.
                  if ( iscfp.eq.2 ) then
C
C..... real uhf.
                     d14b = DB(musgm)
                     d24b = DB(nusgm)
                     d34b = DB(lmbsgm)
                     dtemp = ((d12+d12b)*(d34+d34b)
     &                       -half*(d13*d24+d23*d14+d13b*d24b+d14b*d23b)
     &                       )*cc4
                  elseif ( iscfp.eq.3 ) then
C
C..... complex rhf.
                     d14b = DB(musgm)
                     d24b = DB(nusgm)
                     if ( mu.lt.sigma ) d14b = -d14b
                     if ( nu.lt.sigma ) d24b = -d24b
                     dtemp = (d12*d34-pt25*(d13*d24+d23*d14-d13b*d24b-
     &                       d23b*d14b))*cc4
                  elseif ( iscfp.eq.4 ) then
                  elseif ( iscfp.ne.5 ) then
C
C..... real rhf.
                     dtemp = (d12*d34-(d13q*d24+d14*d23q))*cc4
                  endif
C
C..... complex uhf.  (nothing here yet.)
C
C..... real rhf (open shell).
C
C     determine new maximum value.
                  if ( gabs(dtemp).gt.DNSMAX ) DNSMAX = gabs(dtemp)
                  D1234(ijkl) = dtemp
 10            continue
 20         continue
 50      continue
 100  continue
C
C     all done, return to caller.
      return
C
      end
@* INDEX.
