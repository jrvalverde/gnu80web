@* dipole.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] JUMP                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    DDX     DDY     DDZ     DX      DY      DZ      IEND   
             IMJ     INDIX   INDIY   INDIZ   INEW    IRANGE  ISTART 
             ITYPE   JEND    JNEW    JRANGE  JSTART  JTYPE   LAMAX  
             LBMAX   LENTQ   LIND    LPMAX   R1      R2      R3     
             R3OV2   R4      ROOT15  ROOT3   ROOT5   S1C     Z1     
             Z2      Z3                                             
\item[Transmits as argument]  C       CA      CB      CCX     CCY     CCZ     EXX    
             IPURD   IPURF   NATOMS  NBASIS  ONE     SX      SY     
             SZ      XINT                                           
\item[Uses]  C       CA      CB      CCX     CCY     CCZ     DDX    
             DDY     DDZ     DX      DY      DZ      EXX     FOUR   
             HALF    IEND    INDIX   INDIY   INDIZ   INDJX   INDJY  
             INDJZ   INEW    IOP     IOUT    IPURD   IPURF   IRANGE 
             ISTART  ITYPE   JEND    JNEW    JRANGE  JSTART  JTYPE  
             LAMAX   LBMAX   LBOUND  LENTQ   LPMAX   NATOMS  NBASIS 
             NSHELL  ONE     PT5     R3OV2   ROOT3   ROOT5   S1C    
             SHELLA  SHELLC  SHELLN  SHELLT  SHLADF  SX      SY     
             SZ      UBOUND  X       XINT    Y       Z       ZERO   
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       BDUMP   DRUM    FERMI   FILLC   FILMAT  GATAN   GET1CS 
             GET2CS  GETCC1  GEXP    GSQRT   ILSW    LINOUT  SETORD 
             TREAD   TWRITE                                         
\item[Called by]   L303                                                   
                                                                    
\end{description}
@a
      subroutine dipole(JUMP)
      implicit none
      double precision abx , aby , abz , arabsq , as , asxa , asya , 
     &                 asza , Atmchg , bs , C , C1 , C2 , C3 , C4 , Ca , 
     &                 Cb , Cc , Ccx , Ccy
      double precision Ccz , Cd , coef , Ddum , Ddx , Ddy , Ddz , Dx , 
     &                 Dy , Dz , ep , epi , epio2 , Exx , f15 , F42 , 
     &                 Fillnt , Four , gatan , gexp
      double precision gsqrt , Half , One , Onept5 , pexp , pi , 
     &                 pi3haf , Pt5 , px , py , pz , R1 , R2 , R3 , 
     &                 R3ov2 , R4 , rabsq , Root15 , Root3 , Root5
      double precision rootpi , S1c , sterm , Sx , Sy , Sz , Ten , 
     &                 Three , Two , twopi , X , xa , xap , xb , xbp , 
     &                 Xint , Y , ya , yap , yb
      double precision ybp , Z , Z1 , Z2 , Z3 , za , zap , zb , zbp , 
     &                 Zero , Zero1
      integer i , Ian , Icharg , idump , Iend , Ifilla , ifprt , 
     &        igauss , igbegn , igdf , igend , Imj , In , Indix , 
     &        Indiy , Indiz , Indjx , Indjy , Indjz , Inew
      integer intc , Iop , Iout , iprint , Ipunch , Ipurd , Ipurf , 
     &        Irange , irwb , irwx , irwy , irwz , ishell , Istart , 
     &        Itype , ix , ixnew , iy , iynew , iz
      integer iznew , j , Jan , Jend , jgauss , jgbegn , jgdf , jgend , 
     &        Jnew , Jnktyp , jprint , Jrange , jshell , Jstart , 
     &        Jtype , JUMP , jx , jy , jz , Lamax
      integer Lbmax , Lbound , LENB , Lentq , lim1ds , Limdum , Lind , 
     &        Lpmax , Maxdum , MAXPRM , MAXS21 , MAXSH1 , MAXSHL , 
     &        Maxtyp , Mdim , Multip , N10ord , N5ord , N6ord , N7ord
      integer na , Nae , Natoms , nb , Nbasis , nbasp , Nbe , Ne , 
     &        Nordr , Nshell , ntt
      integer Shella , Shelln , Shellt , Shellc , Shladf , Aos , Aon
      integer scona , sconb
      integer Ubound , Ulpure
C      dimension shladf(80),c4(80)
      dimension ifprt(8)
      common /iop   / Iop(50)
      common /mol   / Natoms , Icharg , Multip , Nae , Nbe , Ne , 
     &                Nbasis , Ian(101) , Atmchg(100) , C(300)
      parameter (MAXSHL=100,MAXPRM=(3*MAXSHL),MAXSH1=(MAXSHL+1),
     &           MAXS21=(2*MAXSHL+1),LENB=(15*MAXSHL+7*MAXSHL/2+1))
      common /b     / Exx(MAXPRM) , C1(MAXPRM) , C2(MAXPRM) , C3(MAXPRM)
     &                , X(MAXSHL) , Y(MAXSHL) , Z(MAXSHL) , Jan(MAXSHL)
     &                , Shella(MAXSHL) , Shelln(MAXSHL) , Shellt(MAXSHL)
     &                , Shellc(MAXSHL) , Aos(MAXSHL) , Aon(MAXSHL) , 
     &                Nshell , Maxtyp
      dimension C4(MAXSHL) , Shladf(MAXSHL)
      equivalence (C4(1),C3(MAXSH1)) , (Shladf(1),C3(MAXS21))
      common /max   / Lamax , Lbmax , Lpmax , Maxdum(4)
      common /limit / Imj , Istart , Jstart , Iend , Jend , Irange , 
     &                Jrange , Lentq , Limdum(11)
      common /type  / Itype , Jtype , Jnktyp(10)
C      common /buf303/dx(8001),dy(8001),dz(8001)
      common /memry / Dx(16666) , Dy(16666) , Dz(16668)
      common /ia    / Lind(164) , Ifilla(92)
      common /const / Zero , Half , One , Onept5 , Two , Three , Four , 
     &                Ten , F42
      common /int   / Zero1 , Xint(12)
      common /mdim  / Mdim
      common /inds  / Indjx(20) , Indjy(20) , Indjz(20) , Indix(20) , 
     &                Indiy(20) , Indiz(20)
      common /cfact / Pt5 , R3ov2 , Root3 , Root5 , Root15 , R1 , R2 , 
     &                R3 , R4 , Z1 , Z2 , Z3
      common /io    / In , Iout , Ipunch
      common /contr / Ca(20) , Cb(20) , Cc(20) , Cd(20)
      common /new   / Inew , Jnew
      common /order / Nordr(20) , N6ord(10) , N5ord(9) , N10ord(10) , 
     &                N7ord(7) , Lbound(4,3) , Ubound(4) , Ulpure(4)
      common /xyzint/ Sx(20) , Sy(20) , Sz(20) , S1c(8) , Fillnt(700)
      common /block / Ddx(100) , Ddy(100) , Ddz(100) , Ddum(100)
C      common/cc/ccx(90),ccy(90),ccz(90)
      common /cc    / Ccx(120) , Ccy(120) , Ccz(120)
      common /ipure / Ipurd , Ipurf
      data f15/15.0D0/
      data ifprt/0 , 1 , 2 , 0 , 0 , 1 , 1 , 2/
      data irwb/506/
      data irwx/518/ , irwy/519/ , irwz/520/
C
C    *******************************************************************
C
C                          program dipole
C                             link 303
C
C    *******************************************************************
C
C          this program evaluates the x, y, and z dipole integrals and
C     writes these onto rwf's 18, 19, and 20, respectively.  the one-
C     dimensional, two-center dipole integrals are expanded in terms
C     of higher order one-dimensional, two-center overlap integrals.
C     as a result, this program uses many of the same routines as
C     stvint (link 302) and prop1e (link 701).
C
C    *******************************************************************
C
C
C
C
C
C
C
C
99001 format (42H ********** THE Y DIPOLE MATRIX **********)
99002 format (42H ********** THE Z DIPOLE MATRIX **********)
99003 format (42H ********** THE X DIPOLE MATRIX **********)
C
C    *******************************************************************
C     initialize this overlay.
C    *******************************************************************
C
      call drum
      pi = Four*gatan(One)
      twopi = pi + pi
      rootpi = gsqrt(pi)
      pi3haf = pi*rootpi
C
C     set up the options.
C
      jprint = Iop(33)
      iprint = Iop(33) + 1
      iprint = ifprt(iprint)
      call ilsw(2,2,Ipurd)
      call ilsw(2,16,Ipurf)
      idump = Iop(34)
      if ( idump.ne.0 ) iprint = 2
C
C     read in common /b/
C
      call tread(irwb,Exx,LENB,1,LENB,1,0)
      if ( idump.ne.0 ) call bdump(2)
C
      ntt = Nbasis*(Nbasis+1)/2
C
C     initialize /cfact/.
      Root3 = gsqrt(Xint(3))
      R3ov2 = Half*Root3
      Root5 = gsqrt(Xint(5))
      Root15 = gsqrt(f15)
      R1 = Pt5*gsqrt(Xint(5)/Xint(2))
      R2 = Xint(3)/(Xint(2)*Root5)
      R3 = R3ov2
      R4 = Pt5*gsqrt(Xint(3)/Xint(2))
      Z1 = Xint(4)/Root5
      Z2 = Xint(1)/Root5
      Z3 = Xint(3)/Root5
C
      do 100 i = 1 , 20
         Indix(i) = 4*(Indjx(i)-1)
         Indiy(i) = 4*(Indjy(i)-1)
         Indiz(i) = 4*(Indjz(i)-1)
 100  continue
C
C
C     clear common /buf303/
C
      do 200 i = 1 , ntt
         Dx(i) = Zero
         Dy(i) = Zero
         Dz(i) = Zero
 200  continue
C
      call setord
C
C     fill indexing array for filmat and linout.
C
      nbasp = Nbasis + 1
      do 300 i = 1 , nbasp
         Lind(i) = (i*(i-1))/2
 300  continue
C
C    *******************************************************************
C     loop over shells.
C    *******************************************************************
C
C     loop over ishell
C
      do 500 ishell = 1 , Nshell
         Inew = ishell
         xa = X(ishell)
         ya = Y(ishell)
         za = Z(ishell)
         igbegn = Shella(ishell)
         igend = igbegn + Shelln(ishell) - 1
         na = Shelln(ishell)
         Itype = Shellt(ishell)
         Lamax = Itype + 1
         scona = Shellc(ishell)
         Iend = Ubound(Lamax)
         Istart = Lbound(Lamax,scona+1)
         Irange = Iend - Istart + 1
         igdf = Shladf(Inew)
C
C     loop over jshell.
C
         do 400 jshell = 1 , ishell
            Jnew = jshell
            xb = X(jshell)
            yb = Y(jshell)
            zb = Z(jshell)
            jgbegn = Shella(jshell)
            jgend = jgbegn + Shelln(jshell) - 1
            nb = Shelln(jshell)
            Jtype = Shellt(jshell)
            Lbmax = Jtype + 1
            sconb = Shellc(jshell)
            Jstart = Lbound(Lbmax,sconb+1)
            Jend = Ubound(Lbmax)
            Jrange = Jend - Jstart + 1
            jgdf = Shladf(Jnew)
C
            Lpmax = Lamax + Lbmax - 1
            Lentq = Irange*Jrange
            lim1ds = (Lpmax+2)/2
            Imj = iabs(ishell-jshell)
            abx = xb - xa
            aby = yb - ya
            abz = zb - za
            rabsq = abx*abx + aby*aby + abz*abz
            do 320 i = 1 , Lentq
               Ddx(i) = Zero
               Ddy(i) = Zero
               Ddz(i) = Zero
 320        continue
C
C    *******************************************************************
C     loop over primitive gaussians.
C    *******************************************************************
C
            do 360 igauss = igbegn , igend
               as = Exx(igauss)
               asxa = as*xa
               asya = as*ya
               asza = as*za
               arabsq = as*rabsq
               call fillc(Itype,igbegn,igauss,igdf,Ca)
C
               do 340 jgauss = jgbegn , jgend
                  bs = Exx(jgauss)
                  call fillc(Jtype,jgbegn,jgauss,jgdf,Cb)
C
                  ep = as + bs
                  epi = One/ep
                  px = (asxa+bs*xb)*epi
                  py = (asya+bs*yb)*epi
                  pz = (asza+bs*zb)*epi
                  xap = px - xa
                  yap = py - ya
                  zap = pz - za
                  xbp = px - xb
                  ybp = py - yb
                  zbp = pz - zb
                  epio2 = epi*Half
                  pexp = gexp(-bs*arabsq*epi)
C
C
C
                  call getcc1(Ccx,xap,xbp,1)
                  call getcc1(Ccy,yap,ybp,1)
                  call getcc1(Ccz,zap,zbp,1)
C
                  sterm = rootpi*gsqrt(epi)
                  call get1cs(S1c,sterm,epio2,1)
C
                  call get2cs(Sx,S1c,Ccx,1)
                  call get2cs(Sy,S1c,Ccy,1)
                  do 325 i = 1 , lim1ds
                     S1c(i) = S1c(i)*pexp
 325              continue
                  call get2cs(Sz,S1c,Ccz,1)
C
C     begin loop over atomic orbitals.
C
                  intc = 0
                  do 330 i = Istart , Iend
                     ix = Indix(i)
                     iy = Indiy(i)
                     iz = Indiz(i)
                     ixnew = ix + 4
                     iynew = iy + 4
                     iznew = iz + 4
                     do 326 j = Jstart , Jend
                        jx = Indjx(j)
                        jy = Indjy(j)
                        jz = Indjz(j)
                        intc = intc + 1
C
                        coef = Ca(i)*Cb(j)
                        Ddx(intc) = Ddx(intc) + coef*Sy(iy+jy)*Sz(iz+jz)
     &                              *(xa*Sx(ix+jx)+Sx(ixnew+jx))
                        Ddy(intc) = Ddy(intc) + coef*Sx(ix+jx)*Sz(iz+jz)
     &                              *(ya*Sy(iy+jy)+Sy(iynew+jy))
                        Ddz(intc) = Ddz(intc) + coef*Sx(ix+jx)*Sy(iy+jy)
     &                              *(za*Sz(iz+jz)+Sz(iznew+jz))
 326                 continue
 330              continue
C
 340           continue
 360        continue
C     ... end of loop over gaussians.
C
C     filmat takes the integrals in ddx, ddy, and ddz and stores them
C     in the proper places in dx,dy,and dz.
C
            call filmat(Ddx,Dx)
            call filmat(Ddy,Dy)
            call filmat(Ddz,Dz)
C
 400     continue
 500  continue
C     ... end of loop over shells.
C
      if ( iprint.gt.0 ) then
         write (Iout,99003)
         call linout(Dx,Nbasis,0)
         write (Iout,99001)
         call linout(Dy,Nbasis,0)
         write (Iout,99002)
         call linout(Dz,Nbasis,0)
      endif
      call twrite(irwx,Dx,ntt,1,ntt,1,0)
      call twrite(irwy,Dy,ntt,1,ntt,1,0)
      call twrite(irwz,Dz,ntt,1,ntt,1,0)
C
C     calculate the fermi contact integrals.
C
      call fermi(Nbasis,Natoms,C,Dx,jprint)
C
C     ..............
C=    call chainx(0)
      JUMP = 0
      return
C     ..............
C
      end
@* INDEX.
