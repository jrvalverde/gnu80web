@* recur2.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NHI                                                       
\item[INPUT:] LALO                                                      
\item[INPUT:] LAHI                                                      
\item[INPUT:] LBLO                                                      
\item[INPUT:] LBHI                                                      
\item[INPUT:] RKA                                                       
\item[INPUT:] RKB                                                       
\item[OUTPUT:] QQ                                                        
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   QQRAD                                                  
                                                                    
\end{description}
@a
      subroutine recur2(NHI,LALO,LAHI,LBLO,LBHI,RKA,RKB,QQ)
      implicit none
      real*8 fka , fkb , one , QQ , RKA , RKB
      integer la , LAHI , lahm1 , LALO , lalop2 , latru , lb , LBHI , 
     &        lbhm1 , LBLO , lblop2 , lbtru , n , NHI
C
C     controls computation of remaining q(n,la,lb) by recurrence.
C
      dimension QQ(7,7,7)
      save one
      data one/1.0D0/
C
Cdir$ ivdep
      fka = one/RKA
      fkb = one/RKB
      lahm1 = max0(LAHI-1,1)
      lbhm1 = max0(LBHI-1,1)
      lalop2 = LALO + 2
      lblop2 = LBLO + 2
      if ( lblop2.le.LBHI ) then
         do 50 lb = LBHI , lblop2 , -1
            lbtru = lb - 1
            do 20 n = 1 , NHI
               QQ(n+1,LAHI,lb-2) = QQ(n+1,LAHI,lb) + (2*lbtru-1)
     &                             *fkb*QQ(n,LAHI,lb-1)
               QQ(n+1,lahm1,lb-2) = QQ(n+1,lahm1,lb) + (2*lbtru-1)
     &                              *fkb*QQ(n,lahm1,lb-1)
 20         continue
 50      continue
      endif
C
      if ( lalop2.le.LAHI ) then
         do 100 la = LAHI , lalop2 , -1
            latru = la - 1
            do 60 n = 1 , NHI
               QQ(n+1,la-2,LBHI) = QQ(n+1,la,LBHI) + (2*latru-1)
     &                             *fka*QQ(n,la-1,LBHI)
               QQ(n+1,la-2,lbhm1) = QQ(n+1,la,lbhm1) + (2*latru-1)
     &                              *fka*QQ(n,la-1,lbhm1)
 60         continue
 100     continue
      endif
C
      if ( lalop2.le.LAHI .and. lblop2.le.LBHI ) then
         do 150 lb = LBHI , lblop2 , -1
            lbtru = lb - 1
            do 120 la = LAHI , lalop2 , -1
               latru = la - 1
               do 110 n = 1 , NHI
                  QQ(n+1,la-2,lb-2) = QQ(n+1,la-2,lb) + (2*lbtru-1)
     &                                *fkb*QQ(n,la-2,lb-1)
 110           continue
 120        continue
 150     continue
      endif
C
      return
      end
@* INDEX.
