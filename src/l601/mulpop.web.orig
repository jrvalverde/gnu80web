@* mulpop.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] JUMP                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    A       AA      B       MAPPER                         
\item[Transmits as argument]  ATMCHG  BB      C       IAN     ICHARG  IOP     IOUT   
             IRWCA   IRWCB   IRWEIG  IRWPA   IRWPB   IRWPT   IRWS   
             IRWSC1  LABEL   MDIM    MULTIP  NAE     NATOMS  NBASIS 
             NBE     NROT    TOANG   TOE                            
\item[Uses]  A       AA      ATMCHG  B       BB      C       IAN    
             ICHARG  ICMP    IFCOND  IFDENS  IFDIST  IFGROS  IFMO   
             IFOORC  IFPOP   IOP     IOUT    IRWCA   IRWCB   IRWEIG 
             IRWPA   IRWPB   IRWPT   IRWS    IRWSC1  LABEL   MAPPER 
             MDIM    MNCHRG  MULTIP  NAE     NATOMS  NBASIS  NBE    
             NROT    TOANG   TOE                                    
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       ATOMPR  DISMAT  DQ      DRUM    ECNFIG  FRMPOP  MATPRT 
             ORBTYP  PAD     PUTBC   PUTCHR  PUTDEL  RGDVO   STROUT 
             SYMASG  SYMLBL  TREAD   TWRITE                         
\item[Called by]   L601                                                   
                                                                    
\end{description}
@a
      subroutine mulpop(JUMP)
      implicit none
      double precision A , Aa , Atmchg , B , Bb , C , Fill , goc , 
     &                 Phycon , Toang , Toe , Tokg , zero
      integer i , i1 , i2 , Ian , Icharg , Icmp , idumb , Ifcond , 
     &        Ifdens , Ifdist , Ifgros , Ifmo , Ifoorc , Ifpop , 
     &        Ifspin , In , Iolbl , Iop , Iout , Ipunch
      integer Irtcrd , Irwca , Irwcb , Irweig , Irwgen , irwlbl , 
     &        irwmap , Irwpa , Irwpb , Irwpt , Irws , Irwsc1 , Irwscr , 
     &        Irwx , Irwy , Irwz , Ititle , j , j1 , j2
      integer JUMP , k , l , labcol , Label , lc , line , lrwlbl , 
     &        lrwmap , lsyma , lsymb , Mapper , Maprot , MAXATM , 
     &        MAXBAS , Mdim , Mnchrg , mode , Multip , Nae
      integer Namax , Natoms , Nbasis , Nbe , ncols , Ne , nosym , Nrot
      parameter (MAXBAS=150,MAXATM=100)
      dimension goc(MAXBAS,6) , line(80)
      dimension lsyma(1000) , lsymb(1000)
      common /iop   / Iop(50)
      common /mol   / Natoms , Icharg , Multip , Nae , Nbe , Ne , 
     &                Nbasis , Ian(101) , Atmchg(100) , C(300)
      common /phycon/ Toang , Tokg , Toe , Phycon(27)
      common /iopt  / Ifoorc , Ifdist , Ifmo , Ifdens , Ifpop , Ifgros , 
     &                Mnchrg , Ifcond , Ifspin , Icmp
      common /io    / In , Iout , Ipunch
      common /memry / Aa(MAXBAS) , Bb(MAXBAS) , A(MAXBAS,MAXBAS) , 
     &                B(MAXBAS,MAXBAS) , Fill(4700)
C      common /matrix/aa(127),bb(127),a(127,127),b(127,127)
      common /label / Label(1000) , Ititle(100) , Irtcrd(100)
      common /md601 / Mdim , Namax
      common /irw601/ Irweig , Irwca , Irwcb , Irwpa , Irwpb , Irws , 
     &                Iolbl , Irwx , Irwy , Irwz , Irwpt , Irwgen , 
     &                Irwscr , Irwsc1
      common /maps  / Nrot , Maprot(MAXBAS) , Mapper(MAXATM)
      data irwmap/559/ , lrwmap/125/
      data irwlbl/502/ , lrwlbl/600/
      data zero/0.0D0/
C
C
C1l601
C
C    *******************************************************************
C                          program mulpop
C                             link 601
C    *******************************************************************
C
C     This program performs a Mulliken population analysis on a wave
C     function.
C
C    *******************************************************************
C
C2iop(5)
C     iop(5) ... open or closed shell.
C     0 ... use ilsw to determine.
C     1 ... forced open shell.
C     2 ... forced closed shell.
C
C2iop(6)
C2iop(7)
C2iop(8)
C2iop(9)
C2iop(10)
C2iop(11)
C2iop(12)
C          the remaining options are print/no-print options.  if the
C     value of the option is zero, the default value (given below) is
C     assumed.  if the option is set to 1, the information is printed,
C     and if it is 2, the printing is suppressed.
C
C     0 ... default.
C     1 ... print.
C     2 ... do not print.
C
C     iop(6) ... distance matrix.  default:  no-print.
C
C     iop(7) ... molecular orbital coefficients.  default:  print.
C
C     iop(8) ... density matrix.  default:  no-print.
C
C     iop(9) ... full population analysis.  default:  print.
C
C     iop(10) ... gross orbital charges.  default:  print.
C
C     iop(11) ... gross orbital type charges.  default:  no-print.
C
C     iop(12) ... condensed to atoms.  default:  print.
C
C
C
C    *******************************************************************
C
C
C
C
C
C                  space for orbital symmetry labels.
C
C
C***********************************************************************
99001 format (4x,47H BETA MOLECULAR ORBITAL COEFFICIENTS (IMAGINARY,
     &        7H PART).)
99002 format (4x,37HBETA DENSITY MATRIX (IMAGINARY PART).)
99003 format (4x,34HFULL MULLIKEN POPULATION ANALYSIS.)
99004 format (5x,22HGROSS ORBITAL CHARGES.)
99005 format (10x,34HCONDENSED TO ATOMS (ALL ELECTRONS))
99006 format (10x,22HATOMIC SPIN DENSITIES.)
99007 format (10x,27HDISTANCE MATRIX (ANGSTROMS))
99008 format (10x,21HTOTAL ATOMIC CHARGES.)
C***********************************************************************
C
      call drum
      call rgdvo(Iop)
C
C
C                  figure out how many columns of mo coefs to print.
      ncols = max0(Nae+5,Nbe+5)
      ncols = min0(ncols,Nbasis)
C
C     read in the basis function labels.
C
      call tread(irwlbl,Label,lrwlbl,1,lrwlbl,1,0)
C
      call tread(irwmap,Nrot,lrwmap,1,lrwmap,1,0)
      Mapper(Natoms+1) = Nbasis + 1
C
      mode = 0
      if ( Ifoorc.ne.0 ) mode = 1
C
      if ( Ifdist.ne.0 ) then
         write (Iout,99007)
         call dismat(Natoms,Ian,C,2,5,Iout,idumb,1,Toang)
C
         i = Nbasis
      endif
C     make the orbital symmetry assignments.
      call symasg(A,B,Aa,Bb,goc,Nbasis,Nbasis,Nae,Nbe,Natoms,0)
      call ecnfig(Multip,Nae,Nbe,Nbasis,Aa)
      call symlbl(0,lsyma,Nbasis,nosym)
      if ( Ifoorc.ne.0 ) call symlbl(1,lsymb,Nbasis,nosym)
      labcol = 2
      if ( nosym.eq.1 ) labcol = 0
C
C     read and print molecular orbital coefficients.
C     ------------------------------------------------
C
      if ( Ifmo.ne.0 ) then
         if ( Ifoorc.eq.0 ) then
C
            call tread(Irweig,Aa,Nbasis,1,Nbasis,1,0)
         else
            call tread(Irweig,Aa,2*Nbasis,1,2*Nbasis,1,0)
         endif
C
C                  alpha (or total).
         call tread(Irwca,A,Mdim,Mdim,Nbasis,Nbasis,0)
C
C                  first, build and print the heading.
         lc = 0
         call pad(line,lc,4,1H )
         if ( Ifoorc.ne.0 ) call putbc('ALPHA',5,line,lc)
         call putbc(' MOLECULAR ORBITAL COEFFICIENTS',31,line,lc)
         if ( Icmp.ne.0 ) call putbc(' (REAL PART)',12,line,lc)
         call strout(Iout,line,lc,1)
C
99009    format (' ',25A4)
C
         call matprt(A,Mdim,Mdim,Nbasis,ncols,2,labcol,Label,lsyma,0,Aa,
     &               1)
         if ( Icmp.ne.0 ) then
C
C                  now the imaginary alpha part.
            call tread(Irwca+1,A,Mdim,Mdim,Nbasis,Nbasis,0)
C
C                  first, build and print the heading.
            lc = 0
            call pad(line,lc,4,1H )
            if ( Ifoorc.ne.0 ) call putbc('ALPHA',5,line,lc)
            call putbc(' MOLECULAR ORBITAL COEFFICIENTS',31,line,lc)
            call putbc(' (IMAGINARY PART).',18,line,lc)
            call strout(Iout,line,lc,1)
            call matprt(A,Mdim,Mdim,Nbasis,ncols,2,labcol,Label,lsyma,0,
     &                  Aa,1)
         endif
         if ( Ifoorc.ne.0 ) then
C
C                        real beta coefs.
            call tread(Irwcb,A,Mdim,Mdim,Nbasis,Nbasis,0)
C
C                        build and print heading.
            lc = 0
            call putbc('    BETA MOLECULAR ORBITAL COEFFICIENTS',39,
     &                 line,lc)
            if ( Icmp.ne.0 ) call putbc(' (REAL PART)',12,line,lc)
            call putchr('.',line,lc)
            call strout(Iout,line,lc,1)
C
            call matprt(A,Mdim,Mdim,Nbasis,ncols,2,labcol,Label,lsymb,0,
     &                  Aa(Nbasis+1),1)
            if ( Icmp.ne.0 ) then
               call tread(Irwcb+1,A,Mdim,Mdim,Nbasis,Nbasis,0)
               write (Iout,99001)
               call matprt(A,Mdim,Mdim,Nbasis,ncols,2,labcol,Label,
     &                     lsymb,0,Aa(Nbasis+1),1)
            endif
         endif
      endif
C
C     read and print the density matrix.
C     ----------------------------------
C
      call tread(Irwpa,A,Mdim,Mdim,Nbasis,Nbasis,1)
      if ( Ifdens.ne.0 ) then
C
C                        first, build and print the heading.
         lc = 0
         call pad(line,lc,4,1H )
         if ( Ifoorc.ne.0 ) call putbc('ALPHA',5,line,lc)
         call putbc(' DENSITY MATRIX',15,line,lc)
         if ( Icmp.ne.0 ) call putbc(' (REAL PART)',12,line,lc)
         call putchr('.',line,lc)
         call strout(Iout,line,lc,1)
C
         call matprt(A,Mdim,Mdim,Nbasis,Nbasis,2,0,Label,0,1,0,0)
         if ( Icmp.ne.0 ) then
            call tread(Irwpa+1,B,Mdim,Mdim,Nbasis,Nbasis,1)
C
C                  heading again.
            lc = 0
            call pad(line,lc,4,1H )
            if ( Ifoorc.eq.0 ) call putbc('ALPHA',5,line,lc)
            call putbc(' DENSITY MATRIX',15,line,lc)
            call putbc(' (IMAGINARY PART).',18,line,lc)
            call strout(Iout,line,lc,1)
C
            call matprt(B,Mdim,Mdim,Nbasis,Nbasis,2,0,Label,0,1,0,0)
         endif
         if ( Ifoorc.ne.0 ) then
C
C                              beta density.
            call tread(Irwpb,B,Mdim,Mdim,Nbasis,Nbasis,1)
C
C                        heading.
            lc = 0
            call pad(line,lc,4,1H )
            call putbc('BETA DENSITY MATRIX',19,line,lc)
            if ( Icmp.ne.0 ) call putbc(' (REAL PART)',12,line,lc)
            call putchr('.',line,lc)
            call strout(Iout,line,lc,1)
C
            call matprt(B,Mdim,Mdim,Nbasis,Nbasis,2,0,Label,0,1,0,0)
            if ( Icmp.ne.0 ) then
               call tread(Irwpb+1,B,Mdim,Mdim,Nbasis,Nbasis,1)
               write (Iout,99002)
               call matprt(B,Mdim,Mdim,Nbasis,Nbasis,2,0,Label,0,1,0,0)
            endif
         endif
      endif
C
C
C     do the Mulliken population analysis.
C
 100  call tread(Irws,B,Mdim,Mdim,Nbasis,Nbasis,1)
      do 200 i = 1 , Nbasis
         do 150 j = 1 , i
            A(i,j) = A(i,j)*B(i,j)
            A(j,i) = A(i,j)
 150     continue
 200  continue
      if ( Ifpop.ne.0 .and. mode.eq.0 ) then
         write (Iout,99003)
         call matprt(A,Mdim,Mdim,Nbasis,Nbasis,2,0,Label,0,1,0,0)
      endif
C
C     get gross orbital charges.
C
      do 300 i = 1 , Nbasis
         Aa(i) = zero
         do 250 j = 1 , Nbasis
            Aa(i) = Aa(i) + A(i,j)
 250     continue
 300  continue
      if ( mode.eq.1 ) then
         do 350 i = 1 , Nbasis
            goc(i,2) = Aa(i)
 350     continue
      endif
C     calculate the orbital spin densities.
      if ( mode.ne.2 ) then
C
         do 400 i = 1 , Nbasis
            goc(i,1) = Aa(i)
 400     continue
      else
         do 450 i = 1 , Nbasis
            goc(i,3) = Aa(i)
            goc(i,4) = goc(i,2) - goc(i,3)
 450     continue
      endif
C
      if ( Mnchrg.ne.0 ) call orbtyp(Aa)
C
C     condense to atoms.
C
      do 600 i = 1 , Natoms
         i1 = Mapper(i)
         i2 = Mapper(i+1) - 1
         do 500 j = 1 , Natoms
            B(i,j) = zero
            j1 = Mapper(j)
            j2 = Mapper(j+1) - 1
            do 480 k = i1 , i2
               do 460 l = j1 , j2
                  B(i,j) = B(i,j) + A(k,l)
 460           continue
 480        continue
 500     continue
 600  continue
C
      if ( mode.eq.1 ) then
         call twrite(Irwsc1,B,Mdim,Mdim,Natoms,Natoms,1)
         mode = 2
         call tread(Irwpb,A,Mdim,Mdim,Nbasis,Nbasis,1)
         goto 100
C
      elseif ( mode.ne.2 ) then
C
         if ( Ifgros.ne.0 ) then
            if ( Ifoorc.eq.1 ) then
C
               write (Iout,99004)
C                  build headings.
               lc = 0
               call putbc('TOTAL',5,line,lc)
               call putdel(2,line,lc)
               call putbc('ALPHA',5,line,lc)
               call putdel(2,line,lc)
               call putbc('BETA',4,line,lc)
               call putdel(2,line,lc)
               call putbc('SPIN',4,line,lc)
               call putdel(2,line,lc)
               call matprt(goc,Mdim,4,Nbasis,4,2,1,Label,line,0,0,0)
            else
               write (Iout,99004)
               call matprt(goc,Mdim,4,Nbasis,1,2,0,Label,0,0,0,0)
            endif
         endif
C
         if ( Ifcond.ne.0 ) then
            write (Iout,99005)
            call atompr(Natoms,Ian,B,Mdim,Mdim,Natoms)
            if ( Natoms.ne.1 ) then
               do 610 j = 1 , Natoms
                  do 605 i = 2 , Natoms
                     B(j,1) = B(j,1) + B(j,i)
 605              continue
 610           continue
               write (Iout,99008)
               call atompr(Natoms,Ian,B,Mdim,Mdim,1)
            endif
            if ( Ifoorc.ne.0 ) then
               call tread(Irwsc1,A,Mdim,Mdim,Natoms,Natoms,1)
               write (Iout,99006)
               call atompr(Natoms,Ian,A,Mdim,Mdim,Natoms)
            endif
         endif
      else
         mode = 0
         call tread(Irwsc1,A,Mdim,Mdim,Natoms,Natoms,1)
         do 650 i = 1 , Natoms
            do 620 j = 1 , Natoms
               A(i,j) = A(i,j) - B(i,j)
 620        continue
 650     continue
         call twrite(Irwsc1,A,Mdim,Mdim,Natoms,Natoms,1)
         call tread(Irwpt,A,Mdim,Mdim,Nbasis,Nbasis,1)
         goto 100
      endif
C
C     dq calculates the dipole moments.
C
      call dq(Natoms,Nbasis,Atmchg,Icharg,C,Mdim,A,B,Toe,Toang)
C
      if ( Ifoorc.eq.1 ) call frmpop(Natoms,Ian,Nbasis,Mdim,Mdim,A,B,Aa)
C
C     ..............
      JUMP = 0
C     ..............
C
      return
C
      end
@* INDEX.
