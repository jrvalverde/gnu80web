@* d1e.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] JUMP                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    IPURD   MXCORE                                         
\item[Transmits as argument]  ATMCHG  C       CORE    EXX     IPURF   IRWB    IRWFX  
             IRWPT   IRWW    NATOMS  NBASIS                         
\item[Uses]  ATMCHG  C       CORE    EXX     IOP     IOUT    IPURD  
             IPURF   IRWB    IRWFX   IRWPT   IRWW    MXCORE  NATOMS 
             NBASIS                                                 
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       BDUMP   DSTVNT  GETNB6  ILSW    LNK1E   REDOB   REDOP  
             TREAD   TWRITE                                         
\item[Called by]   L701                                                   
                                                                    
\end{description}
@a
      subroutine d1e(JUMP)
      implicit none
      double precision Atmchg , C , C1 , C2 , C3 , Core , Exx , X , Y , 
     &                 Z
      integer i , i1x , i1y , i1z , i2x , i2y , i2z , i3x , i3y , i3z , 
     &        i4x , i4y , i4z , i5x , i5y , i5z , Ian , Icharg , idump , 
     &        ie1xx
      integer iend , if1xyz , Ifill7 , ii , In , inao , Iop , Iout , 
     &        iprint , ipt , Ipunch , Ipurd , Ipurf , Irwb , Irwfx , 
     &        Irwpt , Irww , itest , iwt , Jan
      integer JUMP , LENB , lrwfx , MAXPRM , MAXS21 , MAXSH1 , MAXSHL , 
     &        Maxtyp , Multip , Mxcore , Nae , nat3 , nat3tt , Natoms , 
     &        nbas6d , Nbasis , Nbe , Ne , Nshell , ntt
      integer ntt6d
      integer Shella , Shelln , Shellt , Shellc , Aos , Aon
      dimension ii(15)
      common /iop   / Iop(50)
      common /mol   / Natoms , Icharg , Multip , Nae , Nbe , Ne , 
     &                Nbasis , Ian(101) , Atmchg(100) , C(300)
      parameter (MAXSHL=100,MAXPRM=(3*MAXSHL),MAXSH1=(MAXSHL+1),
     &           MAXS21=(2*MAXSHL+1),LENB=(15*MAXSHL+7*MAXSHL/2+1))
      common /b     / Exx(MAXPRM) , C1(MAXPRM) , C2(MAXPRM) , C3(MAXPRM)
     &                , X(MAXSHL) , Y(MAXSHL) , Z(MAXSHL) , Jan(MAXSHL)
     &                , Shella(MAXSHL) , Shelln(MAXSHL) , Shellt(MAXSHL)
     &                , Shellc(MAXSHL) , Aos(MAXSHL) , Aon(MAXSHL) , 
     &                Nshell , Maxtyp
      common /ipure / Ipurd , Ipurf
      common /io    / In , Iout , Ipunch
      common /irw701/ Irwb(2) , Irwpt , Irww , Irwfx , Ifill7(3)
      common /memry / Core(49999) , Mxcore
      equivalence (i1x,ii(1)) , (i1y,ii(2)) , (i1z,ii(3)) , (i2x,ii(4))
     &             , (i2y,ii(5)) , (i2z,ii(6)) , (i3x,ii(7)) , 
     &             (i3y,ii(8)) , (i3z,ii(9)) , (i4x,ii(10)) , 
     &             (i4y,ii(11)) , (i4z,ii(12)) , (i5x,ii(13)) , 
     &             (i5y,ii(14)) , (i5z,ii(15))
C
C***********************************************************************
C     control routine for 'in-core' one-electron derivative
C     calculation of contributions to hartree-fock first
C     derivatives.
C
C     ******************************************************************
C     iop(  )  ... options:
C     ******************************************************************
C
C     iop(33) ... print option.
C     0 ... no printing.
C     1 ... print atomic derivative contributions at end.
C
C     iop(34) ... dump option.
C     0 ... no dumping.
C     1 ... usual system stuff.
C     2 ... dump derivative contributions from within shell loops.
C
C     ****************************************************************
C
C     this routine serves two major purposes:
C     1.  perform initialization chores, like recovering pertinent
C         common blocks from the rw-files.
C     2.  allocate memory.  certain arrays depend on the number
C         of basis functions and number of atoms.
C         space for these things is allocated from the single array
C         'core'.
C***********************************************************************
C
C
C
C     the following dimension will accomodate:
C     up to 127 basis function, plus
C     up to 100 atoms.
C     just for reference, 'core' is used to allocate storage
C     for a scalar, natoms array, and
C     for two ntt arrays, and 15 natoms arrays.
C
C     array ii is used to allocate the 15 natoms arrays.
C
C
C     temp. array for re-formatting coordinates.
C     to be removed when blank common fiddling is done.
C
99001 format (' ALLOCATION FAILURE IN D1E.'/5x,'NEEDS',i6,
     &        '   BUT ONLY HAS',i6,' WORDS.')
C
C
C***********************************************************************
C     initialize this link.
C***********************************************************************
C   temporary stopgap while managing "core"
      Mxcore = 49999
C
C     call drum
C
C     fill local options.
      iprint = Iop(33)
      idump = Iop(34)
      if ( Iop(34).eq.3 ) call bdump(2)
      ntt = (Nbasis*(Nbasis+1))/2
      nat3 = 3*Natoms
C
C     fetch /b/ from the rw-files.
      call tread(Irwb(1),Exx(1),LENB,1,LENB,1,0)
C
C     fill /ipure/.  this requires examining the ilsw.
      call ilsw(2,2,Ipurd)
      call ilsw(2,16,Ipurf)
C     using ipurd, compute ntt6d.  if it turns out that this
C     is a 5d run, we must use ntt6d for allocating space
C     in core.
      ntt6d = ntt
      if ( Ipurd.ne.1 ) then
         call getnb6(nbas6d)
         ntt6d = (nbas6d*(nbas6d+1))/2
      endif
C
C
C     allocate storage in 'core'.
C           core(1)=e1xx
      ie1xx = 1
C           f1xyz(3*natoms)
      if1xyz = ie1xx + 1
C           pt(ntt)  =  total density matrix.
      ipt = if1xyz + 3*Natoms
C           wt(ntt)  =  total energy-weighted density matrix.
      iwt = ipt + ntt6d
C           allocate 3*5 natoms scratch arrays, using the convenient
C           vector ii.
      ii(1) = iwt + ntt6d
      do 100 i = 2 , 15
         ii(i) = ii(i-1) + Natoms
 100  continue
C           check for over-run.
      iend = ii(15) + Natoms - 1
      if ( iend.gt.Mxcore ) then
         write (Iout,99001) iend , Mxcore
         call lnk1e
      endif
C
C     read in density matrices from rw-files.
      call tread(Irwpt,Core(ipt),ntt,1,ntt,1,0)
      call tread(Irww,Core(iwt),ntt,1,ntt,1,0)
C
C     if the ipurd bit in ilsw indicates that this is a pure-d
C     run, make the necessary adjustments.
C     this consists of reformatting the aos portion of /b/,
C     and re-formatting the density matrices.
      if ( Ipurd.ne.1 ) then
C     reformat /b/.
C     this requires allocating an nbasis array in core.
         inao = iend + 1
         itest = inao + nbas6d - 1
         if ( itest.gt.Mxcore ) then
            write (Iout,99001) itest , Mxcore
            call lnk1e
         endif
         call redob(Nbasis,Core(inao),iprint)
C     now, reformat the density matrices.
         call redop(Nbasis,nbas6d,Core(inao),Core(ipt),iprint)
         call redop(Nbasis,nbas6d,Core(inao),Core(iwt),iprint)
C     the following statement causes setord, when called,
C     to load 6-d constants into /order/.
         Ipurd = 1
      endif
C
C
C
C***********************************************************************
C     calculate 1-electron contribution to hartree-fock forces.
C     routine returns with e1xx, and force contributions in
C     f1xyz.
C***********************************************************************
C
      call dstvnt(Natoms,Atmchg,C,Core(ipt),Core(iwt),Core(ie1xx),
     &            Core(if1xyz),Core(i1x),Core(i1y),Core(i1z),Core(i2x),
     &            Core(i2y),Core(i2z),Core(i3x),Core(i3y),Core(i3z),
     &            Core(i4x),Core(i4y),Core(i4z),Core(i5x),Core(i5y),
     &            Core(i5z),iprint,idump)
C
C     when done, output the final results to the rw-files.
C     note that the things to twrite are conveniently located
C     at the head of 'core'.
C     determine length of file.
      nat3tt = (nat3*(nat3+1))/2
      lrwfx = 1 + nat3 + nat3tt
C**temp st***  limit lrwfx t0 35 atoms.
      lrwfx = 5671
      call twrite(Irwfx,Core(ie1xx),lrwfx,1,lrwfx,1,0)
C
C     ..............
      JUMP = 0
C     ..............
      return
C
      end
@* INDEX.
