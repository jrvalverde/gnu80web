@* rdges.

\begin{verbatim}
A routine to deal with read-in initial guesses.  the
arguments are:
      a, b:  two (md x md) arrays used for scratch.
      aa, bb, cc: three scratch vectors of length "md".
      md:  the dimension of the arrays.  this should probably
           be set to "max(mb,nb)".
      nb:  this is the size of the current problem, that is,
           the required size of the output guess.
      mb:  this is the size of the input guess.
      ifcp:  what kind of guess is supplied
           1/2 -- mo coefs/density.
      jprj:  what kind of projection is called for
           0/1/2 -- none/minimal basis/ read-in basis.
      natoms:  the number of atoms in the molecule.
      ian:  a vector (length "natoms") of atomic numbers for
           atoms in the molecule.
      c:  coordinate array, dimensioned (3,natoms)
\end{verbatim}

\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[PASSED:] A                                                         
\item[PASSED:] B                                                         
\item[PASSED:] AA                                                        
\item[PASSED:] BB                                                        
\item[PASSED:] CC                                                        
\item[PASSED:] MD                                                        
\item[PASSED:] NB                                                        
\item[INPUT:] MB                                                        
\item[INPUT:] IFCP                                                      
\item[INPUT:] JPRJ                                                      
\item[PASSED:] NATOMS                                                    
\item[PASSED:] IAN                                                       
\item[PASSED:] C                                                         
\item[PASSED:] NAE                                                       
\item[PASSED:] NBE                                                       
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    B2                                                     
\item[Transmits as argument]  B1      IOBAS   IPRINT  IUHF                           
\item[Uses]  B1      B2      ICMP    IOBAS   IPRINT  IUHF           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       BINRD   FRMPRJ  GESERR  GETGES  MINBAS  TREAD          
\item[Called by]   GUESS                                                  
                                                                    
\end{description}
@a
      subroutine rdges(A,B,AA,BB,CC,MD,NB,MB,IFCP,JPRJ,NATOMS,IAN,C,NAE,
     &                 NBE)
      implicit none
      double precision A , AA , B , B1 , B2 , BB , C , CC
      integer i , I56d , Ialt , IAN , Ibasis , Iblock , Icmp , Icmplt , 
     &        Idgn , Idon1 , Idon2 , Idump , IFCP , Iguess , Imix , 
     &        Iobas , Iocmat , Iocore , Iodmat , Iodtot
      integer Iodum , Ioeig , Iogues , Iominc , Iomins , Iominv , 
     &        Ioproj , Iorthg , Ioscr1 , Iosmat , Iosvec , Iosym , 
     &        Ioteig , Iovmat , Ipolh , Iprint , Iproj , Iscale , 
     &        Ismear , ititle
      integer Itst , Iuhf , JPRJ , LENB , MAXSHL , MB , mbasb , MD , 
     &        NAE , NATOMS , NB , NBE , nwrdb
      dimension ititle(20)
      dimension A(*) , B(*) , AA(*) , BB(*) , CC(*) , IAN(*) , C(*)
      integer jbasis(4) , ialpha(4) , ibeta(4) , iadens(4) , ibdens(4)
      integer ialfai(4) , ibetai(4) , iadeni(4) , ibdeni(4)
      parameter (MAXSHL=100,LENB=(15*MAXSHL+7*MAXSHL/2+1))
      common /b     / B1(LENB)
      common /b2    / B2(LENB)
      common /rwf401/ Iosmat , Iodmat , Iocmat , Iovmat , Iocore , 
     &                Iobas , Iodum , Iominc , Iomins , Iominv , 
     &                Iodtot , Ioeig , Iogues , Iosym , Ioproj , 
     &                Iosvec , Ioscr1 , Iorthg , Ioteig
      common /ops401/ Iguess , Iproj , Iuhf , Icmp , Ialt , Imix , 
     &                Idgn , Iscale , Ismear , Iblock , Icmplt , Itst , 
     &                Ibasis , Ipolh , Idon1 , Idon2 , Iprint , Idump , 
     &                I56d
C
      data jbasis/'BASI' , 'S   ' , '    ' , '    '/
      data ialpha/'ALPH' , 'A MO' , ' COE' , 'FS  '/
      data iadens/'ALPH' , 'A DE' , 'NSIT' , 'Y   '/
      data iadeni/'ALPH' , 'A DE' , 'NSIT' , 'Y,I '/
      data ibeta/'BETA' , ' MO ' , 'COEF' , 'S   '/
      data ibdens/'BETA' , ' DEN' , 'SITY' , '    '/
      data ibdeni/'BETA' , ' DEN' , 'SITY' , ',I  '/
      data ialfai/'ALPH' , 'A MO' , ' COE' , 'FS,I'/
      data ibetai/'BETA' , ' MO ' , 'COEF' , 'S,I '/
      if ( JPRJ.ne.0 ) then
         if ( JPRJ.eq.2 ) then
C
C                        build projection matrix from read-in
C                        basis set.
            call binrd(B2,ititle,jbasis,nwrdb,mbasb)
            if ( mbasb.ne.MB ) call geserr(5)
         else
C
C                        build minimal basis projection matrix.
            call minbas(mbasb,NATOMS,IAN,C)
            do 20 i = 1 , LENB
               B2(i) = B1(i)
 20         continue
            if ( mbasb.ne.MB ) call geserr(3)
         endif
C
         call tread(Iobas,B1,LENB,1,LENB,1,0)
         call frmprj(A,B,AA,MD,NB,MD,Iprint,IFCP)
      endif
C
C
C                        now, read in the supplied data, and project
C                        into the present basis.  this is all handled
C                        by the handy-dandy routine "getges",
C                        which deals with reading, projecting, forming
C                        density, and trwiting.
C
C                  - alpha, real.
      if ( IFCP.eq.1 ) call getges(ialpha,A,B,AA,BB,CC,1,IFCP,JPRJ,MD,
     &                             NB,MB,NAE,Iuhf)
      if ( IFCP.eq.2 ) call getges(iadens,A,B,AA,BB,CC,1,IFCP,JPRJ,MD,
     &                             NB,MB,NAE,Iuhf)
C
C                  - beta, real.
      if ( IFCP.eq.1 .and. Iuhf.eq.1 )
     &     call getges(ibeta,A,B,AA,BB,CC,3,IFCP,JPRJ,MD,NB,MB,NBE,Iuhf)
      if ( IFCP.eq.2 .and. Iuhf.eq.1 )
     &     call getges(ibdens,A,B,AA,BB,CC,3,IFCP,JPRJ,MD,NB,MB,NBE,
     &     Iuhf)
C
C                  - alpha, imaginary.
      if ( IFCP.eq.1 .and. Icmp.eq.1 )
     &     call getges(ialfai,A,B,AA,BB,CC,2,IFCP,JPRJ,MD,NB,MB,NAE,
     &     Iuhf)
      if ( IFCP.eq.2 .and. Icmp.eq.1 )
     &     call getges(iadeni,A,B,AA,BB,CC,2,IFCP,JPRJ,MD,NB,MB,NAE,
     &     Iuhf)
C
C                  - beta, imaginary.
      if ( IFCP.eq.1 .and. Icmp.eq.1 .and. Iuhf.eq.1 )
     &     call getges(ibetai,A,B,AA,BB,CC,4,IFCP,JPRJ,MD,NB,MB,NBE,
     &     Iuhf)
      if ( IFCP.eq.2 .and. Icmp.eq.1 .and. Iuhf.eq.1 )
     &     call getges(ibdeni,A,B,AA,BB,CC,4,IFCP,JPRJ,MD,NB,MB,NBE,
     &     Iuhf)
C
      return
C
      end
@* INDEX.
