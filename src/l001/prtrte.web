@* prtrte.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[PASSED:] IOUT                                                      
\item[INPUT:] LNK                                                       
\item[INPUT:] JOP                                                       
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       DECCHR  PUTCHR  STROUT                                 
\item[Called by]   FILLRT  RSTART                                         
                                                                    
\end{description}
@a
      subroutine prtrte(IOUT,LNK,JOP)
C ----------------------------------------------------------------------
      implicit none
      integer alt , buf , crd , i , IOUT , JOP , l , LNK , nb , new , 
     &        nlink , oalt , ocrd , oov , ov , putone , seg
      dimension JOP(50,50) , LNK(200) , buf(20)
      data nb/1/
C         this routine prints out a route, in its non-standard
C     form.  "iout" is the fortran unit to which the output will be
C     written.  "lnk" is the sequence of overlays and jumps.  "jop" is
C     list of options.
C     r. a. whiteside - november 1979
C ----------------------------------------------------------------------
C
C
      ocrd = -1
      oalt = -1
      oov = -1
      nlink = 0
C
C                  top of loop for examining lnk.
 100  nlink = nlink + 1
      l = LNK(nlink)
      if ( l.ne.0 ) then
         if ( l.gt.10000 ) then
C
C                  decode data for current link.
            alt = l/1000000
            crd = mod(l,1000000)/10000
            ov = mod(l,10000)/100
            seg = mod(l,100)
C
C                  compare with last link.
            new = 0
            if ( crd.ne.ocrd .or. alt.ne.oalt .or. ov.ne.oov ) new = 1
            ocrd = crd
            oalt = alt
            oov = ov
            if ( new.eq.1 ) then
C
C                        new card.
               nb = nb - 1
               if ( nb.gt.0 ) call putchr(';',buf,nb)
               if ( nb.gt.0 ) call strout(IOUT,buf,nb,1)
               nb = 0
               if ( alt.ne.0 ) then
                  call putchr('(',buf,nb)
                  call decchr(alt,buf,nb)
                  call putchr(')',buf,nb)
               endif
               call decchr(ov,buf,nb)
               call putchr('/',buf,nb)
C
C                  put the options into buf.
               putone = 0
               do 110 i = 1 , 50
                  if ( JOP(i,crd).ne.0 ) then
                     putone = 1
                     call decchr(i,buf,nb)
                     call putchr('=',buf,nb)
                     call decchr(JOP(i,crd),buf,nb)
                     call putchr(',',buf,nb)
                  endif
 110           continue
               if ( putone.eq.1 ) nb = nb - 1
               call putchr('/',buf,nb)
            endif
C
C                  same as last link ... just add a segment.
            call decchr(seg,buf,nb)
            call putchr(',',buf,nb)
         else
C
C                  jump spec.  this implies a new card.
            if ( nb.gt.0 ) nb = nb - 1
            call putchr('(',buf,nb)
            call decchr(l,buf,nb)
            call putchr(')',buf,nb)
            call putchr(';',buf,nb)
         endif
         goto 100
      endif
C
C                        output the string.
      nb = nb - 1
      call putchr(';',buf,nb)
      call strout(IOUT,buf,nb,1)
      return
C
      end
@* INDEX.
