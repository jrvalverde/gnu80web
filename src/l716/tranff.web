@* tranff.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXNZ                                                     
\item[INPUT:] NZ                                                        
\item[PASSED:] IANZ                                                      
\item[PASSED:] IZ                                                        
\item[PASSED:] BL                                                        
\item[PASSED:] ALPHA                                                     
\item[PASSED:] BETA                                                      
\item[INPUT:] NPARM                                                     
\item[PASSED:] FX                                                        
\item[OUTPUT:] FFX                                                       
\item[OUTPUT:] FTMP1                                                     
\item[INPUT:] FTMP2                                                     
\item[OUTPUT:] FFTMP                                                     
\item[INPUT:] MXCORE                                                    
\item[PASSED:] CORE                                                      
\item[PASSED:] IDUMP                                                     
\item[PASSED:] TOANG                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  IOUT                                                   
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       ACLEAR  FORMBG  LNK1E   TRANF   ZMMOD                  
\item[Called by]   FRCOUT                                                 
                                                                    
\end{description}
@a
      subroutine tranff(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,NPARM,FX,FFX,
     &                  FTMP1,FTMP2,FFTMP,MXCORE,CORE,IDUMP,TOANG)
      implicit none
      double precision ALPHA , BETA , BL , CORE , del , del1 , FFTMP , 
     &                 FFX , FTMP1 , FTMP2 , FX , pt5 , TOANG
      integer i , i1 , i2 , i3 , i4 , i5 , i6 , i7 , i8 , IANZ , IDUMP , 
     &        iend , igeig , ii , ij , In , Iout , Ipunch , ipz , IZ
      integer j , jpz , lind , MAXNZ , MXCORE , nnprm , NPARM , NZ , nz3
      dimension IANZ(*) , IZ(MAXNZ,4) , BL(*) , ALPHA(*) , BETA(*)
      dimension FX(*) , FFX(*) , FTMP1(*) , FTMP2(*) , FFTMP(*)
      dimension CORE(*)
      common /io    / In , Iout , Ipunch
      data pt5/0.5D0/
      data del1/0.00001D0/
C
C
C***********************************************************************
C     routine to transform a matrix of second derivatives over
C     cartesian coordinates to second derivatives over internal
C     coordintes.
C     this routine is to be used in conjunction with tranf.
C
C     arguments:
C
C     maxnz  ... leading dimension of z-matrix.
C     nz     ... number of rows in z-matrix.
C     ianz   ... integer atomic numbers for the z-matrix.
C     iz     ... integer connectivity information.
C     bl     ... bondlengths.
C     alpha  ... first angles.
C     beta   ... second angles.
C     nparm  ... number of z-matrix degrees of freedom.
C     fx     ... input vector containing first derivatives over
C                internal coordinates.
C     ffx    ... input array contaning second derivatives over
C                cartesian coordinates.
C                at end, contains second derivatives over
C                internal coordinates.
C     ftmp1  ... scratch vector of length (3*nz).
C     ftmp2  ... scratch vector of length (nparm).
C     fftmp  ... scratch vector of length (3*nz*nparm).
C     mxcore ... amount of space available in core.
C     core   ... work space of length mxcore.
C     idump  ... dump flag.
C
C     this routine needs the following space in core:
C       1.  ib     ... integer b-matrix, length 4*nparm.
C       2.  b      ... b-matrix                 12*nparm.
C       3.  g      ... g-matrix                 nparm**2.
C       4.  xm     ... scr for formbg           5*nz
C       5.  cc     ... scr for formbg           3*natoms (use nz).
C       6.  cz     ... scr for formbg           3*nz.
C       7.  ll     ... scr for formbg           nparm  (use flt pt).
C       8.  mm     ... scr for formbg           nparm  (use flt pt).
C***********************************************************************
C
C
C
C
99001 format (' ALLOCATION FAILURE IN TRANFF.'/'  NEEDS:',i6,'  HAS:',
     &        i6)
C
C     statement function for linear indexing.
      lind(i,j) = (i*(i-1))/2 + j
C
C     ******************************************************************
C     initialization.
C     ******************************************************************
      nz3 = 3*NZ
      nnprm = (NPARM*(NPARM+1))/2
C
C     allocate space in core for formbg.
C
C                 ib(4*nparm)
      i1 = 1
C                 b(3*4*nparm)
      i2 = i1 + 4*NPARM
C                 g(nparm*nparm)
      i3 = i2 + 3*4*NPARM
C                 xm(nz*5)
      i4 = i3 + NPARM*NPARM
C                 cz(3*nz)
      i5 = i4 + NZ*5
C                 cc(3*nz)
      i6 = i5 + 3*NZ
C                 ll(nparm)  (use floating point store).
      i7 = i6 + 3*NZ
C                 mm(nparm)  (use floating point store).
      i8 = i7 + NPARM
      iend = i8 + NPARM - 1
      if ( iend.gt.MXCORE ) then
         write (Iout,99001) iend , MXCORE
         call lnk1e
      endif
      igeig = 0
C
C     obtain initial ib,b,g matrix.
      call formbg(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,NPARM,igeig,CORE(i2),
     &            CORE(i1),CORE(i3),CORE(i4),CORE(i5),CORE(i6),CORE(i7),
     &            CORE(i8),IDUMP,TOANG)
C
C     ******************************************************************
C     transform the input matrix.
C     ******************************************************************
C
C     transform first suffix.
      do 200 i = 1 , nz3
C     copy out one row into temp array ftmp1.
         do 50 j = 1 , i
            ij = lind(i,j)
            FTMP1(j) = FFX(ij)
 50      continue
         do 100 j = i , nz3
            ij = lind(j,i)
            FTMP1(j) = FFX(ij)
 100     continue
C     transform current row.
         call tranf(NPARM,NZ,IANZ,FTMP1,FTMP2,CORE(i1),CORE(i2),CORE(i3)
     &              ,CORE(i7))
C     pack result into scratch array.
         do 150 j = 1 , NPARM
            ij = i + nz3*(j-1)
            FFTMP(ij) = FTMP2(j)
 150     continue
 200  continue
C
C     transform second suffix.
      call aclear(nnprm,FFX)
      do 400 i = 1 , NPARM
         ii = nz3*(i-1)
C     transform current column.
         call tranf(NPARM,NZ,IANZ,FFTMP(ii+1),FTMP2,CORE(i1),CORE(i2),
     &              CORE(i3),CORE(i7))
C     pack this back into the original array (now stored
C     symmetric).
         do 250 j = 1 , i
            ij = lind(i,j)
            FFX(ij) = FFX(ij) + FTMP2(j)
 250     continue
         do 300 j = i , NPARM
            ij = lind(j,i)
            FFX(ij) = FFX(ij) + FTMP2(j)
 300     continue
 400  continue
C
C     ******************************************************************
C     determine effect of differentiating the coordinate transformation.
C     this is done by numerically differentiating the b,ib,g matrices.
C     ******************************************************************
C
C     loop over the number of z-matrix degrees of freedom.
      do 600 i = 1 , NPARM
C     determine what to increment.
         if ( i.le.(NZ-1) ) then
            ipz = i + 1
            jpz = 1
            del = del1
C
         elseif ( i.gt.(2*NZ-3) ) then
C
            ipz = i - 2*NZ + 6
            jpz = 3
            del = del1
         else
            ipz = i - NZ + 3
            jpz = 2
            del = del1
         endif
C
C     determine step up.
         call zmmod(BL,ALPHA,BETA,ipz,jpz,+del)
         call formbg(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,NPARM,igeig,CORE(i2)
     &               ,CORE(i1),CORE(i3),CORE(i4),CORE(i5),CORE(i6),
     &               CORE(i7),CORE(i8),IDUMP,TOANG)
         call tranf(NPARM,NZ,IANZ,FX,FTMP1,CORE(i1),CORE(i2),CORE(i3),
     &              CORE(i7))
C
C     determine step back.
         call zmmod(BL,ALPHA,BETA,ipz,jpz,-del-del)
         call formbg(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,NPARM,igeig,CORE(i2)
     &               ,CORE(i1),CORE(i3),CORE(i4),CORE(i5),CORE(i6),
     &               CORE(i7),CORE(i8),IDUMP,TOANG)
         call tranf(NPARM,NZ,IANZ,FX,FTMP2,CORE(i1),CORE(i2),CORE(i3),
     &              CORE(i7))
C
C     restore modified z-matrix element to its original state.
         call zmmod(BL,ALPHA,BETA,ipz,jpz,+del)
C
C     compute derivatives.
         do 450 j = 1 , NPARM
            FTMP1(j) = (FTMP1(j)-FTMP2(j))/(del1+del1)
 450     continue
C
C     add contributions into ffx.
         do 500 j = 1 , i
            ij = lind(i,j)
            FFX(ij) = FFX(ij) - FTMP1(j)
 500     continue
         do 550 j = i , NPARM
            ij = lind(j,i)
            FFX(ij) = FFX(ij) - FTMP1(j)
 550     continue
 600  continue
C
      do 700 ij = 1 , nnprm
         FFX(ij) = FFX(ij)*pt5
 700  continue
C
      return
C
      end
@* INDEX.
