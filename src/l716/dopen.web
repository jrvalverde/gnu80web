@* dopen.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NATOMS                                                    
\item[INPUT:] NBASIS                                                    
\item[OUTPUT:] FXYZ                                                      
\item[INPUT:] DA                                                        
\item[INPUT:] DB                                                        
\item[PASSED:] DBUF2E                                                    
\item[INPUT:] IBUF2E                                                    
\item[OUTPUT:] IJ                                                        
\item[INPUT:] IDUMP                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    IBASE   IFIL    INTCNT  JA      K       KNTT1   NTX    
             NWPI    SINDX                                          
\item[Transmits as argument]  IRWIBF  IRWPA   IRWPB   ISMODE  LENIBF                 
\item[Uses]  I       IBASD   IBASE   ICON    IFIL    INTCNT  IOUT   
             IRESET  IRWIBF  IRWPA   IRWPB   ISMODE  ITOTAL  IUX    
             J       JA      K       KNTT1   L       LENIBF  MINDX  
             NTX     NWPI    P       Q       R       SINDX          
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       IREAD   IWAIT   IWIND   LNK1E   TREAD   UNPCK4         
\item[Called by]   FRCOUT                                                 
                                                                    
\end{description}
@a
      subroutine dopen(NATOMS,NBASIS,FXYZ,DA,DB,DBUF2E,IBUF2E,IJ,IDUMP)
      implicit none
      double precision DA , DB , DBUF2E , dijkl , four , fx , FXYZ , 
     &                 fy , fz , pt5 , two , Valint , x , zero
      integer I , iatx , iaty , iatz , Ibasd , Ibase , Ibfpad , IBUF2E , 
     &        Icon , Icount , Idrv1 , IDUMP , Ifil , iflst , ii , iia , 
     &        IJ , In , inst , intape
      integer Intcnt , Iout , Ipunch , Iq , iqbufr , iqproc , Ireset , 
     &        Irwibf , Irwpa , Irwpb , Irwpt , Irww , Ismode , Istat , 
     &        Itotal , Iux , J , Ja , jatx , jaty
      integer jatz , K , katx , katy , katz , Kntt1 , Kntt2 , L , Last , 
     &        latx , laty , latz , Lenibf , Limint , m , maxm , mij , 
     &        mik , mil , Mindx
      integer mjk , mjl , mkl , Mode , mpp , mpq , mpr , mqq , mqr , 
     &        mrq , mrr , nat3 , NATOMS , NBASIS , nbsp , next , nfile , 
     &        Nrpext , nset , nstt
      integer ntt , Ntx , Nwiib , nwiib2 , Nwpi
      integer P , Q , R , Sindx
      integer Dbase , Dbasd , Dcount
      dimension FXYZ(*) , DA(*) , DB(*) , DBUF2E(*) , IBUF2E(*) , IJ(*)
      dimension iia(18) , x(9) , fx(3) , fy(3) , fz(3)
      common /io    / In , Iout , Ipunch
      common /packed/ I , J , K , L , Valint , Ja
      common /ibf   / Ismode , Mode , Istat , Last , Ntx , Iux(5) , 
     &                Icon , Nrpext , Kntt1 , Kntt2 , Ibase , Ibasd(2) , 
     &                Dbase , Dbasd(2) , Ireset(2) , Iq , Ifil , 
     &                Intcnt , Itotal , Limint , Nwpi , Nwiib , Ibfpad
      common /irw716/ Irww , Irwpt , Idrv1 , Irwpa , Irwpb
      common /irwibf/ Irwibf , Lenibf
      equivalence (P,I) , (Q,J) , (R,K) , (Sindx,L) , (Mindx,K)
      equivalence (iia(1),x(1))
      equivalence (Kntt1,Icount) , (Kntt2,Dcount)
      data zero , pt5 , two , four/0.D0 , 0.5D0 , 2.D0 , 4.D0/
      data nfile/0/
C
C
C
C***********************************************************************
C     routine to add the two-electron contribution of the
C     hartree-fock first-derivatives into the array fxyz.
C     this routine read the integrals written by dphnxw,
C     and can handle uhf wave-functions only.
C
C     arguments:
C
C     natoms ... number of atoms.
C     nbasis ... number of basis functions.
C     fxyz   ... array into which the contributions are added.
C     da     ... scratch vector of length ntt used to contain
C                the alpha-density matrix.
C     db     ... scratch vector of length ntt used to contain the
C                beta-density matrix.
C     dbuf2e ... scratch vector of length nwiib used as an integral
C                buffer.  (nwiib is defined in /ibf/.)
C     ibuf2e ... same as dbuf2e, must be equivalenced by call
C                to this routine.
C     ij     ... vector of length (nbasis+1), used for indexing.
C     idump  ... system dump variable.
C***********************************************************************
C
C
C
C
C=nr  data pt25/0.25d0/
C
99001 format (2x,6F12.7)
99002 format (25H1BAD INTEGRAL COUNT:  IS ,i9,5x,12H  SHOULD BE ,i9)
99003 format (1x,7(2x,i20))
99004 format (' DUMP OF TWO ELECTRON INTEGRAL DERIVATIVE CONTRIBUTION ',
     &        'TO THE FORCES')
99005 format (2x,3F10.7)
C
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      ntt = NBASIS*(NBASIS+1)/2
C
C     read in the alpha- and beta-density matrices.
      call tread(Irwpa,DA,ntt,1,ntt,1,0)
      call tread(Irwpb,DB,ntt,1,ntt,1,0)
C
C     recover information characterizing the d2e file.
      call tread(Irwibf,Ismode,Lenibf,1,Lenibf,1,0)
C     start up the i/o.
      Nwpi = 0
      nset = 0
      nat3 = 3*NATOMS
      nbsp = NBASIS + 1
      do 100 ii = 1 , nbsp
         IJ(ii) = ii*(ii-1)/2
 100  continue
      iflst = 0
      iqbufr = 1
      iqproc = 2
      Intcnt = 0
      intape = Iux(2)
      Ntx = 1
      nwiib2 = 300
      call iread(intape,iqbufr,DBUF2E)
      Ifil = 1
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C     i/o control section.  enter here to get next buffer and con-
C     tinue i/o.  iqproc always points to the buffer available for
C     processing (ie. computing), and iqbufr always points to
C     the buffer into which integrals are being read.
C     ibase points to the fwa-1 (of the data) in the current buffer.
C     after waiting on a buffer, use buflab to decode the buffer label.
 200  if ( iflst.gt.0 ) then
C
C      end of buffer
C
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C
C     final operations.
         call iwind(intape)
C     check the final count.
         if ( Intcnt.ne.Itotal ) then
            write (Iout,99002) Intcnt , Itotal
            call lnk1e
         endif
      else
         call iwait(intape)
         iqbufr = iabs(iqbufr-2) + 1
         iqproc = iabs(iqproc-2) + 1
         Ibase = Ibasd(iqproc)
         if ( IBUF2E(Ibase).lt.0 ) iflst = 1
         if ( iflst.eq.0 ) then
            if ( Ifil.eq.(nfile+Ntx*Icon) ) then
               call iwind(intape)
               Ntx = Ntx + 1
               next = Iux(Ntx+1)
               call iwind(next)
               intape = next
            endif
C     bypass i/o request if the previous record was the last record.
            call iread(intape,iqbufr,DBUF2E)
            Ifil = Ifil + 1
         endif
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C
C     we now have a buffer of data in ibuf2e(ibase(iqproc)).
C
         m = Ireset(1) + Ibase - Nwpi
         if ( IDUMP.gt.2 ) write (Iout,99003)
     &                            (IBUF2E(Ibase-1+K),K=1,nwiib2)
         Kntt1 = iabs(IBUF2E(Ibase))
         maxm = Ibase + Kntt1 - 1
 250     m = m + Nwpi
         if ( m.gt.maxm ) goto 200
         Intcnt = Intcnt + 1
         Ja = IBUF2E(m)
C      ja=0 indicates new combination of derivatives
         if ( Ja.lt.0 ) then
C
C     type 2 integrals
C
            Ja = -Ja
            call unpck4
            Sindx = Sindx + 1
            if ( Sindx.eq.2 ) then
C***********************************************************************
C   case 2     (ab,bc)=> pq,qr
C***********************************************************************
               mpq = IJ(P) + Q
               mqr = IJ(Q) + R
               mqq = IJ(Q+1)
               mpr = IJ(P) + R
               dijkl = four*((DA(mpq)+DB(mpq))*(DA(mqr)+DB(mqr)))
     &                 - two*(DA(mpq)*DA(mqr)+DB(mpq)*DB(mqr)+DA(mpr)
     &                 *DA(mqq)+DB(mpr)*DB(mqq))
            elseif ( Sindx.eq.3 ) then
C***********************************************************************
C   case 3     (ac,bc)=> pq,rq
C***********************************************************************
               mpq = IJ(P) + Q
               mrq = IJ(R) + Q
               mqq = IJ(Q+1)
               mpr = IJ(P) + R
               dijkl = four*((DA(mpq)+DB(mpq))*(DA(mrq)+DB(mrq)))
     &                 - two*(DA(mpr)*DA(mqq)+DB(mpr)*DB(mqq)+DA(mpq)
     &                 *DA(mrq)+DB(mpq)*DB(mrq))
            elseif ( Sindx.eq.4 ) then
C***********************************************************************
C   case 4     (ab,ab)=> pq,pq
C***********************************************************************
               mpq = IJ(P) + Q
               mpp = IJ(P+1)
               mqq = IJ(Q+1)
               dijkl = two*((DA(mpq)+DB(mpq))*(DA(mpq)+DB(mpq)))
     &                 - (DA(mpp)*DA(mqq)+DB(mpp)*DB(mqq)+DA(mpq)
     &                 *DA(mpq)+DB(mpq)*DB(mpq))
            elseif ( Sindx.eq.5 ) then
C***********************************************************************
C   case 5     (aa,bc)=> pp,qr
C***********************************************************************
               mpp = IJ(P+1)
               mqr = IJ(Q) + R
               mpq = IJ(P) + Q
               mpr = IJ(P) + R
               dijkl = two*((DA(mpp)+DB(mpp))*(DA(mqr)+DB(mqr)))
     &                 - two*(DA(mpq)*DA(mpr)+DB(mpq)*DB(mpr))
            elseif ( Sindx.eq.6 ) then
C***********************************************************************
C   case 6     (ab,cc)=> pq,rr
C***********************************************************************
               mpq = IJ(P) + Q
               mrr = IJ(R+1)
               mpr = IJ(P) + R
               if ( Q.le.R ) then
C
                  mqr = IJ(R) + Q
               else
                  mqr = IJ(Q) + R
               endif
               dijkl = two*((DA(mpq)+DB(mpq))*(DA(mrr)+DB(mrr)))
     &                 - two*(DA(mpr)*DA(mqr)+DB(mpr)*DB(mqr))
            elseif ( Sindx.eq.7 ) then
C***********************************************************************
C   case 7
C   three subcases:
C   190        (ab,bb)=> pq,qq
C   200        (aa,bb)=> pp,qq
C   210        (aa,ab)=> pp,pq
C***********************************************************************
               if ( Mindx.eq.2 ) then
C
                  mpp = IJ(P+1)
                  mqq = IJ(Q+1)
                  mpq = IJ(P) + Q
                  dijkl = ((DA(mpp)+DB(mpp))*(DA(mqq)+DB(mqq)))
     &                    - (DA(mpq)*DA(mpq)+DB(mpq)*DB(mpq))
               elseif ( Mindx.eq.3 ) then
C
                  mpp = IJ(P+1)
                  mpq = IJ(P) + Q
                  dijkl = two*((DA(mpp)+DB(mpp))*(DA(mpq)+DB(mpq)))
     &                    - two*(DA(mpp)*DA(mpq)+DB(mpp)*DB(mpq))
               else
C
                  mpq = IJ(P) + Q
                  mqq = IJ(Q+1)
                  dijkl = two*((DA(mpq)+DB(mpq))*(DA(mqq)+DB(mqq)))
     &                    - two*(DA(mpq)*DA(mqq)+DB(mpq)*DB(mqq))
               endif
            elseif ( Sindx.eq.8 ) then
C***********************************************************************
C   case 8     (aa,aa)=> pp,pp
C***********************************************************************
               mpp = IJ(P+1)
               dijkl = pt5*((DA(mpp)+DB(mpp))**2)
     &                 - pt5*(DA(mpp)*DA(mpp)+DB(mpp)*DB(mpp))
            else
C***********************************************************************
C   case 1     (ab,ac)=> pq,pr
C***********************************************************************
               mpq = IJ(P) + Q
               mpr = IJ(P) + R
               mpp = IJ(P+1)
               mqr = IJ(Q) + R
               dijkl = four*((DA(mpq)+DB(mpq))*(DA(mpr)+DB(mpr)))
     &                 - two*(DA(mpp)*DA(mqr)+DB(mpp)*DB(mqr)+DA(mpr)
     &                 *DA(mpq)+DB(mpr)*DB(mpq))
            endif
         elseif ( Ja.eq.0 ) then
C
C     process atom labels
C
            if ( nset.ne.0 ) then
               if ( IDUMP.ge.2 ) write (Iout,99001) fx , fy , fz
               FXYZ(latx) = FXYZ(latx) - fx(1) - fx(2) - fx(3)
               FXYZ(laty) = FXYZ(laty) - fy(1) - fy(2) - fy(3)
               FXYZ(latz) = FXYZ(latz) - fz(1) - fz(2) - fz(3)
               if ( nset.eq.1 ) goto 260
               if ( nset.ne.2 ) then
C
                  FXYZ(katx) = FXYZ(katx) + fx(3)
                  FXYZ(katy) = FXYZ(katy) + fy(3)
                  FXYZ(katz) = FXYZ(katz) + fz(3)
               endif
               FXYZ(jatx) = FXYZ(jatx) + fx(2)
               FXYZ(jaty) = FXYZ(jaty) + fy(2)
               FXYZ(jatz) = FXYZ(jatz) + fz(2)
 260           FXYZ(iatx) = FXYZ(iatx) + fx(1)
               FXYZ(iaty) = FXYZ(iaty) + fy(1)
               FXYZ(iatz) = FXYZ(iatz) + fz(1)
            endif
            Ja = IBUF2E(m+1)
            call unpck4
            nset = 3
            if ( K.eq.0 ) nset = 2
            if ( J.eq.0 ) nset = 1
            nstt = 6*nset
            Nwpi = 6*nset + 1
            m = m + 2 - Nwpi
            if ( nset.eq.1 ) goto 280
            if ( nset.ne.2 ) then
C
               katx = 3*K - 2
               katy = katx + 1
               katz = katy + 1
            endif
            jatx = 3*J - 2
            jaty = jatx + 1
            jatz = jaty + 1
 280        iatx = 3*I - 2
            iaty = iatx + 1
            iatz = iaty + 1
            latx = 3*L - 2
            laty = latx + 1
            latz = laty + 1
            do 300 ii = 1 , 3
               fx(ii) = zero
               fy(ii) = zero
               fz(ii) = zero
 300        continue
            goto 250
         else
C
C     type 1 integrals
C
C***********************************************************************
C   case 0    (ab,cd)
C***********************************************************************
            call unpck4
            mij = IJ(I) + J
            mkl = IJ(K) + L
            mik = IJ(I) + K
            if ( J.le.L ) then
C
               mjl = IJ(L) + J
            else
               mjl = IJ(J) + L
            endif
            mil = IJ(I) + L
            if ( J.le.K ) then
C
               mjk = IJ(K) + J
            else
               mjk = IJ(J) + K
            endif
            dijkl = four*((DA(mij)+DB(mij))*(DA(mkl)+DB(mkl)))
     &              - two*(DA(mik)*DA(mjl)+DB(mik)*DB(mjl)+DA(mil)
     &              *DA(mjk)+DB(mil)*DB(mjk))
         endif
C
C     end of loop
C
         do 350 ii = 1 , nstt
            iia(ii) = IBUF2E(m+ii)
 350     continue
         inst = -2
         do 400 ii = 1 , nset
            inst = inst + 3
            fx(ii) = fx(ii) + x(inst)*dijkl
            fy(ii) = fy(ii) + x(inst+1)*dijkl
            fz(ii) = fz(ii) + x(inst+2)*dijkl
 400     continue
         goto 250
      endif
C
      if ( IDUMP.ge.2 ) write (Iout,99004)
      if ( IDUMP.ge.2 ) write (Iout,99005) (FXYZ(ii),ii=1,nat3)
C
C     return to caller.
      return
C
      end
@* INDEX.
