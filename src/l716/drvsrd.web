@* drvsrd.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NATOMS                                                    
\item[INPUT:] NBASIS                                                    
\item[OUTPUT:] FXYZ                                                      
\item[INPUT:] D                                                         
\item[INPUT:] DD                                                        
\item[INPUT:] IATMS                                                     
\item[INPUT:] IDUMP                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Transmits as argument]  IDRV1   IRWPT   IRWW                                   
\item[Uses]  IDRV1   IOUT    IRWPT   IRWW                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       FILEIO  SCFTRC  TREAD                                  
\item[Called by]   FRCOUT                                                 
                                                                    
\end{description}
@a
      subroutine drvsrd(NATOMS,NBASIS,FXYZ,D,DD,IATMS,IDUMP)
      implicit none
      double precision a , aa , D , DD , FXYZ , scftrc
      integer i , IATMS , ideriv , iderv1 , iderv2 , Idrv1 , IDUMP , 
     &        Ifill , In , index , int , Iout , Ipunch , Irwpt , Irww , 
     &        ixyz , j , nat3 , NATOMS , NBASIS
      integer nbs , ntt
      dimension FXYZ(*) , D(*) , DD(*) , IATMS(*)
      common /io    / In , Iout , Ipunch
      common /irw716/ Irww , Irwpt , Idrv1 , Ifill(2)
C
C
C***********************************************************************
C     routine to compute the one-electron contribution to the
C     hartree-fock first derivatives using pre-computed
C     integral derivatives.  this routine reads the integrals
C     written by dstvwrt.  both rhf and uhf wave-functions
C     can be handled.
C
C     arguments:
C
C     natoms ... number of atoms.
C     nbasis ... number of basis functions.
C     fxyz   ... array of length 3*natoms to which the one-electron
C                derivative contributions will be added.
C     d      ... scratch vector of length ntt.
C     dd     ... scratch vector of length ntt.
C     iatms  ... scratch vector of length (nbasis+1)/2.
C     idump  ... dump flag.
C***********************************************************************
C
C
C
C=    data zero/0.d0/
C
99001 format (' DUMP OF ONE ELECTRON INTEGRAL CONTRIBUTION TO FORCES')
99002 format (' DUMP OF KINETIC AND V(NE) CONTRIBUTION TO THE FORCES')
99003 format (3F20.8)
C
C     ******************************************************************
C     initialization.
C     ******************************************************************
      nbs = (NBASIS+1)/2
      ntt = (NBASIS*(NBASIS+1))/2
      nat3 = 3*NATOMS
C     read in total density matrix.
      call tread(Irwpt,D,ntt,1,ntt,1,0)
C     get atom number -- basis function map.
      call fileio(2,-Idrv1,nbs,IATMS,0)
C
C     ******************************************************************
C     compute contribution due to operator differentiation.
C     ******************************************************************
      call fileio(2,-Idrv1,0,0,nbs+9*ntt)
      do 100 i = 1 , nat3
         call fileio(2,Idrv1,ntt,DD,0)
         FXYZ(i) = FXYZ(i) + scftrc(D,DD,NBASIS,1)
 100  continue
C
C     ******************************************************************
C     compute wave-function contribution and density contribution.
C     ******************************************************************
C
C     loop over x,y,z.
      do 300 ixyz = 1 , 3
C
C     on all but the first pass, re-load the total density.
         if ( ixyz.ne.1 ) call tread(Irwpt,D,ntt,1,ntt,1,0)
C
C     get dtv1.
         index = nbs + ntt*(ixyz+2)
         call fileio(2,-Idrv1,ntt,DD,index)
         int = 0
         do 150 i = 1 , NBASIS
            do 120 j = 1 , i
               int = int + 1
               ideriv = 3*(IATMS(i)-1) + ixyz
               FXYZ(ideriv) = FXYZ(ideriv) + DD(int)*(D(int)+D(int))
 120        continue
            FXYZ(ideriv) = FXYZ(ideriv) - DD(int)*D(int)
 150     continue
C
C     get dtv2.
         index = index + 3*ntt
         call fileio(2,-Idrv1,ntt,DD,index)
         int = 0
         do 200 i = 1 , NBASIS
            do 160 j = 1 , i
               int = int + 1
               ideriv = 3*(IATMS(j)-1) + ixyz
               FXYZ(ideriv) = FXYZ(ideriv) + DD(int)*(D(int)+D(int))
 160        continue
            FXYZ(ideriv) = FXYZ(ideriv) - DD(int)*D(int)
 200     continue
C
C     possibly print intermediate results.
         if ( IDUMP.gt.1 ) then
            write (Iout,99002)
            write (Iout,99003) (FXYZ(i),i=1,nat3)
         endif
C
C     get ds.
         index = nbs + ntt*(ixyz-1)
         call fileio(2,-Idrv1,ntt,DD,index)
         call tread(Irww,D,ntt,1,ntt,1,0)
         int = 0
         do 250 i = 1 , NBASIS
            do 220 j = 1 , i
               int = int + 1
               a = DD(int)
               aa = a + a
               iderv1 = 3*(IATMS(i)-1) + ixyz
               iderv2 = 3*(IATMS(j)-1) + ixyz
               FXYZ(iderv1) = FXYZ(iderv1) + D(int)*aa
               FXYZ(iderv2) = FXYZ(iderv2) - D(int)*aa
 220        continue
            FXYZ(iderv1) = FXYZ(iderv1) - D(int)*a
            FXYZ(iderv2) = FXYZ(iderv2) + D(int)*a
 250     continue
C
 300  continue
C
      if ( IDUMP.gt.1 ) then
         write (Iout,99001)
         write (Iout,99003) (FXYZ(i),i=1,nat3)
      endif
C
      return
C
      end
@* INDEX.
