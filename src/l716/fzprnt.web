@* fzprnt.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXNZ                                                     
\item[INPUT:] NZ                                                        
\item[INPUT:] IANZ                                                      
\item[INPUT:] IZ                                                        
\item[INPUT:] F                                                         
\item[INPUT:] IOUT                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   FRCOUT                                                 
                                                                    
\end{description}
@a
      subroutine fzprnt(MAXNZ,NZ,IANZ,IZ,F,IOUT)
      implicit none
      double precision F
      integer IANZ , icard , icent , idx , iel , IOUT , IZ , MAXNZ , 
     &        np1 , np2 , np3 , NZ
      dimension IANZ(4) , IZ(MAXNZ,4) , F(10)
      dimension iel(106)
C      data iel/2hx ,2hbq,2hh ,2hhe,2hli,2hbe,2hb ,2hc ,2hn ,2ho ,2hf ,
C     +     2hne,2hna,2hmg,2hal,2hsi,2hp ,2hs ,2hcl,2har,2hk ,2hca,2hsc,
C     +     2hti,2hv ,2hcr,2hmn,2hfe,2hco,2hni,2hcu,2hzn,2hga,2hge,2has,
C     +     2hse,2hbr,2hkr/
      data iel/'X ' , 'Bq' , 'H ' , 'He' , 'Li' , 'Be' , 'B ' , 'C ' , 
     &     'N ' , 'O ' , 'F ' , 'Ne' , 'Na' , 'Mg' , 'Al' , 'Si' , 
     &     'P ' , 'S ' , 'Cl' , 'Ar' , 'K ' , 'Ca' , 'Sc' , 'Ti' , 
     &     'V ' , 'Cr' , 'Mn' , 'Fe' , 'Co' , 'Ni' , 'Cu' , 'Zn' , 
     &     'Ga' , 'Ge' , 'As' , 'Se' , 'Br' , 'Kr' , 'Rb' , 'Sr' , 
     &     'Y ' , 'Zr' , 'Nb' , 'Mo' , 'Tc' , 'Ru' , 'Rh' , 'Pd' , 
     &     'Ag' , 'Cd' , 'In' , 'Sn' , 'Sb' , 'Te' , 'I ' , 'Xe' , 
     &     'Cs' , 'Ba' , 'La' , 'Ce' , 'Pr' , 'Nd' , 'Pm' , 'Sm' , 
     &     'Eu' , 'Gd' , 'Tb' , 'Dy' , 'Ho' , 'Er' , 'Tm' , 'Yb' , 
     &     'Lu' , 'Hf' , 'Ta' , 'W ' , 'Re' , 'Os' , 'Ir' , 'Pt' , 
     &     'Au' , 'Hg' , 'Tl' , 'Pb' , 'Bi' , 'Po' , 'At' , 'Rn' , 
     &     'Fr' , 'Ra' , 'Ac' , 'Th' , 'Pa' , 'U ' , 'Np' , 'Pu' , 
     &     'Am' , 'Cm' , 'Bk' , 'Cf' , 'Es' , 'Fm' , 'Md' , 'No' , 
     &     'Lr' , 'Ky'/
 
C
C***********************************************************************
C     routine to print the internal coordinate forces in a
C     z-matrix like manner.  this routine produces output very
C     similar to its kissin' cousin zprint, but differs in the
C     following:  1. formats produce more significant figures;
C     2. knows how to get forces from a single linear array.
C
C     arguments:
C
C     maxnz  ... maximum number of z-cards.
C     nz     ... number of lines in the z-matrix.
C     ianz   ... array of length nz containing the atomic numbers
C                of the nz centers.
C     iz     ... the integer connectivity information associated
C                with the z-matrix.
C     f      ... array containing the internal-coordinate forces,
C                stored in the same arrangement that variables
C                are numbered in a z-matrix.
C     iout   ... fortran logical unit to receive the output.
C***********************************************************************
C
C
99001 format (1x,72('-'))
99002 format (1x,19x,'INTERNAL COORDINATE FORCES (HARTREES/BOHR OR ',
     &        '/RADIAN)'/1x,'CENT ATOM N1',6x,'LENGTH',6x,'N2',6x,
     &        'ALPHA',7x,'N3',7x,'BETA',7x,' J')
99003 format (1x,i2,3x,a2)
99004 format (1x,5x,a2)
99005 format (1x,i2,3x,a2,2x,i3,1x,f10.6,' (',i3,')')
99006 format (1x,5x,a2,2x,i3,1x,f10.6,' (',i3,')')
99007 format (1x,i2,3x,a2,2x,i3,1x,f10.6,' (',i3,')',1x,i2,1x,f10.6,
     &        ' (',i3,')')
99008 format (1x,5x,a2,2x,i3,1x,f10.6,' (',i3,')',1x,i2,1x,f10.6,' (',
     &        i3,')')
99009 format (1x,i2,3x,a2,2x,i3,1x,f10.6,' (',i3,')',1x,i2,1x,f10.6,
     &        ' (',i3,')',1x,i2,1x,f10.6,' (',i3,')',i3)
99010 format (1x,5x,a2,2x,i3,1x,f10.6,' (',i3,')',1x,i2,1x,f10.6,' (',
     &        i3,')',1x,i2,1x,f10.6,' (',i3,')',i3)
C
C
C
      write (IOUT,99001)
      write (IOUT,99002)
      write (IOUT,99001)
C                                     first card.
      idx = IANZ(1) + 2
      if ( IANZ(1).lt.0 ) then
C
         icent = 0
         write (IOUT,99004) iel(idx)
      else
         icent = 1
         write (IOUT,99003) icent , iel(idx)
      endif
      if ( NZ.ne.1 ) then
C                                     second card.
         np1 = 1
         idx = IANZ(2) + 2
         if ( IANZ(2).lt.0 ) then
C
            write (IOUT,99006) iel(idx) , IZ(2,1) , F(1) , np1
         else
            icent = icent + 1
            write (IOUT,99005) icent , iel(idx) , IZ(2,1) , F(1) , np1
         endif
         if ( NZ.ne.2 ) then
C                                      third card.
            np1 = 2
            np2 = NZ
            idx = IANZ(3) + 2
            if ( IANZ(3).lt.0 ) then
C
               write (IOUT,99008) iel(idx) , IZ(3,1) , F(2) , np1 , 
     &                            IZ(3,2) , F(NZ) , np2
            else
               icent = icent + 1
               write (IOUT,99007) icent , iel(idx) , IZ(3,1) , F(2) , 
     &                            np1 , IZ(3,2) , F(NZ) , np2
            endif
            if ( NZ.ne.3 ) then
C                                       cards 4 through nz.
               do 10 icard = 4 , NZ
                  np1 = icard - 1
                  np2 = NZ + icard - 3
                  np3 = NZ*2 + icard - 6
                  idx = IANZ(icard) + 2
                  if ( IANZ(icard).lt.0 ) then
C
                     write (IOUT,99010) iel(idx) , IZ(icard,1) , F(np1)
     &                                  , np1 , IZ(icard,2) , F(np2) , 
     &                                  np2 , IZ(icard,3) , F(np3) , 
     &                                  np3 , IZ(icard,4)
                  else
                     icent = icent + 1
                     write (IOUT,99009) icent , iel(idx) , IZ(icard,1) , 
     &                                  F(np1) , np1 , IZ(icard,2) , 
     &                                  F(np2) , np2 , IZ(icard,3) , 
     &                                  F(np3) , np3 , IZ(icard,4)
                  endif
 10            continue
            endif
         endif
      endif
C
      write (IOUT,99001)
C
C     return to caller.
      return
C
      end
@* INDEX.
