@* rotff.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NATOMS                                                    
\item[INPUT:] TR                                                        
\item[INPUT:] FFXIN                                                     
\item[OUTPUT:] FFXOUT                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   FRCOUT                                                 
                                                                    
\end{description}
@a
      subroutine rotff(NATOMS,TR,FFXIN,FFXOUT)
      implicit none
      double precision FFXIN , FFXOUT , t , t1 , TR , x , zero
      integer i , iat , j , jat , k , ki , l , lj , loc , m , NATOMS
      dimension FFXIN(*) , TR(3,3) , FFXOUT(*)
      dimension t(3,3) , t1(3,3)
      data zero/0.0D0/
C
C***********************************************************************
C     routine to rotate the second derivative matrix (stored
C     in lower triangular form) from on eaxis system to another.
C
C     arguments:
C
C     natoms ... number of atoms.
C     tr     ... (3 by 3) rotation matrix.
C     ffxin  ... input array of second-derivatives.
C     ffxout ... output array, can be same as input array.
C***********************************************************************
C
C
C     loop over all atoms.
      do 200 iat = 1 , NATOMS
         i = (iat-1)*3
         do 100 jat = 1 , iat
            j = (jat-1)*3
C
C     pluck out the current (3*3) matrix.
            do 20 k = 1 , 3
               do 10 l = 1 , 3
                  ki = k + i
                  lj = l + j
                  loc = (ki*(ki-1))/2 + lj
                  if ( lj.gt.ki ) loc = (lj*(lj-1))/2 + ki
                  t(k,l) = FFXIN(loc)
 10            continue
 20         continue
C
C     transform by tr.
            do 40 k = 1 , 3
               do 30 l = 1 , 3
                  x = zero
                  do 25 m = 1 , 3
                     x = x + TR(m,l)*t(k,m)
 25               continue
                  t1(k,l) = x
 30            continue
 40         continue
            do 60 l = 1 , 3
               do 50 k = 1 , 3
                  x = zero
                  do 45 m = 1 , 3
                     x = x + TR(m,k)*t1(m,l)
 45               continue
                  t(k,l) = x
 50            continue
 60         continue
C
C     pack the matrix back into ffx.
            do 80 k = 1 , 3
               do 70 l = 1 , 3
                  ki = k + i
                  lj = l + j
                  loc = (ki*(ki-1))/2 + lj
                  if ( lj.gt.ki ) loc = (lj*(lj-1))/2 + ki
                  FFXOUT(loc) = t(k,l)
 70            continue
 80         continue
 100     continue
 200  continue
C
C     return to caller.
      return
C
      end
@* INDEX.
