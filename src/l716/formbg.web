@* formbg.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXNZ                                                     
\item[INPUT:] NZ                                                        
\item[PASSED:] IANZ                                                      
\item[INPUT:] IZ                                                        
\item[INPUT:] BL                                                        
\item[INPUT:] ALPHA                                                     
\item[INPUT:] BETA                                                      
\item[INPUT:] NPARM                                                     
\item[UNUSED:] IGEIG                                                     
\item[OUTPUT:] B                                                         
\item[OUTPUT:] IB                                                        
\item[OUTPUT:] G                                                         
\item[OUTPUT:] XM                                                        
\item[PASSED:] CZ                                                        
\item[PASSED:] CC                                                        
\item[PASSED:] LL                                                        
\item[PASSED:] MM                                                        
\item[INPUT:] IDUMP                                                     
\item[PASSED:] TOANG                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    IN                                                     
\item[Transmits as argument]  IOUT                                                   
\item[Uses]  IN      IOUT                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       BEND    CORPR1  GABS    IBOUT   LNK1E   MATOUT  MINV   
             RTRACE  STR     TORS    ZTOC                           
\item[Called by]   FRCOUT  TRANFF                                         
                                                                    
\end{description}
@a
C      subroutine formbg(maxnz,nz,ianz,iz,bl,alpha,beta,nparm,b,ib,
      subroutine formbg(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,NPARM,IGEIG,B,IB,
     &                  G,XM,CZ,CC,LL,MM,IDUMP,TOANG)
      implicit none
      double precision ALPHA , B , BETA , BL , CC , cutoff , CZ , G , 
     &                 gabs , one , r , TOANG , work , XM , zero
      integer i , i1 , IANZ , IB , ibi , IDUMP , IGEIG , In , Iout , 
     &        iparm , Ipunch , IZ , j , j1 , k , l , LL , MAXNZ , MM , 
     &        nattmp
      integer NPARM , NZ
      logical error
      dimension IANZ(*) , IZ(MAXNZ,4) , BL(*) , ALPHA(*) , BETA(*)
      dimension B(3,4,NPARM) , IB(4,NPARM) , G(*)
      dimension XM(NZ,5) , CZ(*) , CC(*) , LL(*) , MM(*)
      dimension work(100)
      common /io    / In , Iout , Ipunch
      data zero/0.D0/ , one/1.D0/
      data cutoff/1.D-20/
C
C
C***********************************************************************
C     given a z-matrix, this routine will form the wilson b and g
C     matrices.  these may be subsequently used to transform
C     cartesian first derivatives to internal coordinates.
C
C     arguments:
C
C     maxnz  ... leading dimension of z-matrix.
C     nz     ... number of entries in the z-matrix.
C     ianz   ... vector of length nz containing integer atomic
C                numbers.
C     iz     ... integer connectivity matrix of dimension
C                (maxnz*4).
C     bl     ... vector of length nz containing bond-lengths.
C     alpha  ... vector of length nz containing first angles.
C     beta   ... vector of length nz containing second angles.
C     nparm  ... number of degrees of freedom (3*nz-6).
C     b      ... output b-matrix (3*4*nparm).
C     ib     ... integer portion of b-matrix (4*nparm).
C     g      ... output g-matrix (nparm*nparm).
C     xm     ... scratch array of length (nz*5).
C     cz     ... scratch array of length (3*nz).
C     cc     ... scratch array of length (3*natoms).
C     ll     ... integer scratch array of
C                length  max0(nparm,nz).
C     mm     ... integer scratch array of length (nparm).
C     idump  ... dump flag.
C     toang  ... bohr to angstrom conversion factor
C***********************************************************************
C
C
99001 format ('0 ***** ERROR *****'/
     &        '  G-MATRIX IS SINGULAR IN FORMBG,  DET=',
     &        d20.13/'                               CUTOFF=',d12.2)
99002 format (' FROM FORMBG:'/'  ZTOC COORDINATES')
99003 format ('  IB MATRIX')
99004 format ('  B MATRIX')
99005 format ('  G MATRIX')
99006 format ('  G-INVERSE')
C
C     ******************************************************************
C     initialization.
C     ******************************************************************
      call rtrace(6HFORMBG,2)
C     determine the full coordinate list (dummies included), given
C     the z-matrix.
      call ztoc(MAXNZ,NZ,IANZ,IZ,BL,ALPHA,BETA,.false.,nattmp,LL,CC,CZ,
     &          XM(1,1),XM(1,2),XM(1,3),XM(1,4),XM(1,5),Iout,error,work)
C
C     possibly print cz.
      if ( IDUMP.ne.0 ) then
         write (Iout,99002)
         call corpr1(NZ,IANZ,CZ,TOANG)
         call corpr1(nattmp,LL,CC,TOANG)
      endif
C
C     prepare xm.
      do 100 i = 1 , NZ
         do 50 j = 1 , 3
            XM(i,j) = one
 50      continue
 100  continue
      XM(1,1) = zero
      XM(1,2) = zero
      XM(1,3) = zero
      XM(2,1) = zero
      XM(2,2) = zero
      XM(3,2) = zero
C
C     ******************************************************************
C     form the b-matrix.
C     ******************************************************************
C
C     first, clear it out.
      do 200 i = 1 , NPARM
         do 150 k = 1 , 4
            IB(k,i) = 0
            do 120 j = 1 , 3
               B(j,k,i) = zero
 120        continue
 150     continue
 200  continue
C
C     loop over all rows of the z-matrix.
      do 300 i = 2 , NZ
C
C     bond stretch.
         call str(i-1,i,IZ(i,1),B,IB,CZ,NPARM)
C*****call str(i-1,i,iz(i,1),b,ib,cz)
         if ( BL(i).lt.zero ) then
            do 220 j = 1 , 3
               do 210 k = 1 , 2
                  B(j,k,i-1) = -B(j,k,i-1)
 210           continue
 220        continue
         endif
C
         if ( i.gt.2 ) then
            iparm = NZ - 3 + i
C
C     angle bend  (alpha).
            call bend(iparm,i,IZ(i,1),IZ(i,2),B,IB,CZ,NPARM)
C*****call bend(iparm,i,iz(i,1),iz(i,2),b,ib,cz)
            if ( ALPHA(i).lt.zero ) then
               do 230 j = 1 , 3
                  do 225 k = 1 , 3
                     B(j,k,iparm) = -B(j,k,iparm)
 225              continue
 230           continue
            endif
C
            if ( i.gt.3 ) then
               iparm = NZ + NZ - 6 + i
               if ( IZ(i,4).eq.0 ) then
C
C     torsion  (beta).
                  call tors(iparm,i,IZ(i,1),IZ(i,2),IZ(i,3),B,IB,CZ,
     &                      NPARM)
               else
C
C     angle bend  (beta).
                  call bend(iparm,i,IZ(i,1),IZ(i,3),B,IB,CZ,NPARM)
C*****call bend(iparm,i,iz(i,1),iz(i,3),b,ib,cz)
                  if ( BETA(i).lt.zero ) then
                     do 234 j = 1 , 3
                        do 232 k = 1 , 3
                           B(j,k,iparm) = -B(j,k,iparm)
 232                    continue
 234                 continue
                  endif
               endif
            endif
         endif
C**21 call tors(iparm,i,iz(i,1),iz(i,2),iz(i,3),b,ib,cz)
C
 300  continue
C
C     apply mask to b.
      do 400 i = 1 , NPARM
         do 350 i1 = 1 , 4
            ibi = IB(i1,i)
            if ( ibi.ne.0 ) then
               do 310 l = 1 , 3
                  B(l,i1,i) = B(l,i1,i)*XM(ibi,l)
 310           continue
            endif
 350     continue
 400  continue
C
C     possibly print the b and ib.
      if ( IDUMP.ne.0 ) then
         write (Iout,99003)
         call ibout(IB,4,NPARM,4,NPARM)
         write (Iout,99004)
         call matout(B,12,NPARM,12,NPARM)
      endif
C      iform = igeig
C
C     ******************************************************************
C     form g-matrix.
C     ******************************************************************
      do 500 i = 1 , NPARM
         do 450 j = 1 , i
            r = zero
            do 420 i1 = 1 , 4
               ibi = IB(i1,i)
               if ( ibi.ne.0 ) then
                  do 405 j1 = 1 , 4
                     if ( ibi.eq.IB(j1,j) ) then
                        do 402 l = 1 , 3
                           r = r + B(l,i1,i)*B(l,j1,j)
 402                    continue
                     endif
 405              continue
               endif
 420        continue
            In = j + NPARM*(i-1)
            G(In) = r
            In = i + NPARM*(j-1)
            G(In) = r
 450     continue
 500  continue
C
C     possibly print the g-matrix.
      if ( IDUMP.ne.0 ) then
         write (Iout,99005)
         call matout(G,NPARM,NPARM,NPARM,NPARM)
      endif
C
C     form fi=g(-1)*b*fx
C
      call minv(G,NPARM,r,LL,MM)
C
C     possilby print g**(-1).
      if ( IDUMP.ne.0 ) then
         write (Iout,99006)
         call matout(G,NPARM,NPARM,NPARM,NPARM)
      endif
      if ( gabs(r).lt.cutoff ) then
         write (Iout,99001) r , cutoff
         call lnk1e
      endif
      if ( IDUMP.eq.0 ) return
      write (Iout,99007) r
C
99007 format (' FORMBG, DETERMINANT G-MATRIX =',d20.13)
C
      return
C
      end
@* INDEX.
