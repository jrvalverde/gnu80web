@* leevao.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NATOMS                                                    
\item[INPUT:] IAN                                                       
\item[INPUT:] C                                                         
\item[OUTPUT:] NBASIS                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    AON     AOS     C1      C2      C3      C4      EXX    
             IAOS    JAN     NSHELL  SCALE   SHELLA  SHELLC  SHELLN 
             SHELLT  SHLADF  X       Y       Z                      
\item[Uses]  ELIBEB  IAO     IBMOD   IPT     NGIC    NSHELL  NUMD   
             PDEXP   PDEXP1  PDEXP2  PPEXP   SCAL1   SCAL1X  SCAL2  
             SCAL2X  SCAL3   SCAL3X  SHELLC                         
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       EZERO   IORD    LPEONE  LPETWO  PUTLBL                 
\item[Called by]    NOTHING                                           
                                                                    
\end{description}
@a
      subroutine leevao(NATOMS,IAN,C,NBASIS)
      implicit none
      double precision C , C1 , C2 , C3 , C4 , cp2 , cp3 , cs1 , cs2 , 
     &                 cs3 , Dexpb , Dexpbe , Dexpli , e1 , e2 , e3 , 
     &                 Elibeb , Exx , one , Pdexp
      double precision Pdexp1 , Pdexp2 , Ppexp , rone , Scal1 , Scal1x , 
     &                 Scal2 , Scal2x , Scal3 , Scal3x , Scal4 , 
     &                 Scal4x , Scale , X , xcoord , Y , ycoord , Z , 
     &                 zcoord , zero
      integer i , I2edsc , I2esf , I5d6d , ia , IAN , Iao , Iaos , 
     &        Ibasis , Ibmod , Ibpr , Icount , idx , iflag , ind , 
     &        iord , Iosc , Ipt , Irot , Iscal
      integer iscon , j , j1 , Jan , Jpunch , Llink , MAXPRM , MAXS21 , 
     &        MAXSH1 , MAXSHL , Maxtyp , mm , mmdf , NATOMS , NBASIS , 
     &        ngauss , Ngic , ngin , ngout , nin
      integer nout , Nshell , nsplit , nstart , Numd , nup , nup1
      integer Shella , Shelln , Shellt , Shellc , Shladf , Aos , Aon
      dimension C(*) , IAN(*)
      dimension Elibeb(3)
      dimension e1(6) , e2(6) , e3(6) , cs1(6) , cs2(6) , cs3(6) , 
     &          cp2(6) , cp3(6)
      dimension nin(5) , nout(5)
      common /scalsp/ Scal1(35) , Scal1x(35) , Scal2(35) , Scal2x(35) , 
     &                Scal3(35) , Scal3x(35) , Scal4(35) , Scal4x(35) , 
     &                Iscal(35) , Icount
      parameter (MAXSHL=100,MAXPRM=(3*MAXSHL),MAXSH1=(MAXSHL+1),
     &           MAXS21=(2*MAXSHL+1))
      common /b     / Exx(MAXPRM) , C1(MAXPRM) , C2(MAXPRM) , C3(MAXPRM)
     &                , X(MAXSHL) , Y(MAXSHL) , Z(MAXSHL) , Jan(MAXSHL)
     &                , Shella(MAXSHL) , Shelln(MAXSHL) , Shellt(MAXSHL)
     &                , Shellc(MAXSHL) , Aos(MAXSHL) , Aon(MAXSHL) , 
     &                Nshell , Maxtyp
      dimension C4(MAXSHL) , Shladf(MAXSHL)
      equivalence (C4(1),C3(MAXSH1)) , (Shladf(1),C3(MAXS21))
      common /scale / Scale(MAXSHL)
      common /iao   / Iao(4)
      common /iaos  / Iaos(MAXSHL)
      common /polexp/ Ppexp , Pdexp , Pdexp1 , Pdexp2
      common /numd  / Numd
      common /libeb / Dexpli , Dexpbe , Dexpb
      common /ops301/ Ibasis , Ngic , Ipt , I5d6d , Iosc , Ibmod , 
     &                Ibpr , Llink , I2edsc , Irot , Jpunch , I2esf
      equivalence (Dexpli,Elibeb(1))
      data nin/3 , 4 , 5 , 3 , 4/
      data nout/1 , 1 , 1 , 2 , 2/
      data zero/0.0D0/
      data one/1.0D0/
      data rone/1.0D0/
C
C
C
C
C
C
C     dimension e1(6),e2(6),e3(6),e4(6),cs1(6),cs2(6),cs3(6),cs4(6),
C    *cp2(6),cp3(6),cp4(6),cd4(6)
C
C
C
      mm = 1
      mmdf = 1
      Nshell = 0
      nstart = 1
      ngauss = Ngic
      if ( ngauss.eq.0 ) ngauss = 3
      if ( Ngic.eq.8 ) iflag = 1
      nsplit = 1
C ngin is the length of the "inner" split-valence orbital contraction.
C ngout is the length of the "outer".
      ngin = nin(nsplit)
      ngout = nout(nsplit)
      call putlbl(0,0,-1)
C
      do 200 i = 1 , NATOMS
         ia = IAN(i)
         idx = 3*(i-1)
         xcoord = C(idx+1)
         ycoord = C(idx+2)
         zcoord = C(idx+3)
         call putlbl(i,ia,0)
C
C***********************************************************************
C     1s shell h and he
C***********************************************************************
         if ( ia.le.2 ) then
            call ezero(e1,cs1,ngauss,nsplit,ia)
            do 20 j = 1 , ngin
               j1 = mm - 1 + j
               Exx(j1) = e1(j)*Scal1(i)*Scal1(i)
               C1(j1) = cs1(j)
               C2(j1) = zero
 20         continue
            Nshell = Nshell + 1
            X(Nshell) = xcoord
            Y(Nshell) = ycoord
            Z(Nshell) = zcoord
            Jan(Nshell) = ia
            Shella(Nshell) = mm
            Shladf(Nshell) = 0
            Shelln(Nshell) = ngin
            Shellt(Nshell) = 0
            Scale(Nshell) = Scal1(i)
            Aon(Nshell) = Iao(1)
            Aos(Nshell) = nstart
            call putlbl(1,0,2)
            Iaos(Nshell) = nstart
            nstart = nstart + 1
            mm = mm + ngin
            do 40 j = 1 , ngout
               j1 = mm - 1 + j
               Exx(j1) = e1(j+ngin)*Scal1x(i)*Scal1x(i)
               C1(j1) = cs1(j+ngin)
               C2(j1) = zero
 40         continue
            Nshell = Nshell + 1
            X(Nshell) = xcoord
            Y(Nshell) = ycoord
            Z(Nshell) = zcoord
            Jan(Nshell) = ia
            Shella(Nshell) = mm
            Shladf(Nshell) = 0
            Shelln(Nshell) = ngout
            Shellt(Nshell) = 0
            Scale(Nshell) = Scal1x(i)
            Aon(Nshell) = Iao(1)
            Aos(Nshell) = nstart
            call putlbl(1,0,4)
            Iaos(Nshell) = nstart
            nstart = nstart + 1
            mm = mm + ngout
            if ( Ipt.eq.2 ) then
C     ******************************************************************
C     p2 basis  --  p on hydrogen, d on heavy atom
C     ******************************************************************
               Nshell = Nshell + 1
               Shellc(Nshell) = 1
               X(Nshell) = xcoord
               Y(Nshell) = ycoord
               Z(Nshell) = zcoord
               Jan(Nshell) = ia
               Shella(Nshell) = mm
               Shladf(Nshell) = 0
               Shelln(Nshell) = 1
               Shellt(Nshell) = 1
               Aon(Nshell) = iord('   P')
               Scale(Nshell) = rone
               Exx(mm) = Ppexp
               C1(mm) = zero
               C2(mm) = one
               Iaos(Nshell) = nstart
               mm = mm + 1
C     ******************************************************************
C     p shell without s function
C     ******************************************************************
               Aos(Nshell) = nstart - 1
               call putlbl(0,1,1)
               nstart = nstart + 3
            endif
         else
C
            if ( ia.le.10 ) then
C
C***********************************************************************
C        2sp shell
C***********************************************************************
               call lpeone(e2,cs2,cp2,ia)
               nup = ngauss
               if ( iflag.eq.1 ) then
                  if ( ia.le.5 ) then
                     nup = 3
                  else
C
                     nup = 4
                  endif
               endif
               do 50 j = 1 , nup
                  j1 = mm - 1 + j
                  Exx(j1) = e2(j)*Scal2(i)*Scal2(i)
                  C1(j1) = cs2(j)
                  C2(j1) = cp2(j)
 50            continue
               Nshell = Nshell + 1
               X(Nshell) = xcoord
               Y(Nshell) = ycoord
               Z(Nshell) = zcoord
               Jan(Nshell) = ia
               Shella(Nshell) = mm
               Shladf(Nshell) = 0
               Shelln(Nshell) = nup
               Shellt(Nshell) = 1
               Scale(Nshell) = Scal2(i)
               Aon(Nshell) = Iao(2)
               Aos(Nshell) = nstart
               call putlbl(2,0,2)
               call putlbl(2,1,2)
               Iaos(Nshell) = nstart
               nstart = nstart + 4
               mm = mm + nup
               nup1 = nup
               nup = 1
               do 60 j = 1 , nup
                  j1 = mm - 1 + j
                  Exx(j1) = e2(j+nup1)*Scal2x(i)*Scal2x(i)
                  C1(j1) = cs2(j+nup1)
                  C2(j1) = cp2(j+nup1)
 60            continue
               Nshell = Nshell + 1
               X(Nshell) = xcoord
               Y(Nshell) = ycoord
               Z(Nshell) = zcoord
               Jan(Nshell) = ia
               Shella(Nshell) = mm
               Shladf(Nshell) = 0
               Shelln(Nshell) = nup
               Shellt(Nshell) = 1
               Scale(Nshell) = Scal2x(i)
               Aon(Nshell) = Iao(2)
               Aos(Nshell) = nstart
               call putlbl(2,0,4)
               call putlbl(2,1,4)
               Iaos(Nshell) = nstart
               nstart = nstart + 4
               mm = mm + nup
C
            elseif ( ia.le.18 ) then
C
C***********************************************************************
C        3sp shell
C***********************************************************************
               call lpetwo(e3,cs3,cp3,ia)
               nup = ngauss
               if ( iflag.eq.1 ) then
                  if ( ia.le.13 ) then
                     nup = 3
                  else
C
                     nup = 4
                  endif
               endif
               do 70 j = 1 , nup
                  j1 = mm - 1 + j
                  Exx(j1) = e3(j)*Scal3(i)*Scal3(i)
                  C1(j1) = cs3(j)
                  C2(j1) = cp3(j)
 70            continue
               Nshell = Nshell + 1
               X(Nshell) = xcoord
               Y(Nshell) = ycoord
               Z(Nshell) = zcoord
               Jan(Nshell) = ia
               Shella(Nshell) = mm
               Shladf(Nshell) = 0
               Shelln(Nshell) = nup
               Shellt(Nshell) = 1
               Scale(Nshell) = Scal3(i)
               Aon(Nshell) = Iao(3)
               Aos(Nshell) = nstart
               call putlbl(3,0,2)
               call putlbl(3,1,2)
               Iaos(Nshell) = nstart
               nstart = nstart + 4
               mm = mm + nup
               nup1 = nup
               nup = 1
               do 80 j = 1 , ngout
                  j1 = mm - 1 + j
                  Exx(j1) = e3(j+nup1)*Scal3x(i)*Scal3x(i)
                  C1(j1) = cs3(j+nup1)
                  C2(j1) = cp3(j+nup1)
 80            continue
               Nshell = Nshell + 1
               X(Nshell) = xcoord
               Y(Nshell) = ycoord
               Z(Nshell) = zcoord
               Jan(Nshell) = ia
               Shella(Nshell) = mm
               Shladf(Nshell) = 0
               Shelln(Nshell) = nup
               Shellt(Nshell) = 1
               Scale(Nshell) = Scal3x(i)
               Aon(Nshell) = Iao(3)
               Aos(Nshell) = nstart
               call putlbl(3,0,4)
               call putlbl(3,1,4)
               Iaos(Nshell) = nstart
               nstart = nstart + 4
               mm = mm + nup
            else
               stop
            endif
C     test for d-type polarization functions on first row atom.
            if ( Ipt.eq.0 ) goto 200
            Nshell = Nshell + 1
            Iaos(Nshell) = nstart
            iscon = Shellc(Nshell) + 1
            X(Nshell) = xcoord
            Y(Nshell) = ycoord
            Z(Nshell) = zcoord
            Jan(Nshell) = ia
            Shella(Nshell) = mm
            Shladf(Nshell) = mmdf
            Shelln(Nshell) = 1
            Shellt(Nshell) = 2
            Scale(Nshell) = rone
            Aon(Nshell) = iord('D(6)')
            if ( Numd.eq.5 ) Aon(Nshell) = iord('D(5)')
            if ( ia.le.5 ) then
               if ( Ibmod.lt.2 ) then
                  ind = ia - 2
                  Exx(mm) = Elibeb(ind)
                  goto 100
               endif
            endif
C
            if ( ia.lt.11 ) then
               Exx(mm) = Pdexp
C
            elseif ( ia.le.12 ) then
               Exx(mm) = Pdexp1
            else
C
               Exx(mm) = Pdexp2
            endif
 100        C1(mm) = one
            C2(mm) = one
            C3(mmdf) = one
            C4(mmdf) = zero
            mm = mm + 1
            mmdf = mmdf + 1
            if ( iscon.eq.2 .or. iscon.eq.3 ) then
C     ******************************************************************
C     s, p, d, or s=p, d shell.
C     ******************************************************************
               C1(mm-1) = zero
               C2(mm-1) = zero
               Aos(Nshell) = nstart - 4
               call putlbl(0,2,1)
               nstart = nstart + Numd
            else
C     ****************************************************************
C     s=p=d   full complement of functions
C     ******************************************************************
               Aos(Nshell) = nstart
               call putlbl(3,0,1)
               call putlbl(3,1,1)
               call putlbl(3,2,1)
               nstart = nstart + Numd + 4
            endif
         endif
C
 200  continue
      Aos(Nshell+1) = nstart
      Iaos(Nshell+1) = nstart
      NBASIS = nstart - 1
      return
C
      end
@* INDEX.
