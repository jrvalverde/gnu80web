@* gbasis.

\begin{verbatim}
input of external basis.
these comments are not intended to provide a complete description,
but only to describe the various types of records (and their
formats) that are read in.  for a fuller description, see the
program documentation.

number of gaussian functions  (degree of contraction) in
each shell (80i1).

center assignments (zero-center terminates reading of input).
35i2 format.

shell descriptor record (a4,a6,a4,i2,f12.6)
field 1 (a4) ... ' sto' use sto routines.
                 '    ' read in records defining functions.
                 '****' step to next set of centers.
field 2 (a6) ... name used in printing and if field 1 = ' sto',
                 this field defines the routine from which the
                 sto-ng functions are taken.
field 3 (a4) ... type of shell.
                 '   s' ... s-shell.
                 '   p' ... p-shell.
                 '   d' ... d-shell.
                 '   f' ... f-shell.
                 '  sp' ... sp-shell.
                 ' spd' ... spd-shell.
field 4 (i2) ... number of gaussians (degree of contraction)
                 for the current shell.
field 5 (f ) ... scale-factor for current shell.

primitive gaussian record (4e20.10)
field 1 ... exponent.
field 2 ... s-coefficient.
field 3 ... p-coefficient.
field 4 ... d-coefficient.
in the case of an f-shell, the f-coefficient is taken from field
one.
the number of primitive function records read in is determined
by the degree of contraction specified on the preceeding
shell descriptor record.
\end{description}

\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] IOP                                                       
\item[INPUT:] C                                                         
\item[INPUT:] IAN                                                       
\item[INPUT:] NATOMS                                                    
\item[OUTPUT:] NBASIS                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    AOS     C1      C2      C3      C4      EXX     IAOS   
             JAN     NSHELL  SCALE   SHELLA  SHELLC  SHELLN  SHELLT 
             SHLADF  X       Y       Z                              
\item[Transmits as argument]  LABEL                                                  
\item[Uses]  EXX     I5D6D   IN      IOUT    LABEL   NSHELL  NUMD   
             PSAVE   SCALE   SHELLA  SHELLC  SHELLN  SHELLT  X      
             Y       Z                                              
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       BERROR  ILSW    LNK1E   PUTLBL  S1S     S2P     S2S    
             S2SP    S3D     S3P     S3S     S3SP    S4D     S4SP   
             S5SP    SFOPT   SFOPTI  TREAD   TWRITE  TYPCON         
\item[Called by]   GINPUT                                                 
                                                                    
\end{description}
@a
      subroutine gbasis(IOP,C,IAN,NATOMS,NBASIS)
      implicit none
      double precision C , C1 , C2 , C3 , C4 , c4temp , cd , cp , cs , 
     &                 diff , e , Exx , rzero , sc , Scal1 , Scal1x , 
     &                 Scal2 , Scal2x , Scal3 , Scal3x
      double precision Scal4 , Scal4x , Scale , thr , X , x1 , Y , y1 , 
     &                 Z , z1
      integer i , I2edsc , I2esf , I5d6d , ia , IAN , Iaos , Iatom , 
     &        Ibas , ibasis , Ibmod , Ibpr , icc , icent , icntr , 
     &        Icount , id , idx , ifd , iff
      integer In , iolbl , IOP , Iosc , ioscal , Iout , Ipt , Ipunch , 
     &        Irot , Irtcrd , irwbv , Iscal , iscon , ish , ishell , 
     &        ispd , itipe , Ititle , itype , j
      integer j1 , Jan , jbasis , jcent , Jpunch , kn , Label , LENB , 
     &        Llink , maxcon , MAXPRM , MAXS21 , MAXSH1 , MAXSHL , 
     &        Maxtyp , mm , mmdf , NATOMS , NBASIS , ncent
      integer ndtype , nf , nftype , ngauss , Ngic , norb , nptype , 
     &        ns , Nshell , nstart , nstype , Numd
      integer Shella , Shelln , Shellt , Shellc , Shladf , Aos , Aon
      integer stype , scon
      integer Psave
      double precision iorb , jorb
      dimension C(*) , IAN(*) , IOP(50)
      dimension icent(35) , jcent(35) , jbasis(4) , jorb(17) , 
     &          ishell(80)
      dimension e(10) , cs(10) , cp(10) , cd(10)
      parameter (MAXSHL=100,MAXPRM=(3*MAXSHL),MAXSH1=(MAXSHL+1),
     &           MAXS21=(2*MAXSHL+1),LENB=(15*MAXSHL+7*MAXSHL/2+1))
      common /b     / Exx(MAXPRM) , C1(MAXPRM) , C2(MAXPRM) , C3(MAXPRM)
     &                , X(MAXSHL) , Y(MAXSHL) , Z(MAXSHL) , Jan(MAXSHL)
     &                , Shella(MAXSHL) , Shelln(MAXSHL) , Shellt(MAXSHL)
     &                , Shellc(MAXSHL) , Aos(MAXSHL) , Aon(MAXSHL) , 
     &                Nshell , Maxtyp
      dimension C4(MAXSHL) , Shladf(MAXSHL)
      equivalence (C4(1),C3(MAXSH1)) , (Shladf(1),C3(MAXS21))
      common /scalsp/ Scal1(35) , Scal1x(35) , Scal2(35) , Scal2x(35) , 
     &                Scal3(35) , Scal3x(35) , Scal4(35) , Scal4x(35) , 
     &                Iscal(35) , Icount
      common /scale / Scale(MAXSHL)
      common /ops301/ Ibas , Ngic , Ipt , I5d6d , Iosc , Ibmod , Ibpr , 
     &                Llink , I2edsc , Irot , Jpunch , I2esf
      common /iatom / Iatom(36,2)
      common /io    / In , Iout , Ipunch
      common /iaos  / Iaos(MAXSHL)
      common /numd  / Numd
      common /psave / Psave
      common /label / Label(1000) , Ititle(100) , Irtcrd(100)
C   maxcon is the maximum contraction length in this routine
      data maxcon/10/
      data jbasis/4H     , 4H STO , 4HHFAO , 4H****/
      data jorb/6H    1S , 6H    2S , 6H    2P , 6H   2SP , 6H    3S , 
     &     6H    3P , 6H   3SP , 6H    3D , 6H  3SPD , 6H    4S , 
     &     6H    4P , 6H   4SP , 6H3D,4SP , 6H    4D , 6H    5S , 
     &     6H    5P , 6H   5SP/
      data rzero/0.0D0/
      data thr/1.0D-08/ , irwbv/550/ , ioscal/505/
      data iolbl/502/
99001 format (80I1)
99002 format (35I2)
99003 format (a4,a6,a4,i2,f12.6)
99004 format (4G20.10)
99005 format (43H ILLEGAL BASIS FUNCTION TYPE   $$$ STOP $$$)
99006 format (17H INPUT TO GBASIS:)
99007 format (1x,80I1)
99008 format (1x,35I2)
99009 format (1x,a4,a6,a4,i2,f12.6)
99010 format (1x,4G20.10)
99011 format (1H1)
99012 format (' UNACCEPTABLE VALUE OF IOP(10) IN GBASIS: ',i2)
C
C
      if ( IOP(6).eq.1 ) then
C
C
C
C     ******************************************************************
C     update the coordinates in common /b/.
C     ******************************************************************
         ia = 0
C     recover the label common.
         call tread(iolbl,Label,600,1,600,1,0)
C     recover the virgin copy of /b/.
         call tread(irwbv,Exx(1),LENB,1,LENB,1,0)
C     get the original scaling factors.
         call tread(ioscal,Scale(1),MAXSHL,1,MAXSHL,1,0)
C
C     loop over shells.
         do 50 ish = 1 , Nshell
            if ( ish.gt.1 ) then
C
C     see if we are at a new center.
               diff = dabs(X(ish)-x1) + dabs(Y(ish)-y1)
     &                + dabs(Z(ish)-z1)
               if ( diff.le.thr ) goto 20
            endif
C
C     step to a new atom.
            ia = ia + 1
            if ( ia.gt.NATOMS ) call lnk1e
            x1 = X(ish)
            y1 = Y(ish)
            z1 = Z(ish)
C
C     replace the coordinates in /b/.
 20         idx = 3*(ia-1)
            X(ish) = C(idx+1)
            Y(ish) = C(idx+2)
            Z(ish) = C(idx+3)
 50      continue
C
C     allow for scale-factor optimization continuation entry.
C     check iop(10)=0 or 1.
         if ( IOP(10).le.0 ) goto 1100
         if ( IOP(10).ne.1 ) goto 800
C     apply scale-factors to virgin /b/.
         call sfopt
         goto 1100
      else
         ncent = 1
         Nshell = 0
C      ns = 0
         mm = 1
         mmdf = 1
         do 100 i = 1 , 80
            Shladf(i) = 0
 100     continue
         jcent(1) = 1
         if ( Psave.eq.0 ) write (Iout,99006)
C   dbc mod
 150     read (In,99001) (ishell(i),i=1,80)
         do 200 i = 1 , 80
            if ( ishell(i).eq.-0 ) ishell(i) = 0
 200     continue
         if ( Psave.eq.0 ) write (Iout,99007) (ishell(i),i=1,80)
         do 250 i = 1 , 80
            if ( ishell(i).ge.9 ) goto 300
            if ( ishell(i).ne.0 ) then
C
               Nshell = Nshell + 1
               Shella(Nshell) = mm
               Shelln(Nshell) = ishell(i)
            else
               ncent = ncent + 1
               jcent(ncent) = Nshell + 1
            endif
            mm = mm + ishell(i)
 250     continue
         goto 150
      endif
C
C  end of mod; comment out all the above when mod at 420 works
 300  read (In,99002) (icent(i),i=1,35)
      do 400 i = 1 , 35
         if ( icent(i).eq.-0 ) icent(i) = 0
 400  continue
      if ( Psave.eq.0 ) write (Iout,99008) (icent(i),i=1,35)
      if ( icent(1).ne.0 ) then
         ncent = 0
         do 450 i = 1 , 35
            if ( icent(i).eq.0 ) goto 500
            ncent = ncent + 1
 450     continue
 500     kn = 0
 550     read (In,99003) ibasis , iorb , itype , ngauss , sc
         if ( Psave.eq.0 ) write (Iout,99009) ibasis , iorb , itype , 
     &                            ngauss , sc
         if ( ibasis.eq.jbasis(4) ) goto 300
C     translate itype into stype and scon.
         call typcon(itype,stype,scon)
C  allow only uncontracted f functions!
         if ( stype.eq.3 .and. ngauss.ne.1 ) call berror(8)
         if ( ibasis.ne.jbasis(1) ) then
C
            do 560 i = 1 , 17
               if ( iorb.eq.jorb(i) ) goto 580
 560        continue
            write (Iout,99005)
            call lnk1e
 580        norb = i
            do 600 i = 1 , ngauss
               e(i) = rzero
               cs(i) = rzero
               cp(i) = rzero
               cd(i) = rzero
 600        continue
            c4temp = rzero
            if ( ibasis.ne.jbasis(2) ) call lnk1e
            if ( norb.eq.2 ) then
C
               call s2s(e,cs,ngauss)
            elseif ( norb.eq.3 ) then
C
               call s2p(e,cp,ngauss)
            elseif ( norb.eq.4 ) then
C
               call s2sp(e,cs,cp,ngauss)
            elseif ( norb.eq.5 ) then
C
               call s3s(e,cs,ngauss)
            elseif ( norb.eq.6 ) then
C
               call s3p(e,cp,ngauss)
            elseif ( norb.eq.7 ) then
C
               call s3sp(e,cs,cp,ngauss)
            elseif ( norb.eq.8 ) then
C
               call s3d(e,cd,ngauss)
            elseif ( norb.eq.9 ) then
C
C  330 was intended for call s3spd but it will never happen.
C  340 is for call s4s
C 350 is for call s4p
C  for now only 4sp shell is avaialble
               call s4sp(e,cs,cp,ngauss)
            elseif ( norb.eq.10 ) then
               call s4sp(e,cs,cp,ngauss)
            elseif ( norb.eq.11 ) then
               call s4sp(e,cs,cp,ngauss)
            elseif ( norb.eq.12 ) then
               call s4sp(e,cs,cp,ngauss)
            elseif ( norb.eq.13 ) then
C
C 370 was intended to be call s3d4sp but there will be
C  no 3d, 4sp basis expansions, ever!
               call berror(8)
C
               call s4d(e,cd,ngauss)
            elseif ( norb.eq.14 ) then
               call s4d(e,cd,ngauss)
            elseif ( norb.eq.15 ) then
C
C 390 is call s5s
C 400 is call s5p
C for now only the 5sp is available
               call s5sp(e,cs,cp,ngauss)
            elseif ( norb.eq.16 ) then
               call s5sp(e,cs,cp,ngauss)
            elseif ( norb.eq.17 ) then
               call s5sp(e,cs,cp,ngauss)
            else
C
               call s1s(e,cs,ngauss)
            endif
         else
C  170 read (in,9030) (e(i),cs(i),cp(i),cd(i),i=1,ngauss)
C    dbc change
            do 620 i = 1 , maxcon
               cs(i) = rzero
               cp(i) = rzero
               cd(i) = rzero
 620        continue
            itipe = stype + 1
            if ( itipe.eq.4 ) itipe = 1
            if ( itipe.eq.2 ) then
               if ( scon.eq.1 ) then
                  read (In,*) (e(i),cp(i),i=1,ngauss)
               else
                  read (In,*) (e(i),cs(i),cp(i),i=1,ngauss)
               endif
            elseif ( itipe.eq.3 ) then
               if ( scon.eq.0 ) then
                  write (Iout,99013)
99013             format (
     &                 ' The Use of SPD Shells is silly and not allowed'
     &                 )
                  call lnk1e
               else
                  read (In,*) (e(i),cd(i),i=1,ngauss)
               endif
            else
               read (In,*) (e(i),cs(i),i=1,ngauss)
            endif
C  end of dbc change
            if ( Psave.eq.0 ) write (Iout,99010)
     &                               (e(i),cs(i),cp(i),cd(i),i=1,ngauss)
            c4temp = rzero
            if ( stype.ge.3 ) then
               c4temp = cs(1)
               cs(1) = rzero
            endif
         endif
         do 650 i = 1 , ncent
C   dbc  mod.
C      ns = ns + 1
C      mm = mm + ngauss
C      shelln(ns) = ngauss
C      shella(ns) = mm
            icc = icent(i)
            ns = jcent(icc) + kn
C  end of mod
            do 640 j = 1 , ngauss
               j1 = Shella(ns) + j - 1
               Exx(j1) = e(j)*sc**2
               C1(j1) = cs(j)
               C2(j1) = cp(j)
               if ( stype.ge.2 ) then
                  if ( j.le.1 ) Shladf(ns) = mmdf
                  C3(mmdf) = cd(j)
                  C4(mmdf) = c4temp
                  mmdf = mmdf + 1
               endif
 640        continue
            idx = 3*(icc-1)
            X(ns) = C(idx+1)
            Y(ns) = C(idx+2)
            Z(ns) = C(idx+3)
            Jan(ns) = IAN(icc)
            Shellt(ns) = stype
            Shellc(ns) = scon
            Scale(ns) = sc
C     aon(ns)=iorb    ! to be fixed   iorb - d.p.  ,  aon - integer
C                     ! can cause unexpected integer overflow problems
 650     continue
         kn = kn + 1
         goto 550
      else
C     setup correlation table between shells and atomic orbitals
C     there is a pitfall at this point
C     the integral package insists on doing integrals not only
C     over the functions requested (s,p or d), but also any integrals
C     over functions of lower quantum number
C     thus
C     if request p ... routine will do s and p
C     if request d ... routine will do s,p and d
C     and
C     will expect the first ao to be populated to be of s type
C     if only the function actually requested is desired then we
C     must trick the integral package
C     trick it such that the function actually desired will populate
C     the first ao
C     ******************************************************************
C     iop(9)=0  s, s=p, or s=p=d  depending on shell quantum number
C     iop(9)=1  s, p or d         depending on shell quantum number
C     iop(9)=2  s, s=p, or d      depending on shell quantum number
C     iop(9)=3  s, s=p, or p=d    depending on shell quantum number
C     iop(9)=4  s, s=p, or s=d    depending on shell quantum number
C     iop(9)=5  s, p or p=d       depending on shell quantum number
C     iop(9)=6  s, p or s=d       depending on shell quantum number
C     ******************************************************************
C
         nstart = 1
         call ilsw(2,16,iff)
         ifd = I5d6d
         id = Numd
         ispd = 9
         if ( ifd.ne.0 ) ispd = 10
         nf = 7
         if ( iff.ne.0 ) nf = 10
         mm = 0
         call putlbl(0,0,-1)
         icntr = 1
         do 700 i = 1 , Nshell
            if ( (jcent(icntr).le.i) .and. (icntr.le.NATOMS) ) then
C      new center
               call putlbl(icntr,IAN(icntr),0)
               icntr = icntr + 1
               nstype = 1
               nptype = 1
               ndtype = 1
               nftype = 1
            endif
            iscon = Shellc(i) + 1
            mm = mm + Shelln(i)
            Iaos(i) = nstart
            itype = Shellt(i) + 1
            if ( itype.eq.2 ) then
C     ******************************************************************
C     s and p;  only two possibilities: s=p, s.ne.p
C     ******************************************************************
               if ( iscon.eq.2 ) then
C     ******************************************************************
C     s.ne.p
C     ******************************************************************
                  Aos(i) = nstart - 1
                  call putlbl(nptype,1,1)
                  nptype = nptype + 1
                  nstart = nstart + 3
               else
C     ******************************************************************
C     s=p
C     ******************************************************************
                  Aos(i) = nstart
                  call putlbl(nstype,0,1)
                  nstype = nstype + 1
                  call putlbl(nptype,1,1)
                  nptype = nptype + 1
                  nstart = nstart + 4
               endif
            elseif ( itype.eq.3 ) then
C     ******************************************************************
C     spd type of shell, two possibilities:
C     s=p=d, or s=p, d.
C     ******************************************************************
               if ( iscon.eq.2 .or. iscon.eq.3 ) then
C     ******************************************************************
C     d only.
                  Aos(i) = nstart - 4
                  call putlbl(ndtype,2,1)
                  ndtype = ndtype + 1
                  nstart = nstart + id
               else
C     ******************************************************************
C     s=p=d.
C     ******************************************************************
                  Aos(i) = nstart
                  call putlbl(nstype,0,1)
                  nstype = nstype + 1
                  call putlbl(nptype,1,1)
                  nptype = nptype + 1
                  call putlbl(ndtype,2,1)
                  ndtype = ndtype + 1
                  nstart = nstart + ispd
               endif
            elseif ( itype.eq.4 ) then
C     ******************************************************************
C     f-shell, f only allowed.
C     ******************************************************************
               if ( iscon.eq.0 ) call lnk1e
C     ******************************************************************
C     f only.
C     ******************************************************************
               Aos(i) = nstart - 10
               call putlbl(nftype,3,1)
               nftype = nftype + 1
               nstart = nstart + nf
            else
C     ******************************************************************
C     s only
C     ****************************************************************
               Aos(i) = nstart
               call putlbl(nstype,0,1)
               nstype = nstype + 1
               nstart = nstart + 1
            endif
 700     continue
         Iaos(Nshell+1) = nstart
         Aos(Nshell+1) = nstart
         NBASIS = nstart - 1
C
C     save /scale/ on rw ioscal for possible re-entry into this routine.
         call twrite(ioscal,Scale(1),MAXSHL,1,MAXSHL,1,0)
C
C     also, at this time, save a virgin copy of /b/ for re-entry.
C     in this manner, one can accomplish general basis set geometry
C     optimizations.
         call twrite(irwbv,Exx(1),LENB,1,LENB,1,0)
C
C     at this time, see if we are doing a scale-factor optimization.
C     allow only iop(10)=2 or 0 at this point.
         if ( IOP(10).le.0 ) goto 1000
         if ( IOP(10).eq.2 ) goto 900
      endif
 800  write (Iout,99012) IOP(10)
      call lnk1e
C     initialize a scale-factor optimization run.
 900  call sfopti(IOP)
C     apply the scale-factors.
      call sfopt
C
C     return to caller.
 1000 return
C
C     return to caller.
 1100 return
C
      end
@* INDEX.
