@* exchn5.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NO                                                        
\item[INPUT:] NV                                                        
\item[PASSED:] ISD1                                                      
\item[PASSED:] ISD2                                                      
\item[PASSED:] ISC1                                                      
\item[PASSED:] ISC2                                                      
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    V                                                      
\item[Uses]  MDV     V                                              
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       EXPIJS  FILEIO  MATTRN  SUMN    TRACK                  
\item[Called by]   DOUBAR                                                 
                                                                    
\end{description}
@a
      subroutine exchn5(NO,NV,ISD1,ISD2,ISC1,ISC2)
      implicit none
      integer ia , ii , ii1 , ij , ik , il , ind1 , ind2 , ip , ips , 
     &        ISC1 , ISC2 , ISD1 , ISD2 , iu , leng , Mdv , mdv2 , 
     &        ncore , ncount
      integer nl , nleft , NO , no2 , nom , nov , novtot , NV
      double precision one , V
      common /v     / V(20000) , Mdv
      data one/1.D0/
C
C     ******************************************************************
C
C     produces (ij//ka) in sequence i,j,k,a.
C     with constraints i.lt.j
C
C     may/78 krishnan
C
C     ******************************************************************
C
C
C
      call track('EXCHN5')
C
      no2 = NO*NO
      nom = NO - 1
      if ( nom.le.0 ) return
C
      nov = NO*NV
      mdv2 = Mdv/2
      novtot = no2*nov
C
C     expand single-bar bucket
      call expijs(ISD1,ISC1,NO,nov)
C
C     transpose and form the double-bar bucket.
      call mattrn(NO,NO,NO,NV,2,ISC1,ISC2,mdv2)
      call mattrn(1,NO,no2,NV,2,ISC2,ISC1,mdv2)
      call sumn(ISC1,ISC2,novtot,-one)
C
      call fileio(2,-ISC2,0,0,0)
      call fileio(1,-ISD2,0,0,0)
C
      nleft = no2
      ncore = Mdv/nov
      il = 0
      iu = 0
      ips = 1
      ncount = -1
      do 100 ii = 1 , nom
         ii1 = ii + 1
         ip = ips
         do 50 ij = ii1 , NO
            ip = ip + 1
            if ( ip.lt.il .or. ip.gt.iu ) then
               ncount = ncount + 1
               if ( ncount.gt.0 ) then
                  leng = ind1
                  call fileio(1,ISD2,leng,V,0)
                  ncount = 0
               endif
C
C     input
 10            nl = min0(nleft,ncore)
               nleft = nleft - nl
               il = iu + 1
               iu = iu + nl
               leng = nl*nov
               call fileio(2,ISC2,leng,V,0)
C
               if ( ip.gt.iu ) goto 10
               ind1 = 0
            endif
            ind2 = (ip-il)*nov
            do 40 ik = 1 , NO
               do 20 ia = 1 , NV
                  ind1 = ind1 + 1
                  V(ind1) = V(ind2+ia)
 20            continue
               ind2 = ind2 + NV
 40         continue
 50      continue
         ips = ips + NO + 1
 100  continue
C
      leng = ind1
      call fileio(1,ISD2,leng,V,0)
C
      return
C
      end
@* INDEX.
