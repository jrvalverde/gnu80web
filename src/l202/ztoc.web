@* ztoc.
\begin{verbatim}

     Routine to compute the cartesian coordinates, given the
     z-matrix.  This routine returns coordinates both with,
     and without the dummy atoms.

     arguments:

     maxnz  ... maximum number of lines in z-matrix.
     nz     ... number of lines in the z-matrix.
     ianz   ... the atomic numbers of the z-matrix centers.
     iz     ... the integer components of the z-matrix.
     bl     ... the bond-lengths from the z-matrix.
     alph   ... the bond-angles from the z-matrix.  these angles
                must be in radians.
     bet    ... the dihedral angles from the z-matrix.  like
                alph, these angles must also be in radians.
     ttest  ... logical flag to enable testing for tetrahedral angles.
                this feature is useful in obtaining exact tetrahedral
                angles.  if any are found and this flag is set "true",
                then exact values are used and a message is printed
                indicating how many angles were changed.  the values
                in alph and/or bet are updated.
     natoms ... number of atoms (dummies removed), computed by this
                routine.
     ian    ... vector of length natoms, will receive atomic
                numbers with dummies compressed out.
     c      ... coordinates, dummies compressed out.  stored
                (x,y,z) for each atom.
     cz     ... same as c, but with dummies still in.
                the atomic number list, with dummies intact,
                can be obtained from ianz.
     a      ... scratch vector of length nz.
     b      ... scratch vector of length nz.
     d      ... scratch vector of length nz.
     alpha  ... scratch vector of length nz.
     beta   ... scratch vector of length nz.
     iout   ... the logical unit number of the list output device.  if
                iout=0 then such output will be supressed.
     error  ... a logical variable set to true if ztoc is unable to
                complete its task.  diagnostic messages will be printed
                unless iout=0.
     charge ... array containing non default charges (if applicable)
                the array will be compressed (dummy atom charge will
                be removed).

     this routine is dimension free, in the sense that any
     restrictions are imposed by the calling routine.

     ztoc calls utilities vec and vprod for miscellaneous
     vector operations.



\end{verbatim}
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXNZ                                                     
\item[INPUT:] NZ                                                        
\item[INPUT:] IANZ                                                      
\item[INPUT:] IZ                                                        
\item[INPUT:] BL                                                        
\item[OUTPUT:] ALPH                                                      
\item[OUTPUT:] BET                                                       
\item[INPUT:] TTEST                                                     
\item[OUTPUT:] NATOMS                                                    
\item[OUTPUT:] IAN                                                       
\item[OUTPUT:] C                                                         
\item[OUTPUT:] CZ                                                        
\item[OUTPUT:] A                                                         
\item[OUTPUT:] B                                                         
\item[OUTPUT:] D                                                         
\item[OUTPUT:] ALPHA                                                     
\item[OUTPUT:] BETA                                                      
\item[INPUT:] IOUT                                                      
\item[OUTPUT:] ERROR                                                     
\item[OUTPUT:] CHARGE                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       ACLEAR  GABS    GACOS   GATAN   GCOS    GFLOAT  GSIGN  
             GSIN    GSQRT   VEC     VPROD                          
\item[Called by]   FORMBG  GEOM                                           
                                                                    
\end{description}


@a
      subroutine ztoc(MAXNZ,NZ,IANZ,IZ,BL,ALPH,BET,TTEST,NATOMS,IAN,C,
     &                CZ,A,B,D,ALPHA,BETA,IOUT,ERROR,CHARGE)
      implicit none
      double precision A , ALPH , ALPHA , arg , B , BET , BETA , BL , 
     &                 C , CHARGE , CZ , D , dcaj , dcbj , denom , 
     &                 dsaj , dsbj , f180 , four , gabs
      double precision gacos , gamma , gatan , gcos , gfloat , gsign , 
     &                 gsin , gsqrt , one , pi , r , tenm10 , tenm5 , 
     &                 tenm6 , tetang , tetdat , tettol , tettst , 
     &                 three , toldat
      double precision torad , two , u1 , u2 , u3 , u4 , v3 , v3mag , 
     &                 vj , vp , x , zero , zeta
      integer i , iaind , IAN , IANZ , ind3 , IOUT , itemp , IZ , j , 
     &        jnd3 , jtemp , k , MAXNZ , naind , nat3 , NATOMS , 
     &        numtet , NZ , nz3
      logical test , TTEST , ERROR , vecerr
      dimension IANZ(*) , IZ(MAXNZ,4) , BL(3) , ALPHA(*) , BETA(*) , 
     &          IAN(*) , C(*) , CZ(9) , A(*) , B(*) , D(*) , ALPH(3) , 
     &          BET(*) , CHARGE(*)
      dimension u1(3) , u2(3) , u3(3) , u4(3) , vj(3) , vp(3) , v3(3)
      data zero/0.0D0/ , one/1.0D0/ , two/2.0D0/
      data tenm5/1.0D-5/ , tenm6/1.0D-6/
      data f180/180.0D0/ , four/4.0D0/
      data tenm10/1.0D-10/
      data tetdat/109.471D0/ , toldat/0.001D0/ , three/3.D0/
C
C
99001 format (1x,i7,' Z-MATRIX CARDS IS GREATER THAN THE MAXIMUM OF ',
     &        i4,' IN SUBROUTINE ZTOC')
99002 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'INVALID BETA ANGLE TYPE (Z4)')
99003 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'REFERENCE MADE TO AN UNDEFINED CENTER')
99004 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'MULTIPLE REFERENCES TO A CENTER ON THE SAME CARD')
99005 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'INCIPIENT FLOATING POINT ERROR DETECTED')
99006 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'ANGLE ALPHA IS OUTSIDE THE VALID RANGE OF 0 TO 180')
99007 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'NEGATIVE BOND LENGTH')
99008 format (1x,'ERROR ON Z-MATRIX CARD NUMBER ',i4/1x,
     &        'ANGLE BETA IS OUTSIDE THE VALID RANGE OF 0 TO 180')
99009 format (1x,i3,' TETRAHEDRAL ANGLES REPLACED')
C
      test(x) = gabs(x-tettst).lt.tettol
C
C
C
C
C     check for potential overflow.
C
      if ( NZ.le.MAXNZ ) then
C
C
C     check for nonsense in the connectivity.
C
         ERROR = .false.
         if ( NZ.ge.2 ) then
            do 20 i = 2 , NZ
               if ( i.gt.3 ) then
                  if ( iabs(IZ(i,4)).gt.1 ) then
                     ERROR = .true.
                     if ( IOUT.ne.0 ) write (IOUT,99002) i
                  endif
               endif
               if ( IZ(i,1).ge.i .or. IZ(i,2).ge.i .or. IZ(i,3).ge.i )
     &              then
                  ERROR = .true.
                  if ( IOUT.ne.0 ) write (IOUT,99003) i
               endif
               if ( i.gt.2 ) then
                  if ( i.gt.3 ) then
C
                     if ( IZ(i,1).eq.IZ(i,2) .or. IZ(i,1).eq.IZ(i,3)
     &                    .or. IZ(i,2).eq.IZ(i,3) ) then
                        ERROR = .true.
                        if ( IOUT.ne.0 ) write (IOUT,99004) i
                     endif
                  elseif ( IZ(i,1).eq.IZ(i,2) ) then
                     ERROR = .true.
                     if ( IOUT.ne.0 ) write (IOUT,99004) i
                  endif
               endif
 20         continue
            if ( ERROR ) return
         endif
C     compute local values of pi-related constants.
         pi = four*gatan(one)
         torad = pi/f180
C
C     set up for laundering tetrahedral angles.
C     this feature is only invoked when test=.true..
         tetang = gacos(-one/three)
         tettst = tetdat*torad
         tettol = toldat*torad
C     zero temporary coordinate array cz
         nz3 = 3*NZ
         call aclear(nz3,CZ)
C
C     move angles to local arrays and optionally test for
C     tetrahedral angles
C     test alpha for out of range 0 to 180 degrees
C     test for negative bond lengths.
C
         numtet = 0
         do 50 i = 1 , NZ
            ALPHA(i) = ALPH(i)
            BETA(i) = BET(i)
            if ( BL(i).le.zero .and. i.ne.1 ) then
               ERROR = .true.
               write (IOUT,99007) i
            endif
            if ( .not.(i.le.2 .or. (ALPHA(i).ge.zero .and. ALPHA(i).le.
     &           pi)) ) then
               ERROR = .true.
               if ( IOUT.ne.0 ) write (IOUT,99006) i
            endif
            if ( TTEST ) then
               if ( test(ALPHA(i)) ) then
                  ALPHA(i) = tetang
                  ALPH(i) = tetang
                  numtet = numtet + 1
               endif
               if ( test(BETA(i)) ) then
                  BETA(i) = tetang
                  BET(i) = tetang
                  numtet = numtet + 1
               endif
               if ( IZ(i,4).ne.0 .and. i.gt.3 ) then
                  if ( BETA(i).lt.zero .or. BETA(i).gt.pi ) then
                     ERROR = .true.
                     if ( IOUT.ne.0 ) write (IOUT,99008) i
                  endif
               endif
            endif
 50      continue
         if ( (numtet.ne.0) .and. (IOUT.ne.0) ) write (IOUT,99009)
     &        numtet
         if ( ERROR ) return
C
C     z-coordinate, atom 2.
         CZ(6) = BL(2)
         if ( NZ.ge.3 ) then
C     x-coordinate, center 3.
            CZ(7) = BL(3)*gsin(ALPHA(3))
            if ( IZ(3,1).ne.1 ) then
C     z-coordinate on center 3 as a function of z-coordinate, center 2.
               CZ(9) = CZ(6) - BL(3)*gcos(ALPHA(3))
            else
C     z-coordinate, center 3.
               CZ(9) = BL(3)*gcos(ALPHA(3))
            endif
C     beware of linear molecule.
            if ( NZ.ge.4 ) then
               do 60 i = 4 , NZ
                  ind3 = (i-1)*3
                  if ( gabs(CZ(1+ind3-3)).ge.tenm5 ) goto 70
                  CZ(1+ind3) = BL(i)*gsin(ALPHA(i))
                  itemp = (IZ(i,1)-1)*3
                  jtemp = (IZ(i,2)-1)*3
                  CZ(3+ind3) = CZ(3+itemp) - BL(i)*gcos(ALPHA(i))
     &                         *gsign(one,CZ(3+itemp)-CZ(3+jtemp))
 60            continue
 70            k = i
               if ( k.le.NZ ) then
                  do 80 j = k , NZ
                     jnd3 = (j-1)*3
                     dcaj = gcos(ALPHA(j))
                     dsaj = gsin(ALPHA(j))
                     dcbj = gcos(BETA(j))
                     dsbj = gsin(BETA(j))
                     if ( IZ(j,4).eq.0 ) then
                        call vec(tenm6,vecerr,u1,CZ,IZ(j,2),IZ(j,3))
                        if ( .not.vecerr ) then
C
                           call vec(tenm6,vecerr,u2,CZ,IZ(j,1),IZ(j,2))
                           if ( .not.vecerr ) then
C
                              call vprod(vp,u1,u2)
                              arg = one - 
     &                              (u1(1)*u2(1)+u1(2)*u2(2)+u1(3)*u2(3)
     &                              )**2
                              if ( arg.ge.zero ) then
C
                                 r = gsqrt(arg)
                                 if ( r.ge.tenm6 ) then
C
                                    do 72 i = 1 , 3
                                       u3(i) = vp(i)/r
 72                                 continue
                                    call vprod(u4,u3,u2)
                                    do 74 i = 1 , 3
                                       vj(i) = BL(j)
     &                                    *(-u2(i)*dcaj+u4(i)*dsaj*dcbj+
     &                                    u3(i)*dsaj*dsbj)
                                       itemp = (IZ(j,1)-1)*3
                                       CZ(i+jnd3) = vj(i) + CZ(i+itemp)
 74                                 continue
                                 else
                                    ERROR = .true.
                                    if ( IOUT.ne.0 ) write (IOUT,99005)
     &                                 i
                                    return
                                 endif
                              else
                                 ERROR = .true.
                                 if ( IOUT.ne.0 ) write (IOUT,99005) i
                                 return
                              endif
                           else
                              ERROR = .true.
                              if ( IOUT.ne.0 ) write (IOUT,99005) i
                              return
                           endif
                        else
                           ERROR = .true.
                           if ( IOUT.ne.0 ) write (IOUT,99005) i
                           return
                        endif
C
                     elseif ( iabs(IZ(j,4)).ne.1 ) then
C
                        call vec(tenm6,vecerr,u1,CZ,IZ(j,1),IZ(j,3))
                        if ( .not.vecerr ) then
C
                           call vec(tenm6,vecerr,u2,CZ,IZ(j,2),IZ(j,1))
                           if ( .not.vecerr ) then
C
                              zeta = -
     &                               (u1(1)*u2(1)+u1(2)*u2(2)+u1(3)*u2(3
     &                               ))
                              call vprod(v3,u1,u2)
                              v3mag = gsqrt(v3(1)*v3(1)+v3(2)*v3(2)
     &                                +v3(3)*v3(3))
                              denom = one - zeta**2
                              if ( gabs(denom).gt.tenm6 ) then
C
                                 A(j) = v3mag*dcbj/denom
                                 arg = (one-dcaj*dcaj-A(j)*dcbj*v3mag)
     &                                 /denom
                                 if ( arg.ge.zero ) then
C
                                    B(j) = gsqrt(arg)
                                    if ( IZ(j,4).ne.2 ) B(j) = -B(j)
                                    D(j) = B(j)*zeta + dcaj
                                    do 76 i = 1 , 3
                                       u3(i) = B(j)*u1(i) + D(j)*u2(i)
     &                                    + A(j)*v3(i)
                                       vj(i) = BL(j)*u3(i)
                                       itemp = (IZ(j,1)-1)*3
                                       CZ(i+jnd3) = vj(i) + CZ(i+itemp)
 76                                 continue
                                 else
                                    ERROR = .true.
                                    if ( IOUT.ne.0 ) write (IOUT,99005)
     &                                 i
                                    return
                                 endif
                              else
                                 ERROR = .true.
                                 if ( IOUT.ne.0 ) write (IOUT,99005) i
                                 return
                              endif
                           else
                              ERROR = .true.
                              if ( IOUT.ne.0 ) write (IOUT,99005) i
                              return
                           endif
                        else
                           ERROR = .true.
                           if ( IOUT.ne.0 ) write (IOUT,99005) i
                           return
                        endif
                     else
                        call vec(tenm6,vecerr,u1,CZ,IZ(j,1),IZ(j,3))
                        if ( .not.vecerr ) then
C
                           call vec(tenm6,vecerr,u2,CZ,IZ(j,2),IZ(j,1))
                           if ( .not.vecerr ) then
C
                              zeta = -
     &                               (u1(1)*u2(1)+u1(2)*u2(2)+u1(3)*u2(3
     &                               ))
                              denom = one - zeta**2
                              if ( gabs(denom).ge.tenm6 ) then
C
                                 A(j) = (-dcbj+zeta*dcaj)/denom
                                 B(j) = (dcaj-zeta*dcbj)/denom
                                 r = zero
                                 gamma = pi/two
                                 if ( gabs(zeta).ge.tenm6 ) then
                                    if ( zeta.lt.zero ) r = pi
                                    if ( denom.ge.zero ) then
C
                                       gamma = gatan(gsqrt(denom)/zeta)
     &                                    + r
                                    else
                                       ERROR = .true.
                                       if ( IOUT.ne.0 )
     &                                    write (IOUT,99005) i
                                       return
                                    endif
                                 endif
                                 D(j) = zero
                                 if ( gabs(gamma+ALPHA(j)+BETA(j)-two*pi
     &                                ).ge.tenm6 ) then
                                    arg = (one+A(j)*dcbj-B(j)*dcaj)
     &                                 /denom
                                    if ( arg.ge.zero ) then
C
                                       D(j) = gfloat(IZ(j,4))*gsqrt(arg)
                                    else
                                       ERROR = .true.
                                       if ( IOUT.ne.0 )
     &                                    write (IOUT,99005) i
                                       return
                                    endif
                                 endif
                                 call vprod(v3,u1,u2)
                                 do 78 i = 1 , 3
                                    u3(i) = A(j)*u1(i) + B(j)*u2(i)
     &                                 + D(j)*v3(i)
                                    vj(i) = BL(j)*u3(i)
                                    itemp = (IZ(j,1)-1)*3
                                    CZ(i+jnd3) = vj(i) + CZ(i+itemp)
 78                              continue
                              else
                                 ERROR = .true.
                                 if ( IOUT.ne.0 ) write (IOUT,99005) i
                                 return
                              endif
                           else
                              ERROR = .true.
                              if ( IOUT.ne.0 ) write (IOUT,99005) i
                              return
                           endif
                        else
                           ERROR = .true.
                           if ( IOUT.ne.0 ) write (IOUT,99005) i
                           return
                        endif
                     endif
 80               continue
               endif
            endif
         endif
      else
         ERROR = .true.
         write (IOUT,99001) NZ , MAXNZ
         return
      endif
C
C     eliminate dummy atoms.  dummy atoms are characterized by
C     negative atomic numbers.  ghost atoms have zero atomic
C     numbers.  ghost atoms are not eliminated.
      NATOMS = 0
      iaind = 0
      naind = 0
      do 100 i = 1 , NZ
         if ( IANZ(i).ge.0 ) then
            NATOMS = NATOMS + 1
            IAN(NATOMS) = IANZ(i)
            CHARGE(NATOMS) = CHARGE(i)
            C(1+naind) = CZ(1+iaind)
            C(2+naind) = CZ(2+iaind)
            C(3+naind) = CZ(3+iaind)
            naind = naind + 3
         endif
         iaind = iaind + 3
 100  continue
C
C     'tidy' up the coordinates.
      nat3 = 3*NATOMS
      do 200 i = 1 , nat3
         if ( gabs(C(i)).le.tenm10 ) C(i) = zero
 200  continue
C
      return
C
      end
@* INDEX.
