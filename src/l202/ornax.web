@* ornax.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXAP3                                                    
\item[INPUT:] A                                                         
\item[INPUT:] NATOMS                                                    
\item[INPUT:] IAN                                                       
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  TOL2    TOLER                                          
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GABS    GSQRT                                          
\item[Called by]   ORD2H                                                  
                                                                    
\end{description}
@a
      integer function ornax(MAXAP3,A,NATOMS,IAN)
      implicit none
      double precision A , cutoff , dis , dx , dy , dz , gabs , gsqrt , 
     &                 one , qa2 , qa3 , qb2 , qb3 , Tol2 , Toler , 
     &                 tst1 , tst2 , x1 , xx , y1
      double precision yy , z1 , zero , zz
      integer i1 , i2 , i3 , IAN , iat , iclass , idx , ix , jan , jat , 
     &        jdx , jjdx , kan , kat , kdx , kkdx , MAXAP3 , NATOMS , 
     &        nx , ny
      integer nz
      dimension A(MAXAP3,3) , IAN(*)
      dimension cutoff(10) , iclass(18) , ix(4)
      dimension dis(5050)
      common /tol   / Toler , Tol2
      data cutoff/0.89 , 1.73 , 2.91 , 1.25 , 2.53 , 1.70 , 1.66 , 2.4 , 
     &     2.04 , 2.53/
      data iclass/1 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 
     &     4 , 4 , 4 , 4 , 4/
      data ix/0 , 1 , 3 , 6/
      data zero , one/0.0D0 , 1.0D0/
C
C
C     return the number of the cartesian axes which passes through
C     the greatest number of atoms.  if there is no one axis which
C     passes through more atoms than the other two then return the
C     number of the axes which passes through the largest number
C     of bonds.  if this is not decisive return a zero.
C
C
C
C
C
      nx = 0
      ny = 0
      nz = 0
C
C     determine the number of atoms on each axis.
C
      do 100 iat = 1 , NATOMS
         xx = A(iat,1)*A(iat,1)
         yy = A(iat,2)*A(iat,2)
         zz = A(iat,3)*A(iat,3)
         dx = gsqrt(yy+zz)
         dy = gsqrt(xx+zz)
         dz = gsqrt(xx+yy)
         if ( gabs(dx).lt.Toler ) nx = nx + 1
         if ( gabs(dy).lt.Toler ) ny = ny + 1
         if ( gabs(dz).lt.Toler ) nz = nz + 1
 100  continue
C
C     is any one count larger than the other two
C
      if ( nz.lt.ny ) then
         if ( ny.lt.nx ) then
         elseif ( ny.eq.nx ) then
            goto 200
         else
C
            ornax = 2
            return
         endif
      elseif ( nz.eq.ny ) then
         if ( nx.le.nz ) goto 200
      elseif ( nz.lt.nx ) then
      elseif ( nz.eq.nx ) then
         goto 200
      else
C
         ornax = 3
         return
      endif
      ornax = 1
      return
C
C     determine the number of bonds cut by each cartesian axis.
C     the criteria are:
C     1-- the axis and the line connecting atoms a and b must
C         intersect.
C     2-- the distance between a and b must be less than some
C         cutoff.  in order to establish reasonable cutoffs
C         the atoms have been classified:
C            class     atoms
C             h         h, he
C             a1        li, be
C             a2        b, c, n, o, f, ne
C             b         na, mg, al, si, p, s, cl, ar
C         these four classes of atoms produce ten types of bonds.
C         the cutoff is 20  greater than the average standard
C         model bond length for the individual bonds of a given
C         type except for a1-a2 bonds where the cutoff is 10
C         greater than the maximum standard model bond length of
C         that type.
C
C     calculate an interatomic distance matrix.
C
 200  idx = 0
      nx = 0
      ny = 0
      nz = 0
      do 300 iat = 1 , NATOMS
         x1 = A(iat,1)
         y1 = A(iat,2)
         z1 = A(iat,3)
         do 250 jat = 1 , iat
            idx = idx + 1
            dis(idx) = gsqrt((x1-A(jat,1))**2+(y1-A(jat,2))**2+(z1-A(jat
     &                 ,3))**2)
 250     continue
 300  continue
C
C     zero the entries in dis that are larger than the appropriate
C     bond distance cutoff.
C
      idx = 0
      do 400 jat = 1 , NATOMS
         jan = IAN(jat)
         jjdx = iclass(jan)
         jdx = ix(jjdx)
         do 350 kat = 1 , jat
            kan = IAN(kat)
            kkdx = iclass(kan)
            kdx = jdx + kkdx
            if ( kkdx.gt.jjdx ) kdx = ix(kkdx) + jjdx
            idx = idx + 1
            if ( dis(idx).gt.cutoff(kdx) ) dis(idx) = zero
 350     continue
 400  continue
C
C     for each pair of bonded atoms determine which axis the bond
C     intersects.
C
      idx = 0
      do 500 iat = 1 , NATOMS
         do 450 jat = 1 , iat
            idx = idx + 1
            if ( gabs(dis(idx)).ge.Tol2 ) then
               do 410 i1 = 1 , 3
                  i2 = 1 + mod(i1,3)
                  i3 = 1 + mod(i2,3)
                  qa2 = A(iat,i2)
                  qa3 = A(iat,i3)
                  qb2 = A(jat,i2)
                  qb3 = A(jat,i3)
C
C     reject on-axis atoms.
C
                  tst1 = gsqrt(qa2*qa2+qa3*qa3)
                  if ( tst1.ge.Toler ) then
                     tst2 = gsqrt(qb2*qb2+qb3*qb3)
                     if ( tst2.ge.Toler ) then
C
C     does the i1 axis intersect the line defined by iat and jat
C     (see crc math tables, 20th ed., p 365)
C
                        tst1 = qa3*(qa2-qb2)
                        tst2 = qa2*(qa3-qb3)
                        if ( gabs(tst1-tst2).le.Tol2 ) then
C
C     is the point of intersection between the atoms
C
                           if ( gabs(qa2).lt.Toler .and. gabs(qb2)
     &                          .lt.Toler ) then
C
                              tst2 = dsign(one,qa3) + dsign(one,qb3)
                              if ( tst2.ne.zero ) goto 410
                           else
                              tst1 = dsign(one,qa2) + dsign(one,qb2)
                              if ( tst1.ne.zero ) goto 410
                           endif
C
C     increment the appropriate counter.
C
                           if ( i1.eq.2 ) then
C
                              ny = ny + 1
                           elseif ( i1.eq.3 ) then
C
                              nz = nz + 1
                           else
C
                              nx = nx + 1
                           endif
                        endif
                     endif
                  endif
C
 410           continue
            endif
 450     continue
 500  continue
C
C     pick the biggest count, if any, and return.
C
      if ( nz.lt.ny ) then
         if ( ny.lt.nx ) then
         elseif ( ny.eq.nx ) then
            goto 600
         else
C
            ornax = 2
            return
         endif
      elseif ( nz.eq.ny ) then
         if ( nx.le.nz ) goto 600
      elseif ( nz.lt.nx ) then
      elseif ( nz.eq.nx ) then
         goto 600
      else
C
         ornax = 3
         return
      endif
      ornax = 1
      return
C
 600  ornax = 0
      return
C
      end
@* INDEX.
