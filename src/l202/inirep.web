@* inirep.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NGRP                                                      
\item[PASSED:] NATOMS                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    CHRTBL  IPRMUT  LBLREP  NREPS   NSYMOP  SYMOPS         
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       IORD    NUMER   REPCI   REPCN   REPCNH  REPCNV  REPCS  
             REPCST  REPDN   REPDND  REPDNH  REPDST  REPO    REPOH  
             REPT    REPTD                                          
\item[Called by]   OPER                                                   
                                                                    
\end{description}
@a
      subroutine inirep(NGRP,NATOMS)
C ----------------------------------------------------------------------
      implicit none
      integer blank , c , i , iord , j , n , NATOMS , NGRP , numer
      double precision zero
      dimension NGRP(4)
      double precision Symops , Chrtbl
      integer Nsymop , Nreps , Lblrep , Iprmut
      common /repcom/ Nsymop , Nreps , Lblrep(32) , Chrtbl(10,16) , 
     &                Symops(9,10) , Iprmut(100,10)
      data zero/0.0D0/ , blank/' '/
C          this routine starts building the data structure used
C     by subsequent programs to determine the symmetries of
C     individual molecular orbitals.  at this point in the symmetry
C     program, the point group has been determined, and this is
C     supplied to this routine in the calling argument, "ngrp"
C     (up to four characters, one character per word in nrgp(4)).
C
C          the point group is decoded here, and based on this,
C     a routine is called which knows the character table for the
C     particular point group.  these routines all have names like
C     "repcnv", "repdnh", "repdnd", ect.  these routines also
C     know the order in which the symmtery operations for each
C     point group will be generated (see subroutine oper).  knowing
C     this, they save information about which of these are needed
C     to determine the orbital symmetries.  another routine, "savrep",
C     (called by "fill") uses this data to save the necessary
C     transformations.
C     r. a. whiteside - august 1979
C ----------------------------------------------------------------------
C
C                              initialize the common block.
      Nsymop = 0
      Nreps = 0
      do 100 i = 1 , 32
         Lblrep(i) = blank
 100  continue
      do 200 i = 1 , 16
         do 150 j = 1 , 10
            Chrtbl(j,i) = zero
 150     continue
 200  continue
      do 300 i = 1 , 10
         do 250 j = 1 , 9
            Symops(j,i) = zero
 250     continue
 300  continue
      do 400 i = 1 , 10
         do 350 j = 1 , 100
            Iprmut(j,i) = 0
 350     continue
 400  continue
C
C                              decode ngrp, call appropriate routine.
      c = NGRP(1)
      if ( c.eq.iord('C') ) then
C
C            point group is "c-something"
         c = NGRP(2)
C            ci
         if ( c.eq.iord('I') ) call repci
C            cs
         if ( c.eq.iord('S') ) call repcs
C            c*v
         if ( c.eq.iord('*') ) call repcst(NATOMS)
         n = numer(NGRP)
         if ( n.gt.0 ) then
            c = NGRP(4)
C            cnv
            if ( c.eq.iord('V') ) call repcnv(n)
C            cnh
            if ( c.eq.iord('H') ) call repcnh(n)
C            cn
            if ( c.eq.iord(' ') ) call repcn(n)
         endif
      elseif ( c.eq.iord('D') ) then
C
C                  point group is "d-something".
         if ( NGRP(2).eq.iord('*') ) call repdst(NATOMS)
         n = numer(NGRP)
         if ( n.gt.0 ) then
            c = NGRP(4)
C            dnh
            if ( c.eq.iord('H') ) call repdnh(n)
C            dnd
            if ( c.eq.iord('D') ) call repdnd(n)
C            dn
            if ( c.eq.iord(' ') ) call repdn(n)
         endif
      elseif ( c.eq.iord('T') ) then
C
C                  point group in 't'-something.
         if ( NGRP(2).eq.iord('D') ) call reptd
         if ( NGRP(2).eq.iord(' ') ) call rept
      elseif ( c.eq.iord('O') ) then
C
C                  point group is 'o'-something.
         if ( NGRP(2).eq.iord('H') ) call repoh
         if ( NGRP(2).eq.iord(' ') ) call repo
      elseif ( c.ne.iord('K') ) then
         if ( c.eq.iord('I') ) then
         endif
      endif
C
      return
C
      end
@* INDEX.
