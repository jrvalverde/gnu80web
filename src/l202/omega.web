@* omega.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] MAXAP3                                                    
\item[PASSED:] ISYMM                                                     
\item[PASSED:] IFWG                                                      
\item[INPUT:] NOP                                                       
\item[INPUT:] TRANS                                                     
\item[INPUT:] NPERM                                                     
\item[INPUT:] MAXOP                                                     
\item[INPUT:] NATOMS                                                    
\item[INPUT:] IPRINT                                                    
\item[INPUT:] IDUMP                                                     
\item[INPUT:] A                                                         
\item[OUTPUT:] C                                                         
\item[INPUT:] TRVEC                                                     
\item[INPUT:] NGRP                                                      
\item[PASSED:] IAN                                                       
\item[OUTPUT:] ITRANS                                                    
\item[PASSED:] TOANG                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Transmits as argument]  FWG     LENFOR  LENFWG  MOLFOR                         
\item[Uses]  FWG     IOUT    LENFOR  LENFWG  MOLFOR  TOL2           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       CORPRT  FIXREP  GABS    ILSW    IORD    NOONES  NUMDOF 
             TQUERY  TREAD   TWRITE                                 
\item[Called by]   SYMM                                                   
                                                                    
\end{description}
@a
      subroutine omega(MAXAP3,ISYMM,IFWG,NOP,TRANS,NPERM,MAXOP,NATOMS,
     &                 IPRINT,IDUMP,A,C,TRVEC,NGRP,IAN,ITRANS,TOANG)
      implicit none
      double precision A , C , cx , cy , cz , gabs , t , TOANG , Tol2 , 
     &                 Toler , TRANS , TRVEC , zero
      integer i , i2 , IAN , iat , IDUMP , IFWG , In , iop , iord , 
     &        Iout , IPRINT , Ipunch , ISYMM , ITRANS , ixyz , j , j1 , 
     &        jop , jprint , jtrans
      integer jtst , len , Lenfor , Lenfwg , lenpr , MAXAP3 , MAXOP , 
     &        Molfor , mout , NATOMS , ndof , neqatm , NGRP , NOP , 
     &        nosym , NPERM , nsymop , numdof
      integer cin(132)
C=> local common i807a,i807b
      integer Fwg
      dimension TRANS(3,3,MAXOP) , NPERM(MAXAP3,MAXOP)
      dimension A(MAXAP3,3) , C(100,3) , TRVEC(*) , NGRP(4) , IAN(*)
      dimension ITRANS(3,MAXOP) , jprint(100)
      dimension jtrans(3,8) , neqatm(100,8) , mout(846) , t(3,3)
      common /cfwg  / Lenfor , Molfor(30) , Lenfwg , Fwg(100)
      common /io    / In , Iout , Ipunch
      common /tol   / Toler , Tol2
      equivalence (nsymop,mout(1))
      equivalence (jtrans(1,1),mout(2))
      equivalence (neqatm(1,1),mout(26))
      equivalence (t(1,1),mout(829))
      data zero/0.0D0/
C
C
C      omega is the final routine in the symmetry package.
C     it places the character strings molfor and fwg on r/w file
C     ifwg so that they may be read by the archiver.
C     it monitors the framework group during optimizations and turns
C     symmetry off if there is any change from point to point.
C     using the translation vector and rotation matrix provided by
C     ptgrp, it reorints the coordinates in blank common (array c
C     in the calling arguments).
C     it edits the list of operations so that only unique two-fold
C     operations remain and writes the information to r/w file isymm.
C
C
C
C
C
C
C
99001 format (1x,'OMEGA--  SYMMETRY TURNED OFF')
99002 format (1x,' NON-TWO-FOLD OPERATIONS DELETED'/)
99003 format (1x,44I3)
99004 format (1x,(/1x,i2,':',3x,3I4))
99005 format (1x,'OMEGA-- NO USEABLE SYMMETRY')
99006 format (1x,'FINAL SET OF OPERATIONS'/)
99007 format (1x,18x,'STANDARD ORIENTATION:')
99008 format (1x,'PREVIOUS ROTATION MATRIX USED')
99009 format (/1x,'OMEGA--  *** WARNING *** CHANGE IN POINT GROUP ',
     &        'DETECTED'/)
99010 format (1x,'ROTATION MATRIX:')
99011 format (1x,22x,3F12.6)
99012 format (1x,'NUMBER OF SYMMETRY OPERATIONS:',i3)
99013 format (1x,'STOICHIOMETRY    ',100A1)
99014 format (1x,'FRAMEWORK GROUP  ',100A1)
99015 format (1x,'DEG. OF FREEDOM  ',i3)
C
C     tread the stoichiometric formula and framework gorup if they exist
C     from a previous calc'n.
C
      call tquery(IFWG,len)
      if ( len.ne.0 ) call tread(IFWG,cin,66,1,66,1,0)
C
C     twrite and print the current information.  ones are stripped off
C     of stoichiometric formulas before printing.  note that lenfor,
C     molfor, lenfwg, and fwg are equivalenced to a 66 double-word
C     array in symm.
C
      call twrite(IFWG,Lenfor,66,1,66,1,0)
      call noones(Lenfor,Molfor,lenpr,jprint)
      write (Iout,99013) (jprint(i),i=1,lenpr)
      call noones(Lenfwg,Fwg,lenpr,jprint)
      write (Iout,99014) (jprint(j),j=1,lenpr)
C
C     determine the number of degrees of freedom available to the
C     molecule within this framework group and print it.
C
      ndof = numdof(Fwg,NATOMS)
      write (Iout,99015) ndof
C
C     if the nosym flag is set, do no more.  if it is set to 2 then
C     read the old transformation matrix and rotate the molecule
C     using it.
C
      call ilsw(2,26,nosym)
      if ( nosym.ne.1 ) then
C
         if ( nosym.ne.2 ) then
C
C     compare the current framework group with the previous one
C     (if any).  if they're not the same set nosym to 2 and use the
C     rotation matrix on the r/w files for the rest of the job.
C
            if ( len.ne.0 ) then
               do 10 i = 1 , 100
                  if ( cin(i+32).ne.Fwg(i) ) goto 100
 10            continue
            endif
C
C     if there is only one operation (the idenity), set nosym and return
C
            if ( NOP.gt.1 ) then
C
C     remove non-two-fold operations.  in other words, remove those
C     operations where the transformation matrix does not consist of
C     plus or minus one on the diagonal and zero off the diagonal.
C
C     first store the diagonal elements of the 3x3 matrices in an
C     integer array, itrans.  the conversion to single precision
C     compensates for some very small round-off errors in trans.
C
               do 20 iop = 1 , NOP
                  do 15 ixyz = 1 , 3
                     ITRANS(ixyz,iop) = int(sngl(TRANS(ixyz,ixyz,iop)))
 15               continue
 20            continue
C
C     now move only the two fold operations from itrans to jtrans
C     and from nperm to neqatm.
C
               nsymop = 0
               do 30 iop = 1 , NOP
                  jtst = iabs(ITRANS(1,iop)) + iabs(ITRANS(2,iop))
     &                   + iabs(ITRANS(3,iop))
                  if ( jtst.eq.3 ) then
                     nsymop = nsymop + 1
                     do 22 ixyz = 1 , 3
                        jtrans(ixyz,nsymop) = ITRANS(ixyz,iop)
 22                  continue
                     do 24 iat = 1 , NATOMS
                        neqatm(iat,nsymop) = NPERM(iat,iop)
 24                  continue
                  endif
 30            continue
C
C     debug printing of remaining operations.
C
               if ( IDUMP.ne.0 ) then
                  write (Iout,99002)
                  write (Iout,99003) (i,i=1,nsymop)
                  write (Iout,99003)
                  do 35 iat = 1 , NATOMS
                     write (Iout,99003) (neqatm(iat,iop),iop=1,nsymop)
 35               continue
                  do 40 iop = 1 , nsymop
                     write (Iout,99004) iop , 
     &                                  (jtrans(ixyz,iop),ixyz=1,3)
 40               continue
               endif
C
C     edit the list of operations so that each permutation of atoms
C     occurs only once.
C
C     first mark the operations to delete.
C
               if ( nsymop.le.1 ) goto 200
               i2 = nsymop - 1
               do 50 iop = 1 , i2
                  if ( neqatm(1,iop).ne.-99 ) then
                     j1 = iop + 1
                     do 44 jop = j1 , nsymop
                        do 42 iat = 1 , NATOMS
                           if ( neqatm(iat,jop).ne.neqatm(iat,iop) )
     &                          goto 44
 42                     continue
                        neqatm(1,jop) = -99
 44                  continue
                  endif
 50            continue
C
C     now remove the redundant operations.
C
               iop = 0
 60            iop = iop + 1
               if ( iop.gt.nsymop ) goto 200
 70            if ( neqatm(1,iop).ne.-99 ) goto 60
               nsymop = nsymop - 1
               if ( nsymop.lt.iop ) goto 200
               do 90 jop = iop , nsymop
                  do 75 ixyz = 1 , 3
                     jtrans(ixyz,jop) = jtrans(ixyz,jop+1)
 75               continue
                  do 80 iat = 1 , NATOMS
                     neqatm(iat,jop) = neqatm(iat,jop+1)
 80               continue
 90            continue
               goto 70
            else
               call ilsw(1,26,1)
               write (Iout,99001)
               return
            endif
C
 100        call ilsw(1,26,2)
            write (Iout,99009)
            write (Iout,99001)
            call tread(ISYMM,mout,423,1,423,1,0)
            nsymop = 0
         else
            call tread(ISYMM,mout,423,1,423,1,0)
            write (Iout,99008)
            nsymop = 0
         endif
         goto 400
      else
         do 150 i = 1 , 3
            do 120 j = 1 , 3
               t(i,j) = A(NATOMS+j,i)
 120        continue
 150     continue
         call fixrep(t)
         return
      endif
C
C     if nsymop has been reduced to one then set nosym and return.
C
 200  if ( nsymop.gt.1 ) then
C
C     debug printing of the final operations.
C
         if ( IPRINT.ne.0 ) then
            write (Iout,99006)
            write (Iout,99003) (i,i=1,nsymop)
            write (Iout,99003)
            do 220 iat = 1 , NATOMS
               write (Iout,99003) (neqatm(iat,iop),iop=1,nsymop)
 220        continue
            do 240 iop = 1 , nsymop
               write (Iout,99004) iop , (jtrans(ixyz,iop),ixyz=1,3)
 240        continue
         endif
C
C     get the transformation matrix from the 3 trace atoms.
C
         do 300 i = 1 , 3
            do 260 j = 1 , 3
               t(i,j) = A(NATOMS+j,i)
 260        continue
 300     continue
C
C     twrite the symmetry information.
C
         call twrite(ISYMM,mout,423,1,423,1,0)
      else
         do 350 i = 1 , 3
            do 320 j = 1 , 3
               t(i,j) = A(NATOMS+j,i)
 320        continue
 350     continue
         call fixrep(t)
         call ilsw(1,26,1)
         write (Iout,99005)
         return
      endif
C
C     transform the coordinates.
C
C
C     first translate the molecule.
C
 400  do 500 iat = 1 , NATOMS
         do 450 ixyz = 1 , 3
            C(iat,ixyz) = C(iat,ixyz) + TRVEC(ixyz)
 450     continue
 500  continue
C
C     then rotate it unless the point group is ci.
C
      if ( NGRP(1).ne.iord('C') .or. NGRP(2).ne.iord('I') ) then
         do 550 iat = 1 , NATOMS
            cx = t(1,1)*C(iat,1) + t(1,2)*C(iat,2) + t(1,3)*C(iat,3)
            cy = t(2,1)*C(iat,1) + t(2,2)*C(iat,2) + t(2,3)*C(iat,3)
            cz = t(3,1)*C(iat,1) + t(3,2)*C(iat,2) + t(3,3)*C(iat,3)
            if ( gabs(cx).lt.Tol2 ) cx = zero
            if ( gabs(cy).lt.Tol2 ) cy = zero
            if ( gabs(cz).lt.Tol2 ) cz = zero
            C(iat,1) = cx
            C(iat,2) = cy
            C(iat,3) = cz
 550     continue
      endif
C
C     print the coordinates and the final number of operations.
C
      write (Iout,99007)
      call corprt(100,NATOMS,IAN,C,TOANG)
      write (Iout,99012) nsymop
C
C     perhaps print the rotation matrix, then return.
C
      if ( IPRINT.eq.0 ) return
      write (Iout,99010)
      do 600 i = 1 , 3
         write (Iout,99011) (t(i,j),j=1,3)
 600  continue
      return
C
      end
@* INDEX.
