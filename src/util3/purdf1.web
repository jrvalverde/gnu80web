@* purdf1.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[OUTPUT:] X                                                         
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    IEND    IRANGE  JEND    JRANGE                         
\item[Uses]  IEND    IPURD   IPURF   IRANGE  ISTART  ITYPE   JRANGE 
             JSTART  JTYPE   LAMAX   LBMAX   PT5     R1      R2     
             R3      R3OV2   R4      ULPURE  Z1      Z2      Z3     
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   FILLP   FILMAT  FILREC                                 
                                                                    
\end{description}
@a
      subroutine purdf1(X)
      implicit none
      double precision dx2y2 , dz2 , f0 , f1m , f1p , f2m , f2p , f3m , 
     &                 f3p , Pt5 , R1 , R2 , R3 , R3ov2 , R4 , Root15 , 
     &                 Root3 , Root5 , X , Z1
      double precision Z2 , Z3
      integer i , Iend , Imj , incr1 , incr2 , incr3 , incr4 , incr5 , 
     &        incr6 , incr7 , incr8 , incr9 , indx1 , indx2 , Inew , 
     &        Ipurd , Ipurf , Irange , Istart , Itype
      integer j , Jend , jendp , Jnew , Jnktyp , Jrange , jrpure , 
     &        Jstart , Jtype , Lamax , Lbmax , Lbound , Lentq , Limdum , 
     &        Lpmax , Maxdum , N10ord , N5ord , N6ord , N7ord
      integer Nordr
      integer Ubound , Ulpure
      dimension X(*)
      common /type  / Itype , Jtype , Jnktyp(10)
      common /ipure / Ipurd , Ipurf
      common /limit / Imj , Istart , Jstart , Iend , Jend , Irange , 
     &                Jrange , Lentq , Limdum(11)
      common /cfact / Pt5 , R3ov2 , Root3 , Root5 , Root15 , R1 , R2 , 
     &                R3 , R4 , Z1 , Z2 , Z3
      common /order / Nordr(20) , N6ord(10) , N5ord(9) , N10ord(10) , 
     &                N7ord(7) , Lbound(4,3) , Ubound(4) , Ulpure(4)
      common /max   / Lamax , Lbmax , Lpmax , Maxdum(4)
      common /new   / Inew , Jnew
C
C
C***********************************************************************
C     this routine transforms the input rectangular matrix x from
C     second- or third-order gaussians to pure angular functions.
C     (ie. to pure d- or f-functions.)
C
C     the transformation is done index sequentially, and is
C     o(n**3) operations.
C
C     because the transformation matrices are of unit matrix form
C     and are sparse, the matrix multiplications are explicitely
C     written.
C
C     this routine will alter /limit/ in that iend, jend, irange,
C     and jrange are updated if necessary.
C***********************************************************************
C
C
C
C     test for possible bypass of trnasformation at b.
      if ( Jtype.lt.2 ) goto 300
      if ( Jtype.eq.2 ) then
C
C     test for pure d at b.
         if ( Ipurd.ne.0 ) goto 300
C
C     ******************************************************************
C     d-transform at b.
C     ******************************************************************
C     indx1 is the main index into x.
         indx1 = 5 - Jstart + 1
C     loop over all values of i.
         do 50 i = 1 , Irange
C     form 3*z**2-r**2 part at b.
            dz2 = X(indx1+2) - Pt5*(X(indx1)+X(indx1+1))
C     form x**2-y**2 at b.
            dx2y2 = R3ov2*(X(indx1)-X(indx1+1))
C     fill the integrals into x.
            X(indx1) = dz2
            X(indx1+1) = X(indx1+4)
            X(indx1+2) = X(indx1+5)
            X(indx1+4) = X(indx1+3)
            X(indx1+3) = dx2y2
            indx1 = indx1 + Jrange
C     branch to compression.
 50      continue
      else
C
C
C     test for f-transformation.
         if ( Ipurf.ne.0 ) goto 300
C
C     ******************************************************************
C     f-transform at b.
C     ******************************************************************
C     we have only f. (ie. no s=p stuff).
C     set indx1.
         indx1 = 0
C     loop over all possible i values.
         do 100 i = 1 , Irange
C
            f0 = X(indx1+3) - R2*(X(indx1+6)+X(indx1+9))
            f1p = R4*(Z1*X(indx1+7)-X(indx1+1)-Z2*X(indx1+4))
            f1m = R4*(Z1*X(indx1+8)-X(indx1+2)-Z2*X(indx1+5))
            f2p = R3*(X(indx1+6)-X(indx1+9))
            f2m = X(indx1+10)
            f3p = R1*(X(indx1+1)-Z3*X(indx1+4))
            f3m = R1*(Z3*X(indx1+5)-X(indx1+2))
C
            X(indx1+1) = f0
            X(indx1+2) = f1p
            X(indx1+3) = f1m
            X(indx1+4) = f2p
            X(indx1+5) = f2m
            X(indx1+6) = f3p
            X(indx1+7) = f3m
C
            indx1 = indx1 + Jrange
 100     continue
      endif
C
C
C     after transformation at b, it is necessary to eliminate
C     the extraneous functions.
C
C     indx2 counts into compressed array.
C     indx1 counts from the un-compressed array.
C
C     set jendp and jrpure.
      jendp = Ulpure(Lbmax)
      jrpure = jendp - Jstart + 1
C
      indx1 = 0
      indx2 = 0
C
C     loop over all i, new j.
      do 200 i = 1 , Irange
         do 150 j = 1 , jrpure
            X(indx2+j) = X(indx1+j)
 150     continue
         indx1 = indx1 + Jrange
         indx2 = indx2 + jrpure
 200  continue
C
C     transformation at b is complete.
C     update necessary /limit/ variables.
      Jend = jendp
      Jrange = jrpure
C
C
C     test for possible bypass of transformation at a.
 300  if ( Itype.lt.2 ) goto 500
      if ( Itype.eq.2 ) then
C
C     test for d-transform at a.
         if ( Ipurd.ne.0 ) goto 500
C
C     ******************************************************************
C     execute d-transform at a.
C     ******************************************************************
C     obtain starting index.
         indx1 = (5-Istart)*Jrange + 1
C     obtain increments.
         incr1 = Jrange
         incr2 = incr1 + Jrange
         incr3 = incr2 + Jrange
         incr4 = incr3 + Jrange
         incr5 = incr4 + Jrange
C
C     perform d-transform at a.
         do 350 j = 1 , Jrange
            dz2 = X(indx1+incr2) - Pt5*(X(indx1)+X(indx1+incr1))
            dx2y2 = R3ov2*(X(indx1)-X(indx1+incr1))
            X(indx1) = dz2
            X(indx1+incr1) = X(indx1+incr4)
            X(indx1+incr2) = X(indx1+incr5)
            X(indx1+incr4) = X(indx1+incr3)
            X(indx1+incr3) = dx2y2
            indx1 = indx1 + 1
 350     continue
      else
C
C
C     test for required pure f at a.
         if ( Ipurf.ne.0 ) goto 500
C
C     ******************************************************************
C     transform to pure f at a.
C     ******************************************************************
C     obtain starting index.
         indx1 = 1
C     obtain increments.
         incr1 = Jrange
         incr2 = incr1 + Jrange
         incr3 = incr2 + Jrange
         incr4 = incr3 + Jrange
         incr5 = incr4 + Jrange
         incr6 = incr5 + Jrange
         incr7 = incr6 + Jrange
         incr8 = incr7 + Jrange
         incr9 = incr8 + Jrange
C
C     commence f-transformation loop at a.
         do 400 j = 1 , Jrange
C
            f0 = X(indx1+incr2) - R2*(X(indx1+incr5)+X(indx1+incr8))
            f1p = R4*(Z1*X(indx1+incr6)-X(indx1)-Z2*X(indx1+incr3))
            f1m = R4*(Z1*X(indx1+incr7)-X(indx1+incr1)-Z2*X(indx1+incr4)
     &            )
            f2p = R3*(X(indx1+incr5)-X(indx1+incr8))
            f2m = X(indx1+incr9)
            f3p = R1*(X(indx1)-Z3*X(indx1+incr3))
            f3m = R1*(Z3*X(indx1+incr4)-X(indx1+incr1))
C
            X(indx1) = f0
            X(indx1+incr1) = f1p
            X(indx1+incr2) = f1m
            X(indx1+incr3) = f2p
            X(indx1+incr4) = f2m
            X(indx1+incr5) = f3p
            X(indx1+incr6) = f3m
C
            indx1 = indx1 + 1
 400     continue
      endif
C
C     get corrected i values to /limit/.
      Iend = Ulpure(Lamax)
      Irange = Iend - Istart + 1
C
 500  return
C
      end
@* INDEX.
