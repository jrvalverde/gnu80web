@* sls.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] IOP                                                       
\item[OUTPUT:] A                                                         
\item[INPUT:] MDIM                                                      
\item[INPUT:] NBASIS                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]  CMP     ZERO                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   FIRST   OFIX    TIOC                                   
                                                                    
\end{description}
@a
      subroutine sls(IOP,A,MDIM,NBASIS)
      implicit none
      double precision A , Big , Four , One , Onept5 , Pt5 , Small , 
     &                 Three , Two , Zero
      integer i , i1 , ii , imdim , IOP , j , jj , Ksm , Kspin , Ksw , 
     &        MDIM , mdsq , mm , mtt , n1 , NBASIS , Nesk , Nest , 
     &        Nest1 , Nse
      integer Nsep , ntt
      logical Cmp , Rhf
      dimension A(MDIM,*)
      common /scfcon/ Cmp , Rhf , Ksm , Kspin , Ksw(2) , Nesk(2) , Nse , 
     &                Nsep , Nest , Nest1
      common /const / Zero , Pt5 , One , Onept5 , Two , Three , Four , 
     &                Big , Small
C     ******************************************************************
C     repacking of hermitian (symmetric) matrices
C     iop=1: square to linear
C     iop=2: linear to square
C     a(i,j): i.ge.j , i denotes the complex conjugate part of the value
C
C     coded in august 75 by rs9b
C     ******************************************************************
C
C     ******************************************************************
      mdsq = MDIM**2
      mtt = MDIM*(MDIM+1)/2
      ntt = NBASIS*(NBASIS+1)/2
      if ( IOP.ne.2 ) then
C
C     square to linear
         mm = 0
         do 50 i = 1 , NBASIS
            imdim = i + MDIM
            do 20 j = 1 , i
               mm = mm + 1
               A(mm,1) = A(j,i)
               if ( Cmp ) A(mm+mdsq,1) = A(j,imdim)
 20         continue
 50      continue
         if ( .not.Cmp ) return
         do 100 i = 1 , ntt
            A(i+mtt,1) = A(i+mdsq,1)
 100     continue
         return
C
C     linear to square
      elseif ( Cmp ) then
         do 150 i = 1 , ntt
            A(mdsq+i,1) = A(mtt+i,1)
 150     continue
      endif
      n1 = NBASIS + 1
      mm = ntt + 1
      do 300 ii = 1 , NBASIS
         i = n1 - ii
         imdim = i + MDIM
         i1 = i + 1
         do 200 jj = 1 , i
            j = i1 - jj
            mm = mm - 1
            A(j,i) = A(mm,1)
            if ( Cmp ) A(j,imdim) = A(mm+mdsq,1)
 200     continue
 300  continue
      do 400 i = 1 , NBASIS
         imdim = i + MDIM
         if ( Cmp ) A(i,imdim) = Zero
         do 350 j = 1 , i
            A(i,j) = A(j,i)
            if ( Cmp ) A(i,j+MDIM) = -A(j,imdim)
 350     continue
 400  continue
      return
C
      end
@* INDEX.
