@* repuls.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NATOMS                                                    
\item[INPUT:] ATMCHG                                                    
\item[INPUT:] C                                                         
\item[OUTPUT:] REP                                                       
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GSQRT                                                  
\item[Called by]   GINPUT                                                 
                                                                    
\end{description}
@a
      subroutine repuls(NATOMS,ATMCHG,C,REP)
      implicit none
      double precision anij , ATMCHG , C , gsqrt , REP , rij , xi , yi , 
     &                 zero , zi
      integer i , idx , In , Iout , ip1 , Ipunch , j , jdx , natm1 , 
     &        NATOMS
      dimension ATMCHG(*) , C(*)
      common /io    / In , Iout , Ipunch
      data zero/0.0D0/
C
C
C
      REP = zero
      natm1 = NATOMS - 1
      if ( NATOMS.le.1 ) return
C
      do 100 i = 1 , natm1
         ip1 = i + 1
         idx = 3*(i-1)
         xi = C(idx+1)
         yi = C(idx+2)
         zi = C(idx+3)
         do 50 j = ip1 , NATOMS
            anij = ATMCHG(i)*ATMCHG(j)
            jdx = 3*(j-1)
            rij = gsqrt((xi-C(jdx+1))**2+(yi-C(jdx+2))**2+(zi-C(jdx+3))
     &            **2)
            REP = REP + anij/rij
 50      continue
 100  continue
C
      return
C
      end
@* INDEX.
