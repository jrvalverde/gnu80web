@* square.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] A                                                         
\item[OUTPUT:] B                                                         
\item[INPUT:] MAX                                                       
\item[INPUT:] N                                                         
\item[INPUT:] KEY                                                       
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   CYCOPN  CYCPHF                                         
                                                                    
\end{description}
@a
      subroutine square(A,B,MAX,N,KEY)
      implicit none
      double precision A , B
      integer i , ix , j , jx , k , KEY , MAX , N
      dimension A(*) , B(MAX,MAX)
C
C
C     places linear array in square form
C     two parts ... key =
C     1  square array to be formed not symmetric
C     0  square array to be formed symmetric
C
C
      if ( KEY.ne.0 ) then
C
C     key=1  array not symmetric
C
         k = N*N
         do 50 j = 1 , N
            jx = N - j + 1
            do 20 i = 1 , N
               ix = N - i + 1
               B(ix,jx) = A(k)
               k = k - 1
 20         continue
 50      continue
         return
      endif
C
C     key=0  array symmetric
C
      k = N*(N+1)/2
      do 200 j = 1 , N
         jx = N - j + 1
         do 100 i = 1 , jx
            ix = jx - i + 1
            B(ix,jx) = A(k)
            k = k - 1
 100     continue
 200  continue
      do 300 j = 1 , N
         do 250 i = 1 , j
            B(j,i) = B(i,j)
 250     continue
 300  continue
      return
C
      end
@* INDEX.
