@* decchr.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NUM                                                       
\item[PASSED:] STRING                                                    
\item[PASSED:] CURSOR                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Uses]   NOTHING                                           
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       HEXCHR  PUTCHR  PUTICR                                 
\item[Called by]   APPLAB  BASPRT  ECNFIG  ENCODE  PRTRTE  PUTI    PUTLBL 
             SZPRNT                                                 
                                                                    
\end{description}
@a
      subroutine decchr(NUM,STRING,CURSOR)
      implicit none
      integer base , CURSOR , digit , hexchr , i , j , n , NUM , 
     &        STRING , test
      dimension STRING(*)
C
C          this routine appends the character string representing the
C     decimal integer "num" to "string", updating "cursor" in the
C     in the process.
C2
C
C
C
C     check for negative values.
C
      if ( NUM.lt.0 ) call putchr('-',STRING,CURSOR)
      if ( NUM.eq.0 ) call putchr('0',STRING,CURSOR)
      if ( NUM.eq.0 ) return
      n = iabs(NUM)
C
C     determine how many digits are in the number.
C
      digit = 9
 100  base = 10**digit
      test = n/base
      if ( test.ne.0 ) then
C
C     push the characters onto the string.
C
 150     i = n/base
         j = hexchr(i)
         call puticr(j,STRING,CURSOR)
         n = n - base*i
         digit = digit - 1
         if ( digit.lt.0 ) return
         base = 10**digit
         goto 150
      else
         digit = digit - 1
         if ( digit.lt.0 ) return
         goto 100
      endif
C
      end
@* INDEX.
