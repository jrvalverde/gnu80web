@* prmtbl.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] IHDG                                                      
\item[PASSED:] XNAME                                                     
\item[INPUT:] X                                                         
\item[INPUT:] ITYPE                                                     
\item[INPUT:] DX                                                        
\item[INPUT:] NVAR                                                      
\item[PASSED:] LBL                                                       
\item[PASSED:] NZ                                                        
\item[INPUT:] TOANG                                                     
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]     NOTHING                                           
\item[Transmits as argument]  IOUT                                                   
\item[Uses]  IOUT                                                   
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]       GABS    GATAN   GETB    NREP    PAD     PUTB    PUTBC  
             PUTCHR  PUTFP   STROUT                                 
\item[Called by]   GRDOPT  INITBS  INITMS  MSOPT                          
                                                                    
\end{description}
@a
      subroutine prmtbl(IHDG,XNAME,X,ITYPE,DX,NVAR,LBL,NZ,TOANG)
      implicit none
      double precision conver , DX , f45 , gabs , gatan , hundrd , one , 
     &                 str , ten , TOANG , todeg , value , X , XNAME , 
     &                 zero
      integer i , IHDG , ii , In , Iout , Ipunch , itmp , ITYPE , j , 
     &        l , LBL , len , line , ncur , nrep , numrep , NVAR , NZ
      integer getchr
      dimension XNAME(2) , X(2) , ITYPE(2) , DX(2) , itmp(8)
      dimension str(5) , line(20) , LBL(*)
      common /io    / In , Iout , Ipunch
      data zero/0.0D0/ , ten/10.0D0/ , hundrd/100.0D0/
      data one/1.0D0/ , f45/45.0D0/
C
C
C                  room for a paramter name and for an output line.
C
99001 format (1x,72('-'))
99002 format (1x,22x,27(1H-)/1x,22x,'!   INITIAL PARAMETERS    !'/1x,
     &        22x,'! (ANGSTROMS AND DEGREES) !'/1x,22(1H-),27x,23(1H-))
99003 format (1x,22x,27(1H-)/1x,22x,'!  OPTIMIZED PARAMETERS   !'/1x,
     &        22x,'! (ANGSTROMS AND DEGREES) !'/1x,22(1H-),27x,23(1H-))
99004 format (1x,22x,28(1H-)/1x,22x,'! NON-OPTIMIZED PARAMETERS !'/1x,
     &        22x,'! (ANGSTROMS AND DEGREES)  !'/1x,22(1H-),28x,22(1H-))
99005 format (1x,'!',6x,'NAME',6x,4x,'VALUE',3x,
     &        'DERIVATIVE INFORMATION (ATOMIC UNITS)',5x,'!')
C
C
C                 initialize unit conversion constants.
C
      todeg = f45/gatan(one)
C
C                  print out heading.
      if ( IHDG.eq.0 ) write (Iout,99002)
      if ( IHDG.eq.1 ) write (Iout,99003)
      if ( IHDG.eq.2 ) write (Iout,99004)
      write (Iout,99005)
      write (Iout,99001)
C
C                  loop over variables.
      ncur = 0
      do 100 i = 1 , NVAR
C
C                  initialize the line buffer.
         l = 0
         call pad(line,l,72,1H )
         l = 0
         call putchr('!',line,l)
         l = 71
         call putchr('!',line,l)
         l = 0
C
C                  get the name of this parameter.
         call getb(2,str,len,XNAME,ncur)
C
C                  put the name into the output line.
         len = min0(16,len)
         l = 8 - len/2 + 1
         call putb(str,len,line,l)
C
C                 convert from bohr/radian to angstrom/degree units.
C                 note that the default is to convert from radians to
C                 degrees.
         conver = todeg
         numrep = nrep(i,LBL,NZ)
         if ( numrep.ne.0 ) conver = TOANG
         value = X(i)*conver
C
C                  tab, then put value.
         l = 17
         if ( value.ge.zero ) l = l + 1
         if ( gabs(value).lt.hundrd ) l = l + 1
         if ( gabs(value).lt.ten ) l = l + 1
         call putfp(value,4,line,l)
         l = l - 1
         call putchr(' ',line,l)
C
C                  append some derivative info.
         l = 29
         j = iabs(ITYPE(i))
         if ( ITYPE(i).eq.-1 ) j = 4
C
         if ( j.eq.0 ) call putbc('ESTIMATE D2E/DX2',16,line,l)
         if ( j.eq.1 ) call putbc('D2E/DX2 =',9,line,l)
         if ( j.eq.2 ) call putbc('CALC D2E/DX2,  STEPSIZE =',25,line,l)
         if ( j.eq.3 ) call putbc('CALC D2E/DXDY, STEPSIZE =',25,line,l)
         if ( j.eq.4 ) call putbc('CALCULATE D2E/DX2 ANALYTICALLY',30,
     &                            line,l)
         if ( j.eq.5 ) call putbc('D2E/DX2 = IDENTITY',18,line,l)
         if ( j.eq.97 ) call putbc('D2E/DX2 =',9,line,l)
         if ( j.eq.98 ) call putbc('DE/DX =',7,line,l)
         if ( j.eq.99 ) call putbc('-DE/DX =',8,line,l)
C
         if ( j.ne.0 .and. j.ne.4 .and. j.ne.5 ) then
            if ( j.ne.0 ) call putchr(' ',line,l)
            ii = i + (i-1)*NVAR
            if ( j.eq.99 .or. j.eq.98 .or. j.eq.97 ) ii = i
            if ( DX(ii).ge.zero ) l = l + 1
            if ( gabs(DX(ii)).lt.hundrd ) l = l + 1
            if ( gabs(DX(ii)).lt.ten ) l = l + 1
            if ( j.ne.0 ) call putfp(DX(ii),6,line,l)
            if ( j.ne.0 ) l = l - 1
            if ( j.ne.0 ) call putchr(' ',line,l)
         endif
         call strout(Iout,line,72,1)
 100  continue
      write (Iout,99001)
      return
C
      end
@* INDEX.
