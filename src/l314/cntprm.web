@* cntprm.
\section*{\sf Dummy Arguments}  \begin{description}
                                                                    
\item[INPUT:] NDC                                                       
\item[OUTPUT:] INTC                                                      
\item[OUTPUT:] TQ                                                        
\item[INPUT:] TQPRIM                                                    
                                                                    
\end{description} \section*{\sf Common Variables}  \begin{description}
                                                                    
\item[Modifies]    JEND    KEND    LEND                                   
\item[Uses]  CA      CB      CC      CD      IEND    IMJ     IMKJML 
             ISTART  JEND    JSTART  KEND    KML     KSTART  LDMAX  
             LEND    LSTART  UBOUND                                 
                                                                    
\end{description}  \section*{\sf External Subprograms}  \begin{description}
                                                                    
\item[Calls]        NOTHING                                           
\item[Called by]   PHOENI                                                 
                                                                    
\end{description}
@a
      subroutine cntprm(NDC,INTC,TQ,TQPRIM)
      implicit none
      double precision Ca , Cb , Cc , cc1 , cc2 , cc3 , Cd , TQ , TQPRIM
      integer i , Idmp , Idump , Iend , Imj , Imk , Imkjml , INTC , 
     &        Irange , Istart , j , Jend , Jml , Jrange , Jstart , k , 
     &        Kend , Kml , Krange , Kstart
      integer l , Lamax , Lbmax , Lbound , Lcmax , Ldmax , Lend , 
     &        Lentq , Lpmax , Lpqmax , Lqmax , Lrange , Lstart , 
     &        N10ord , N5ord , N6ord , N7ord , NDC , Nordr , Numdf
      integer Ubound , Ulpure
      dimension TQ(*) , TQPRIM(*)
      common /dump  / Idmp , Idump
      common /contr / Ca(20) , Cb(20) , Cc(20) , Cd(20)
      common /limit / Imj , Imk , Jml , Kml , Imkjml , Istart , Jstart , 
     &                Kstart , Lstart , Iend , Jend , Kend , Lend , 
     &                Irange , Jrange , Krange , Lrange , Lentq , Numdf
      common /order / Nordr(20) , N6ord(10) , N5ord(9) , N10ord(10) , 
     &                N7ord(7) , Lbound(4,3) , Ubound(4) , Ulpure(4)
      common /max   / Lamax , Lbmax , Lcmax , Ldmax , Lpmax , Lqmax , 
     &                Lpqmax
C
C***********************************************************************
C     routine to contract the primitive two-electron integrals
C     into the final contracted integrals using the contraction
C     coefficients stored in /contr/.  this routine takes as input
C     the primitives (tqprim) and produces as output the final
C     integrals (tq).  intc and the contents of /order/ are
C     modified.
C***********************************************************************
C
C
C
C
C     apply contraction coefficients.
C     how this is done depends on whether or not there are any
C     contracted functions in this pass.  if there are not, use
C     alternate code.
      INTC = 0
      if ( NDC.ne.1 ) then
         do 50 i = Istart , Iend
            cc1 = Ca(i)
            if ( Imj.eq.0 ) Jend = i
            if ( Imkjml.eq.0 ) Kend = i
            do 20 j = Jstart , Jend
               cc2 = cc1*Cb(j)
               do 10 k = Kstart , Kend
                  cc3 = cc2*Cc(k)
                  Lend = Ubound(Ldmax)
                  if ( Kml.eq.0 ) Lend = k
                  if ( Imkjml+iabs(i-k).eq.0 ) Lend = j
                  do 5 l = Lstart , Lend
                     INTC = INTC + 1
                     TQ(INTC) = TQ(INTC) + TQPRIM(INTC)*cc3*Cd(l)
 5                continue
 10            continue
 20         continue
 50      continue
      else
C
         do 100 i = Istart , Iend
            cc1 = Ca(i)
            if ( Imj.eq.0 ) Jend = i
            if ( Imkjml.eq.0 ) Kend = i
            do 80 j = Jstart , Jend
               cc2 = cc1*Cb(j)
               do 60 k = Kstart , Kend
                  cc3 = cc2*Cc(k)
                  Lend = Ubound(Ldmax)
                  if ( Kml.eq.0 ) Lend = k
                  if ( Imkjml+iabs(i-k).eq.0 ) Lend = j
                  do 55 l = Lstart , Lend
                     INTC = INTC + 1
                     TQ(INTC) = TQ(INTC)*cc3*Cd(l)
 55               continue
 60            continue
 80         continue
 100     continue
      endif
C
C     return to caller
      return
C
      end
@* INDEX.
