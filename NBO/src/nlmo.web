@*nlmo.
\section*{\sf Dummy Arguments}  \begin{description}

\item[INPUT:] N
\item[INPUT:] A
\item[OUTPUT:] EVAL
\item[OUTPUT:] EVEC
\item[PASSED:] TSYM
\item[OUTPUT:] RESON
\item[OUTPUT:] NOCC
\item[OUTPUT:] IALARM

\end{description} \section*{\sf Common Variables}  \begin{description}

\item[Modifies]     NOTHING 
\item[Transmits as argument]  NDIM
\item[Uses]  AUHF    CI      ISPIN   LFNPR   MCSCF   NBAS    NDIM

\end{description}  \section*{\sf External Subprograms}  \begin{description}

\item[Calls]       LIMTRN  SYMUNI
\item[Called by]   NBODRV

\end{description}
@a
C*****************************************************************************
      subroutine nlmo(N,A,EVAL,EVEC,TSYM,RESON,NOCC,IALARM)
C*****************************************************************************
      implicit none
      double precision A , absaij , abss , aii , aiii , aiil , aiiu ,
     &                 ajj , ajjj , ajjl , ajju , amax , c , degthr ,
     &                 differ , done , eps , EVAL , EVEC , fract
      double precision hundrd , occmin , offtop , offtst , one , RESON ,
     &                 rot , s , t , ten , test , thr1 , thr2 , tot ,
     &                 totele , totp , TSYM , virmax , x , zero
      integer i , IALARM , ii , iimax , ilist , iocc , ioff , Ispin ,
     &        iuniq , j , jemt , jj , jjmax , jlist , jm1 , joff ,
     &        juniq , Lfnao , Lfnarc , Lfndaf
      integer Lfndef , Lfndm , Lfnin , Lfnmo , Lfnnab , Lfnnao ,
     &        Lfnnbo , Lfnnho , Lfnnlm , Lfnpna , Lfnpnb , Lfnpnh ,
     &        Lfnpnl , Lfnppa , Lfnpr , moff , Munit , Mxao , Mxaolm ,
     &        Mxbo
      integer N , n1 , n2 , Natoms , Nbas , Ndim , nel , niuniq ,
     &        njuniq , NOCC , noff , noffmx , nrot , nrot2 , ntime ,
     &        nvirst
C
C  form natural localized molecular orbitals from density matrix a.
C
C        n: actual dimension of a,evec
C     ndim: declared dimension of a,evec
C     tsym: scratch
C    reson: squares of diagonal elements of NBO to NLMO transf, times 100%
C   ialarm: alarm that the orbital occupancies are out of order and that
C           the lmo step should be avoided
C
C  these values are set:
C
C     differ = 1.0d-5
C
C     done   = 1.0d-10 (this is the parameter for convergence of the off-
C                       diagonal matrix elements.)
C
C     eps    = 1.0d-11 (this parameter has to do with the machine precision
C                       and should be set to a value between "done" and the
C                       machine precision.)
C
      logical Rohf , Uhf , Ci , Open , Complx , Alpha , Beta , Mcscf ,
     &        Auhf , Ortho
      logical zeroj
      common /nbio  / Lfnin , Lfnpr , Lfnao , Lfnpna , Lfnnao , Lfnpnh ,
     &                Lfnnho , Lfnpnb , Lfnnbo , Lfnpnl , Lfnnlm ,
     &                Lfnmo , Lfndm , Lfnnab , Lfnppa , Lfnarc ,
     &                Lfndaf , Lfndef
      common /nbinfo/ Ispin , Natoms , Ndim , Nbas , Mxbo , Mxao ,
     &                Mxaolm , Munit
      common /nbflag/ Rohf , Uhf , Ci , Open , Complx , Alpha , Beta ,
     &                Mcscf , Auhf , Ortho
      dimension A(Ndim,Ndim) , EVEC(Ndim,1) , EVAL(1) , TSYM(1) ,
     &          RESON(Ndim)
      dimension rot(2,2)
      dimension ilist(100) , jlist(100) , ioff(100) , joff(100) ,
     &          iuniq(100) , juniq(100)
C
C  important parameters:
C
      data differ , done , eps/1.0D-5 , 1.0D-10 , 1.0D-11/
C
C  noffmx is set to the dimension of vectors ilist,jlist,ioff,joff,iuniq,juniq:
C
      data degthr , noffmx/1.0D-3 , 100/
      data zero , one , ten , hundrd/0.0D0 , 1.0D0 , 10.0D0 , 100.0D0/
C
      write (Lfnpr,99003)
      thr1 = one - degthr
      thr2 = one - degthr*5
      ntime = 0
C
C  if there is only one basis function, solve this trivial case and return:
C
      if ( N.gt.1 ) then
C
         do 50 j = 1 , N
            do 20 i = 1 , N
               EVEC(i,j) = zero
 20         continue
            EVEC(j,j) = one
 50      continue
C
C  count the number of electrons and occupied orbitals:
C
         totele = zero
         do 100 i = 1 , N
            totele = totele + A(i,i)
 100     continue
         totele = totele + differ
         NOCC = totele
         if ( Ispin.eq.0 ) NOCC = NOCC/2 + mod(NOCC,2)
         nvirst = NOCC + 1
C
C  check if occupancies are in order:
C
         IALARM = 0
         virmax = zero
         do 150 j = nvirst , N
            if ( A(j,j).ge.virmax ) virmax = A(j,j)
 150     continue
         occmin = hundrd
         do 200 i = 1 , NOCC
            if ( A(i,i).le.occmin ) occmin = A(i,i)
 200     continue
         x = occmin - virmax
C
C  21 oct 1987.  the following feature of the program has been
C    turned off because sometimes it is not possible to diagonalize
C    the NBO density matrix when one of the ``a'' nbos is degenerate
C    in occupancy with one or more ``b'' nbos:
C
C  the "dabs(x).lt.differ" part of the next line is included so that
C   nlmos can be computed when a number of orbitals are nearly
C   degenerate in occupancy, as for instance in cli6, where six
C   lithium lone pairs are degenerate but only one of them can
C   be placed in the "occupied" set of nlmos.
C     if(x.gt.zero.or.dabs(x).lt.differ) go to 100
C
C  the above statement is replaced by:
C
         if ( x.gt.differ ) then
C
C   start loop:
C
 220        ntime = ntime + 1
C
C  first, find element a(iocc,jemt) of largest magnitude, offtop:
C
            offtop = zero
            do 240 jemt = nvirst , N
               do 230 iocc = 1 , NOCC
                  absaij = dabs(A(iocc,jemt))
                  if ( absaij.ge.offtop ) then
                     offtop = absaij
                     aii = A(iocc,iocc)
                     ajj = A(jemt,jemt)
                  endif
 230           continue
 240        continue
C
C  return if convergence has been achieved:
C
            if ( offtop.lt.done ) then
C
C        finished: place occupancies in eval and count up electrons
               totele = zero
               do 250 j = 1 , N
                  EVAL(j) = A(j,j)
                  totele = totele + EVAL(j)
                  x = EVEC(j,j)
                  RESON(j) = x*x*hundrd
 250           continue
               totp = totele + differ
               nel = totp
               tot = nel
               fract = dabs(totele-tot)
               if ( fract.gt.differ ) then
                  write (Lfnpr,99008) differ , totele
                  write (Lfnpr,99006)
                  write (Lfnpr,99007) (EVAL(i),i=1,Nbas)
                  IALARM = 1
                  return
C7000 format(2x,'noff,dm trace,diff:',i3,2f20.14)
C
99001             format (/1x,
     &                  'Highest occupied NBOs are not at the beginning'
     &                  ,' of the NBO list;',/,1x,
     &                  'The NLMO program is not ',
     &                  'currently set up to handle this.')
99002             format (/1x,
     &                  'Degeneracy between orbitals in the (a) and (b)'
     &                  ,' sets detected;',/1x,
     &               'NLMO program cannot always handle this situation.'
     &               )
99003             format (//1x,
     &                    'NATURAL LOCALIZED MOLECULAR ORBITAL (NLMO) ',
     &                    'ANALYSIS:')
99004             format (/1x,
     &               'Maximum off-diagonal element of DM in NLMO basis:'
     &               ,f10.5)
99005             format (/1x,
     &             'Something went wrong in the NLMO procedure; density'
     &             ,' matrix of SCF',/1x,
     &             'wave function has not been diagonalized')
99006             format (/1x,'Occupancies of NLMOs:')
99007             format (/1x,8F10.5)
99008             format (/1x,
     &            'Number of electrons (trace of DM, NLMO basis) is not'
     &            ,' within ',f10.5,/,' of an integer:',f10.5,
     &            ' - - PROGRAM ABORT')
               endif
            else
C
C  find all elements degenerate with largest one, offtop:
C  (check corresponding diagonal elements also)
C  noff: number of degenerate elements
C  ioff(k),joff(k): kth degenerate element
C
               offtst = offtop*thr1
               aiil = aii*thr2
               ajjl = ajj*thr2
               aiiu = aii/thr2
               ajju = ajj/thr2
               zeroj = .false.
               if ( ajj.lt.differ ) zeroj = .true.
               noff = 0
               do 260 jemt = nvirst , N
                  do 255 iocc = 1 , NOCC
                     absaij = dabs(A(iocc,jemt))
                     if ( absaij.ge.offtst ) then
                        aiii = A(iocc,iocc)
                        ajjj = A(jemt,jemt)
                        if ( (aiii.ge.aiil) .and. (aiii.le.aiiu) ) then
C
C  skip test of diag. elem. if small (.lt.differ):
C
                           if ( .not.(zeroj) ) then
                              if ( (ajjj.lt.ajjl) .or. (ajjj.gt.ajju) )
     &                             goto 255
                           endif
                           noff = noff + 1
                           ioff(noff) = iocc
                           joff(noff) = jemt
                        endif
                     endif
 255              continue
 260           continue
               if ( noff.lt.noffmx ) then
C
                  s = ajj - aii
                  abss = dabs(s)
C
C  if the rotation is very close to 45 degrees, set sin and cos to 1/(root 2)
C
                  test = eps*offtop
                  if ( abss.gt.test ) then
C
C  calculation of sin and cos for rotation that is not very close to 45 degrees
                     t = offtop/s
                     s = 0.25D0/dsqrt(0.25D0+t*t)
C
C    jacobi rotation angle:   cos=c ,  sin=s
                     c = dsqrt(0.5D0+s)
                     s = 2.D0*t*s/c
                  else
                     s = .707106781D0
                     c = s
                  endif
C  print statements for NLMO procedure details:
C      write(lfnpr,9903) offtop,s,c,noff
C 9903 format(' ******   offtop,s,c,noff:',3f14.9,i3)
C      write(lfnpr,9901) (ioff(i),i=1,noff)
C 9901 format(' ioff:',20i3)
C      write(lfnpr,9902) (joff(i),i=1,noff)
C 9902 format(' joff:',20i3)
C
C     simple 2 by 2 rotation, no degeneracy problems:
                  if ( noff.gt.1 ) then
C
C
C  noff.gt.1:
C   compute "averaged" unitary transformation so that symmetry is preserved
C
C    construct unique lists of orbitals involved:
C
C      iuniq(l): l-th unique occupied orb.
C      niuniq:   no. of unique occ. orbs
C      ilist(l): location in the unique list (iuniq) of the i value of the
C                            l-th offdiag. element
C      juniq, njuniq, and jlist are for the empty orbitals.
C
                     iuniq(1) = ioff(1)
                     ilist(1) = 1
                     niuniq = 1
                     do 264 moff = 2 , noff
                        i = ioff(moff)
                        iimax = moff - 1
                        do 262 ii = 1 , iimax
                           if ( ioff(ii).eq.i ) then
                              ilist(moff) = ilist(ii)
                              goto 264
                           endif
 262                    continue
                        niuniq = niuniq + 1
                        ilist(moff) = niuniq
                        iuniq(niuniq) = i
 264                 continue
C
                     juniq(1) = joff(1)
                     jlist(1) = niuniq + 1
                     njuniq = 1
                     do 268 moff = 2 , noff
                        j = joff(moff)
                        jjmax = moff - 1
                        do 266 jj = 1 , jjmax
                           if ( joff(jj).eq.j ) then
                              jlist(moff) = jlist(jj)
                              goto 268
                           endif
 266                    continue
                        njuniq = njuniq + 1
                        jlist(moff) = njuniq + niuniq
                        juniq(njuniq) = j
 268                 continue
                     nrot = niuniq + njuniq
                     nrot2 = nrot*nrot
                     n1 = nrot2 + 1
                     n2 = nrot2 + n1
C  construct tsym:
                     call symuni(TSYM,A,c,s,TSYM(n1),TSYM(n2),EVAL,nrot,
     &                           niuniq,njuniq,ilist,jlist,noff,ioff,
     &                           joff,Ndim)
C
C   make iuniq into a complete list of the unique orbitals, and transform
C    the NBO to NLMO transf. (evec) and the dm (a) by tsym:
                     ii = niuniq
                     do 270 i = 1 , njuniq
                        ii = ii + 1
                        iuniq(ii) = juniq(i)
 270                 continue
                     call limtrn(EVEC,iuniq,TSYM,EVAL,Ndim,N,nrot,nrot,
     &                           1)
C  see how much the elements were reduced:
C        do 750 moff=1,noff
C          i=ioff(moff)
C          j=joff(moff)
C          write(lfnpr,9920) i,j,(a(i,j))
C 9920     format(' i,j,aij:',2i3,f14.9)
C  750     continue
C
C      totele=zero
C      do 810 j=1,n
C        totele=totele+a(j,j)
C  810   continue
C      tot=nel
C      fract=totele-tot
C      write(lfnpr,7000) noff,totele,fract
                     call limtrn(A,iuniq,TSYM,EVAL,Ndim,N,nrot,nrot,0)
                  else
                     iocc = ioff(1)
                     jemt = joff(1)
                     if ( A(iocc,jemt).lt.zero ) s = -s
                     rot(1,1) = c
                     rot(2,2) = c
                     rot(1,2) = s
                     rot(2,1) = -s
                     ioff(2) = joff(1)
                     call limtrn(A,ioff,rot,EVAL,Ndim,N,2,2,0)
C
C     rotation completed
                     do 272 i = 1 , N
                        t = EVEC(i,iocc)
                        EVEC(i,iocc) = c*t - EVEC(i,jemt)*s
                        EVEC(i,jemt) = s*t + EVEC(i,jemt)*c
 272                 continue
                  endif
                  goto 220
               else
                  write (Lfnpr,99009) noff , noffmx
99009             format (//1x,'NOFF = ',i5,' IS GREATER THAN NOFFMX =',
     &                    i5,/5x,'  MUST ABORT NLMO PROCEDURE')
                  IALARM = 1
                  return
               endif
            endif
         else
C
C  occupancies out of order:
C
            IALARM = 1
            if ( dabs(x).gt.differ ) then
               write (Lfnpr,99001)
            else
               write (Lfnpr,99002)
            endif
            return
         endif
      else
         EVEC(1,1) = one
         EVAL(1) = A(1,1)
         return
      endif
      amax = zero
      do 400 j = 2 , N
         jm1 = j - 1
         do 300 i = 1 , jm1
            if ( dabs(A(i,j)).ge.amax ) amax = dabs(A(i,j))
 300     continue
 400  continue
      write (Lfnpr,99004) amax
      if ( Ci .or. Auhf .or. Mcscf ) return
C  SCF case:
      if ( amax.lt.hundrd*ten*done ) return
      write (Lfnpr,99005)
      IALARM = 1
      return
      end
@* INDEX.
