@*naodrv.
\section*{\sf Dummy Arguments}  \begin{description}

\item[PASSED:] DM
\item[PASSED:] T
\item[OUTPUT:] A

\end{description} \section*{\sf Common Variables}  \begin{description}

\item[Modifies]    LBL     LORBC
\item[Transmits as argument]  IWCUBF  IWFOCK  IWMULP  IWTNAO  JPRINT  LFNPR   NBAS
             NDIM
\item[Uses]  IWCUBF  IWDM    IWFOCK  IWMULP  IWTNAO  JPRINT  LANG
             LCTR    LFNPR   MXAOLM  NATOMS  NBAS    NDIM    OPEN

\end{description}  \section*{\sf External Subprograms}  \begin{description}

\item[Calls]       AOUT    CONSOL  DFGORB  FEAOMO  FEDXYZ  FEFAO   FEPNAO
             FESNAO  FESRAW  FETNAO  FRMTMO  IOINQR  LBLAO   LBLNAO
             NAO     NAOANL  RDTNAO  SIMTRM  SIMTRS  SVDNAO  SVPPAO
             SVSNAO  SVTNAO  WRARC   WRBAS   WRTNAO
\item[Called by]   NBO

\end{description}
@a
C**************************************************************************
C
C  nao/nbo/nlmo formation routines: (called by sr nbo)
C
C      subroutine naodrv(dm,t,a)
C      subroutine naosim(dm,t,a)
C      subroutine dmnao(dm,t,a)
C      subroutine dmsim(dm,t,a)
C      subroutine nbodrv(dm,t,a)
C
C**************************************************************************
      subroutine naodrv(DM,T,A)
C**************************************************************************
      implicit none
      double precision A , Accthr , Athr , Crtset , DM , Dthr , E2thr ,
     &                 Ethr , one , Prjset , Pthr , T , Thrset
      integer i , i1 , i2 , i3 , i4 , i5 , i6 , i7 , i8 , i9 , Iatcr ,
     &        Iatno , Ichoos , ictran , idtran , Ino , io , ioinqr ,
     &        Iprint , iprnt
      integer Ipseud , iread , Ispin , it , Iw3c , Iwapol , Iwcubf ,
     &        Iwdetl , Iwdm , Iwfock , Iwhybs , Iwmulp , Iwpnao ,
     &        iwrit , Iwtnab , Iwtnao , Iwtnbo , ix , Iznuc , Jcore
      integer Jprint , Kopt , Label , Lang , Larc , Lbl , Lctr , Lfnao ,
     &        Lfnarc , Lfndaf , Lfndef , Lfndm , Lfnin , Lfnmo ,
     &        Lfnnab , Lfnnao , Lfnnbo , Lfnnho , Lfnnlm , Lfnpna
      integer Lfnpnb , Lfnpnh , Lfnpnl , Lfnppa , Lfnpr , Ll , Lorb ,
     &        Lorbc , Lstemt , Lstocc , Lu , MAXATM , MAXBAS , Munit ,
     &        Mxao , Mxaolm , Mxbo , Naoctr , Naol , Natoms
      integer Nbas , nblock , Ndim , Norbs
C
C  driver subroutine to calculate natural atomic orbitals (naos)
C  given 1-particle density matrix in an arbitrary atom-centered
C  atomic orbital basis set.
C
C        t = overlap matrix for the primitive AO basis
C             (on return, this is the AO to NAO transformation matrix)
C       dm = density matrix in the primitive AO basis
C               (or bond-order matrix, if iwdm = 1)
C
C   the spin nature of dm is indicated by:
C    ispin =  0: spinless  (closed shell)
C    ispin = +2: alpha spin
C    ispin = -2: spin
C   (ispin is the reciprocal of the s(z) quantum no.)
C
C        a = scratch storage from the main program.  the location of a(1)
C               is in the common block /scm/ in the main program,
C               after the storage for the matrices 's','dm'
C             ('a' is the vector which is partitioned
C                   according to the storage needs of each program run)
C     atom, basis, option, nbinfo: common blocks with data transfered from
C        from the input programs.
C
C-----------------------------------------------------------------------------
      parameter (MAXATM=99,MAXBAS=500)
      common /nbflag/ Rohf , Uhf , Ci , Open , Complx , Alpha , Beta ,
     &                Mcscf , Auhf , Ortho
      logical Rohf , Uhf , Ci , Open , Complx , Alpha , Beta , Mcscf ,
     &        Auhf , Ortho
      common /nbinfo/ Ispin , Natoms , Ndim , Nbas , Mxbo , Mxao ,
     &                Mxaolm , Munit
      common /nbopt / Iwdm , Iw3c , Iwapol , Iwhybs , Iwpnao , Iwtnao ,
     &                Iwtnab , Iwtnbo , Iwfock , Iwcubf , Ipseud ,
     &                Kopt , Iprint , Iwdetl , Iwmulp , Ichoos , Jcore ,
     &                Jprint(60)
      common /nbio  / Lfnin , Lfnpr , Lfnao , Lfnpna , Lfnnao , Lfnpnh ,
     &                Lfnnho , Lfnpnb , Lfnnbo , Lfnpnl , Lfnnlm ,
     &                Lfnmo , Lfndm , Lfnnab , Lfnppa , Lfnarc ,
     &                Lfndaf , Lfndef
      common /nbatom/ Iatno(MAXATM) , Ino(MAXATM) , Norbs(MAXATM) ,
     &                Ll(MAXATM) , Lu(MAXATM) , Iznuc(MAXATM) ,
     &                Iatcr(MAXATM)
      common /nbbas / Label(MAXBAS,6) , Naoctr(MAXBAS) , Naol(MAXBAS) ,
     &                Lstocc(MAXBAS) , Lstemt(MAXBAS) , Larc(MAXBAS) ,
     &                Lbl(MAXBAS) , Lorbc(MAXBAS) , Lorb(MAXBAS)
      common /nbthr / Thrset , Prjset , Accthr , Crtset , E2thr , Athr ,
     &                Pthr , Ethr , Dthr
      common /nbao  / Lctr(MAXBAS) , Lang(MAXBAS)
C
      dimension T(Ndim,Ndim) , DM(Ndim,Ndim) , A(1)
      character*80 title
C
      data one/1.0D0/
      data iprnt , iwrit , iread/4HPRNT , 4HWRIT , 4HREAD/
C
C  form labels for the raw AO basis set:
C
      call lblao
C
C  copy the AO centers and labels from /nbao/ to /nbbas/:
C
      do 100 i = 1 , Nbas
         Lbl(i) = Lctr(i)
         Lorbc(i) = Lang(i)
 100  continue
C
C  write out the AO basis set information:
C
      if ( Jprint(22).gt.0 ) call wrbas(A,A,Jprint(22))
C
C  write out the archive file:
C
      if ( Jprint(7).ne.0 ) call wrarc(A,A,Jprint(7))
C
C  output the AO overlap matrix:
C
      io = ioinqr(Jprint(39))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         title = 'AO overlap matrix:'
         call aout(T,Ndim,-Nbas,Nbas,title,1,Jprint(39))
      endif
C
C  output the ao-mo transformation matrix:
C
      io = ioinqr(Jprint(26))
      if ( .not.Open .and. (io.eq.iprnt .or. io.eq.iwrit) ) then
         call feaomo(A,it)
         if ( it.ne.0 ) then
            title = 'MOs in the AO basis:'
            call aout(A,Ndim,Nbas,Nbas,title,1,Jprint(26))
         endif
      endif
C
C  output the AO fock matrix:
C
      io = ioinqr(Jprint(40))
      if ( .not.Open .and. (io.eq.iprnt .or. io.eq.iwrit) ) then
         call fefao(A,Iwfock)
         if ( Iwfock.ne.0 ) then
            title = 'AO Fock matrix:'
            call aout(A,Ndim,-Nbas,Nbas,title,1,Jprint(40))
         endif
      endif
C
C  output the AO bond-order matrix:
C
      io = ioinqr(Jprint(42))
      if ( Iwdm.eq.1 .and. (io.eq.iprnt .or. io.eq.iwrit) ) then
         title = 'Spinless AO bond-order matrix:'
         call aout(DM,Ndim,-Nbas,Nbas,title,1,Jprint(42))
      endif
C
C  convert the bond-order matrix to the density matrix:
C
      if ( Iwdm.ne.0 ) call simtrm(DM,T,A,Ndim,Nbas,Iwmulp,Iwcubf)
C
C  output the AO density matrix:
C
      io = ioinqr(Jprint(27))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         title = 'Spinless AO density matrix:'
         call aout(DM,Ndim,-Nbas,Nbas,title,1,Jprint(27))
      endif
C
C  output the AO dipole matrices:
C
      io = ioinqr(Jprint(50))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         ix = 1
         call fedxyz(A,ix)
         if ( ix.ne.0 ) then
            title = 'AO x dipole integrals:'
            call aout(A,Ndim,-Nbas,Nbas,title,1,Jprint(50))
         endif
         ix = 2
         call fedxyz(A,ix)
         if ( ix.ne.0 ) then
            title = 'AO y dipole integrals:'
            call aout(A,Ndim,-Nbas,Nbas,title,1,Jprint(50))
         endif
         ix = 3
         call fedxyz(A,ix)
         if ( ix.ne.0 ) then
            title = 'AO z dipole integrals:'
            call aout(A,Ndim,-Nbas,Nbas,title,1,Jprint(50))
         endif
      endif
C
C  allocate scratch common for NAO routines:
C
C  a(i1) = v(ndim)  (also used for guide(natoms,natoms))
C  a(i2) = renorm(ndim)
C  a(i3) = blk(ndim,ndim)
C  a(i4) = sblk(mxaolm,mxaolm)
C  a(i5) = eval(ndim)
C  a(i6) = c(mxaolm,mxaolm)
C  a(i7) = evect(mxaolm,mxaolm)
C  a(i8) = eval2(ndim)
C  leave this last in the list since these are integers:
C  a(i9) = listao(mxaolm,9)
C
      nblock = Mxaolm*Mxaolm
      i1 = 1
      i2 = i1 + Ndim
      i3 = i2 + Ndim
      i4 = i3 + Ndim*Ndim
      i5 = i4 + nblock
      i6 = i5 + Ndim
      i7 = i6 + nblock
      i8 = i7 + nblock
      i9 = i8 + Ndim
C     iend = i9 + (9*mxaolm + 1)/2
C
C  read in t-nao, NAO labels, the pnao overlap matrix, and compute the
C  NAO density matrix: (note that t contains the pnao overlap matrix
C  after rdtnao is called)
C
      if ( ioinqr(Iwtnao).eq.iread ) then
         call rdtnao(DM,T,A(i1),Iwtnao)
         goto 300
      endif
C
C  transform all sets of cartesian d,f,g orbitals, and relabel all orbitals:
C
      call dfgorb(A(i2),DM,T,ictran,Iwcubf,0,Lfnpr)
C
C  store pure AO density matrix in scratch storage:
C
      call svppao(DM)
C
C  consolidate density matrix and overlap matrix in dm:
C
      call consol(DM,T,Ndim,Nbas)
C
C  find natural atomic orbital basis set transformation t from dm:
C  (upon return, dm contains the full NAO density matrix)
C
      call nao(T,DM,A(i1),A(i3),A(i4),A(i5),A(i6),A(i7),A(i8),A(i9),
     &         nblock)
C
C  if d orbitals were transformed, transform the NAO transformation t
C  so that t is the transform from the original ao's to the nao's:
C
      if ( ictran.ne.0 ) call dfgorb(A(i2),DM,T,idtran,Iwcubf,1,Lfnpr)
C
C  save tnao for later use:
C
      call svtnao(T)
C
C  if d orbitals were transformed, transform the pnao transformation
C  so that it is the transform from the original ao's to the pnao's:
C
      call fepnao(A(i3))
C
C  for case that rpnaos are written to disk, set occupancy weights to -1
C  as a signal that they should be recomputed:
C
      do 200 i = 0 , Nbas - 1
         A(i4+i) = -one
 200  continue
C
      if ( ictran.ne.0 ) call dfgorb(A(i2),DM,A(i3),idtran,Iwcubf,1,
     &                               Lfnpr)
C
C  compute non-orthogonal NAO overlap matrix, spnao:
C
      call fesraw(T)
      call simtrs(T,A(i3),A(i4),Ndim,Nbas)
      call svsnao(T)
C
C  write t-nao, NAO labels, and the pnao overlap matrix:
C
      if ( ioinqr(Iwtnao).eq.iwrit ) call wrtnao(T,Iwtnao)
C
C  dm is now the density matrix in the NAO basis
C  t is the non-orthogonal pnao overlap matrix  (!!!)
C
 300  i1 = 1
      i2 = i1 + Natoms*Natoms
      i3 = i2 + Natoms
      i4 = i3 + Natoms*Natoms
      i5 = i4 + Ndim*Ndim
C     iend = i5 + ndim
      call naoanl(DM,T,A(i1),A(i2),A(i3),A(i4),A(i5))
C
C  do not destroy the matrix at a(i1).  this holds the wiberg bond
C  index which needs to be passed to the NBO routines.
C
C  save the NAO density matrix:
C
      call svdnao(DM)
C
C  form the NAO labels:
C
      call lblnao
C
C  reorganize the scratch vector:
C
      i1 = 1
      i2 = i1 + Natoms*Natoms
C     iend = i2 + ndim*ndim
C
C  output the ao-pnao transformation matrix:
C
      io = ioinqr(Jprint(44))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         call fepnao(T)
         title = 'PNAOs in the AO basis:'
         call aout(T,Ndim,Nbas,Nbas,title,1,Jprint(44))
      endif
C
C  output the pnao overlap matrix:
C
      io = ioinqr(Jprint(19))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         call fesnao(A(i2))
         title = 'PNAO overlap matrix:'
         call aout(A(i2),Ndim,-Nbas,Nbas,title,2,Jprint(19))
      endif
C
C  fetch the ao-nao transformation from the NBO daf:
C
      call fetnao(T)
C
C  print the ao-nao transformation matrix:
C
      if ( ioinqr(Iwtnao).eq.iprnt ) then
         title = 'NAOs in the AO basis:'
         call aout(T,Ndim,Nbas,Nbas,title,1,Iwtnao)
      endif
C
C  output the NAO dipole matrices:
C
      io = ioinqr(Jprint(51))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         ix = 1
         call fedxyz(A(i2),ix)
         if ( ix.ne.0 ) then
            call simtrs(A(i2),T,A(i3),Ndim,Nbas)
            title = 'NAO x dipole integrals:'
            call aout(A(i2),Ndim,-Nbas,Nbas,title,2,Jprint(51))
         endif
         ix = 2
         call fedxyz(A(i2),ix)
         if ( ix.ne.0 ) then
            call simtrs(A(i2),T,A(i3),Ndim,Nbas)
            title = 'NAO y dipole integrals:'
            call aout(A(i2),Ndim,-Nbas,Nbas,title,2,Jprint(51))
         endif
         ix = 3
         call fedxyz(A(i2),ix)
         if ( ix.ne.0 ) then
            call simtrs(A(i2),T,A(i3),Ndim,Nbas)
            title = 'NAO z dipole integrals:'
            call aout(A(i2),Ndim,-Nbas,Nbas,title,2,Jprint(51))
         endif
      endif
C
C  if this is an open shell wavefunction, don't do anything more:
C
      if ( Open ) return
C
C  output the nao-mo transformation matrix:
C
      io = ioinqr(Jprint(9))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         i1 = 1
         i2 = i1 + Natoms*Natoms
         i3 = i2 + Ndim*Ndim
         i4 = i3 + Ndim*Ndim
C       iend = i4 + ndim*(ndim+5)
         call frmtmo(T,A(i2),A(i3),A(i4),2,Jprint(9))
      endif
C
C  reorganize the scratch vector:
C
      i1 = 1
      i2 = i1 + Natoms*Natoms
      i3 = i2 + Ndim*Ndim
C     iend = i3 + ndim
C
C  output the NAO fock matrix:
C
      io = ioinqr(Jprint(31))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         call fefao(A(i2),Iwfock)
         if ( Iwfock.ne.0 ) then
            call simtrs(A(i2),T,A(i3),Ndim,Nbas)
            title = 'NAO Fock matrix:'
            call aout(A(i2),Ndim,-Nbas,Nbas,title,2,Jprint(31))
         endif
      endif
C
C  output the NAO density matrix:
C
      io = ioinqr(Jprint(35))
      if ( io.eq.iprnt .or. io.eq.iwrit ) then
         title = 'NAO density matrix:'
         call aout(DM,Ndim,-Nbas,Nbas,title,2,Jprint(35))
      endif
      return
      end
@* INDEX.
