@*wrarc.
\section*{\sf Dummy Arguments}  \begin{description}

\item[INPUT:] SCR
\item[OUTPUT:] ISCR
\item[INPUT:] LFN

\end{description} \section*{\sf Common Variables}  \begin{description}

\item[Modifies]    ALPHA   BETA    IWFOCK
\item[Transmits as argument]  NATOMS  NBAS    NDIM
\item[Uses]  IATNO   IWCUBF  IWDM    IWFOCK  IZNUC   LANG    LCTR
             LFNPR   MUNIT   NATOMS  NBAS    NDIM    OPEN    ORTHO

\end{description}  \section*{\sf External Subprograms}  \begin{description}

\item[Calls]       FEAOMO  FEBAS   FECOOR  FEDRAW  FEDXYZ  FEFAO   FESRAW
             FETITL  IDIGIT  PACK
\item[Called by]   NAODRV  NAOSIM

\end{description}
@a
C*****************************************************************************
      subroutine wrarc(SCR,ISCR,LFN)
C*****************************************************************************
      implicit none
      double precision ablnks , acd , acentr , acf , acp , acs , aexp ,
     &                 alabel , ancomp , anexp , anprim , anptr ,
     &                 anshll , SCR , str , zero
      integer i , i1 , i2 , i3 , i4 , i5 , i6 , i7 , i8 , iaomo ,
     &        Iatcr , Iatno , Ichoos , idip , iflg , ii , ik , Ino ,
     &        Iprint , Ipseud
      integer ISCR , Ispin , Iw3c , Iwapol , Iwcubf , Iwdetl , Iwdm ,
     &        Iwfock , Iwhybs , Iwmulp , Iwpnao , Iwtnab , Iwtnao ,
     &        Iwtnbo , Iznuc , j , Jcore , Jprint , k , kbas
      integer kblnk , kbodm , kcal , kcubf , kend , keq , kev , kgen ,
     &        knat , kopen , Kopt , kortho , kupper , l2 , Lang , Lctr ,
     &        LFN , Lfnao , Lfnarc , Lfndaf
      integer Lfndef , Lfndm , Lfnin , Lfnmo , Lfnnab , Lfnnao ,
     &        Lfnnbo , Lfnnho , Lfnnlm , Lfnpna , Lfnpnb , Lfnpnh ,
     &        Lfnpnl , Lfnppa , Lfnpr , Ll , Lu , MAXATM , MAXBAS , MAXD
      integer Munit , Mxao , Mxaolm , Mxbo , Natoms , Nbas , nc , nd ,
     &        Ndim , nexp , nint , nl , Norbs , nreal , nshell , nu
C
      parameter (MAXD=4)
C
      parameter (MAXATM=99,MAXBAS=500)
      common /nbinfo/ Ispin , Natoms , Ndim , Nbas , Mxbo , Mxao ,
     &                Mxaolm , Munit
      common /nbflag/ Rohf , Uhf , Ci , Open , Complex , Alpha , Beta ,
     &                Mcscf , Auhf , Ortho
      logical Rohf , Uhf , Ci , Open , Complex , Alpha , Beta , Mcscf ,
     &        Auhf , Ortho
      common /nbio  / Lfnin , Lfnpr , Lfnao , Lfnpna , Lfnnao , Lfnpnh ,
     &                Lfnnho , Lfnpnb , Lfnnbo , Lfnpnl , Lfnnlm ,
     &                Lfnmo , Lfndm , Lfnnab , Lfnppa , Lfnarc ,
     &                Lfndaf , Lfndef
      common /nbopt / Iwdm , Iw3c , Iwapol , Iwhybs , Iwpnao , Iwtnao ,
     &                Iwtnab , Iwtnbo , Iwfock , Iwcubf , Ipseud ,
     &                Kopt , Iprint , Iwdetl , Iwmulp , Ichoos , Jcore ,
     &                Jprint(60)
      common /nbatom/ Iatno(MAXATM) , Ino(MAXATM) , Norbs(MAXATM) ,
     &                Ll(MAXATM) , Lu(MAXATM) , Iznuc(MAXATM) ,
     &                Iatcr(MAXATM)
      common /nbao  / Lctr(MAXBAS) , Lang(MAXBAS)
C
      dimension SCR(1) , ISCR(1) , ik(MAXD)
      dimension kgen(7) , knat(6) , kbas(4) , kopen(4) , kortho(5) ,
     &          kupper(5) , kbodm(4) , kev(2) , kcubf(6) , kend(4) ,
     &          kcal(4)
C
      data kgen/1H$ , 1HG , 1HE , 1HN , 1HN , 1HB , 1HO/ , kbas/1HN ,
     &     1HB , 1HA , 1HS/ , knat/1HN , 1HA , 1HT , 1HO , 1HM , 1HS/ ,
     &     kopen/1HO , 1HP , 1HE , 1HN/ , kortho/1HO , 1HR , 1HT , 1HH ,
     &     1HO/ , kupper/1HU , 1HP , 1HP , 1HE , 1HR/ , kbodm/1HB ,
     &     1HO , 1HD , 1HM/ , kev/1HE , 1HV/ , kend/1H$ , 1HE , 1HN ,
     &     1HD/ , kcubf/1HC , 1HU , 1HB , 1HI , 1HC , 1HF/ , kcal/1HK ,
     &     1HC , 1HA , 1HL/
      data kblnk , keq/1H  , 1H=/
      data ablnks , acentr , alabel/8H         , 8HCENTER = ,
     &     8H LABEL =/
      data anshll , anexp , ancomp/8HNSHELL = , 8H  NEXP = , 8H NCOMP =/
      data anprim , anptr , aexp/8H NPRIM = , 8H  NPTR = , 8H   EXP =/
      data acs , acp , acd , acf/8H    CS = , 8H    CP = , 8H    CD = ,
     &     8H    CF =/
      data zero/0.0D0/
C
C  write the archive file to lfn:
C
C  this routine has been written assuming nbas = ndim.  skip if
C  this condition is not satisfied:
C
      if ( Nbas.ne.Ndim ) then
         write (Lfnpr,99001)
         return
      endif
C
C  form the $gennbo keylist in iscr:
C
      nc = 0
      do 100 i = 1 , 7
         nc = nc + 1
         ISCR(nc) = kgen(i)
 100  continue
      nc = nc + 1
      ISCR(nc) = kblnk
      nc = nc + 1
      ISCR(nc) = kblnk
C
C  add the number of atoms and basis functions:
C
      do 200 i = 1 , 6
         nc = nc + 1
         ISCR(nc) = knat(i)
 200  continue
      nc = nc + 1
      ISCR(nc) = keq
      call idigit(Natoms,ik,nd,MAXD)
      do 300 i = 1 , nd
         nc = nc + 1
         ISCR(nc) = ik(i)
 300  continue
      nc = nc + 1
      ISCR(nc) = kblnk
      nc = nc + 1
      ISCR(nc) = kblnk
C
      do 400 i = 1 , 4
         nc = nc + 1
         ISCR(nc) = kbas(i)
 400  continue
      nc = nc + 1
      ISCR(nc) = keq
      call idigit(Nbas,ik,nd,MAXD)
      do 500 i = 1 , nd
         nc = nc + 1
         ISCR(nc) = ik(i)
 500  continue
      nc = nc + 1
      ISCR(nc) = kblnk
      nc = nc + 1
      ISCR(nc) = kblnk
C
C  if open shell, add the open keyword:
C
      if ( Open ) then
         do 550 i = 1 , 4
            nc = nc + 1
            ISCR(nc) = kopen(i)
 550     continue
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  if the AO basis is orthogonal, add the ortho keyword:
C
      if ( Ortho ) then
         do 600 i = 1 , 5
            nc = nc + 1
            ISCR(nc) = kortho(i)
 600     continue
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  only upper triangular portions of symmetric matrices will be given:
C
      do 700 i = 1 , 5
         nc = nc + 1
         ISCR(nc) = kupper(i)
 700  continue
      nc = nc + 1
      ISCR(nc) = kblnk
      nc = nc + 1
      ISCR(nc) = kblnk
C
C  enter the bond-order matrix, bodm, if possible:
C
      if ( Iwdm.eq.1 ) then
         do 750 i = 1 , 4
            nc = nc + 1
            ISCR(nc) = kbodm(i)
 750     continue
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  add ev if the energy units are in electron volts:
C
      if ( Munit.eq.1 ) then
         nc = nc + 1
         ISCR(nc) = kev(1)
         nc = nc + 1
         ISCR(nc) = kev(2)
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  add kcal if the energy units are in kcal/mol:
C
      if ( Munit.eq.1 ) then
         nc = nc + 1
         ISCR(nc) = kcal(1)
         nc = nc + 1
         ISCR(nc) = kcal(2)
         nc = nc + 1
         ISCR(nc) = kcal(3)
         nc = nc + 1
         ISCR(nc) = kcal(4)
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  add cubicf if these types of orbitals are being used:
C
      if ( Iwcubf.ne.0 ) then
         do 800 i = 1 , 6
            nc = nc + 1
            ISCR(nc) = kcubf(i)
 800     continue
         nc = nc + 1
         ISCR(nc) = kblnk
         nc = nc + 1
         ISCR(nc) = kblnk
      endif
C
C  add $end:
C
      do 900 i = 1 , 4
         nc = nc + 1
         ISCR(nc) = kend(i)
 900  continue
C
C  write the $gennbo keylist to the archive file:
C
      write (LFN,99002) (ISCR(i),i=1,nc)
C
C  write the $nbo keylist to the archive file:
C
      write (LFN,99003)
C
C  write the $coord data list to the archive file:
C
      write (LFN,99004)
      call fetitl(SCR)
      write (LFN,99005) (SCR(i),i=1,10)
      call fecoor(SCR)
      j = 1
      do 1000 i = 1 , Natoms
         write (LFN,99006) Iatno(i) , Iznuc(i) , SCR(j) , SCR(j+1) ,
     &                     SCR(j+2)
         j = j + 3
 1000 continue
      write (LFN,99007)
C
C  write the $basis datalist to the archive file (info from /nbao/):
C
      write (LFN,99008)
      nint = 17
      str = acentr
      do 1100 i = 1 , (Nbas-1)/nint + 1
         nl = (i-1)*nint + 1
         nu = min0(nl+nint-1,Nbas)
         write (LFN,99009) str , (Lctr(j),j=nl,nu)
         str = ablnks
 1100 continue
      str = alabel
      do 1200 i = 1 , (Nbas-1)/nint + 1
         nl = (i-1)*nint + 1
         nu = min0(nl+nint-1,Nbas)
         write (LFN,99009) str , (Lang(j),j=nl,nu)
         str = ablnks
 1200 continue
      write (LFN,99007)
C
C  write the $contract datalist to the archive file:
C
C  fetch the basis set info from the NBO daf:
C
      call febas(nshell,nexp,ISCR)
C
C  partition the scratch vector:
C
      i1 = 3                     
C iscr(i1) = ncomp(1..nshell)
      i2 = i1 + nshell           
C iscr(i2) = nprim(1..nshell)
      i3 = i2 + nshell           
C iscr(i3) = nptr(1..nshell)
      i4 = 2 + (3*nshell+1)/2    
C scr(i4)  = exp(1..nexp)
      i5 = i4 + nexp             
C scr(i5)  = cs(1..nexp)
      i6 = i5 + nexp             
C scr(i6)  = cp(1..nexp)
      i7 = i6 + nexp             
C scr(i7)  = cd(1..nexp)
      i8 = i7 + nexp             
C scr(i8)  = cf(1..nexp)
C     iend = i8 + nexp
C
C  if nshell is zero, then no basis set info was ever stored on
C  the daf:
C
      if ( nshell.gt.0 ) then
C
C  write out numbers of shells and orbital exponents:
C
         write (LFN,99010)
         write (LFN,99009) anshll , nshell
         write (LFN,99009) anexp , nexp
C
C  write out the number of components in each shell:
C
         nint = 17
         str = ancomp
         do 1250 i = 1 , (nshell-1)/nint + 1
            nl = (i-1)*nint + 1
            nu = min0(nl+nint-1,nshell)
            write (LFN,99009) str , (ISCR(j),j=i1+nl-1,i1+nu-1)
            str = ablnks
 1250    continue
C
C  write out the number of primitives in each shell:
C
         str = anprim
         do 1300 i = 1 , (nshell-1)/nint + 1
            nl = (i-1)*nint + 1
            nu = min0(nl+nint-1,nshell)
            write (LFN,99009) str , (ISCR(j),j=i2+nl-1,i2+nu-1)
            str = ablnks
 1300    continue
C
C  write out pointer array which maps orbital exponents and coefficients
C  onto each shell:
C
         str = anptr
         do 1350 i = 1 , (nshell-1)/nint + 1
            nl = (i-1)*nint + 1
            nu = min0(nl+nint-1,nshell)
            write (LFN,99009) str , (ISCR(j),j=i3+nl-1,i3+nu-1)
            str = ablnks
 1350    continue
C
C  write out orbital exponents:
C
         nreal = 4
         str = aexp
         do 1400 i = 1 , (nexp-1)/nreal + 1
            nl = (i-1)*nreal + 1
            nu = min0(nl+nreal-1,nexp)
            write (LFN,99011) str , (SCR(j),j=i4+nl-1,i4+nu-1)
            str = ablnks
 1400    continue
C
C  write out the orbital coefficients for each angular symmetry type
C  unless there are no basis functions of that type:
C
         do 1450 i = 1 , 4
            if ( i.eq.1 ) then
               str = acs
               ii = i5
            elseif ( i.eq.2 ) then
               str = acp
               ii = i6
            elseif ( i.eq.3 ) then
               str = acd
               ii = i7
            elseif ( i.eq.4 ) then
               str = acf
               ii = i8
            endif
            iflg = 0
            do 1420 j = ii , ii + nexp - 1
               if ( SCR(j).ne.zero ) iflg = 1
 1420       continue
            if ( iflg.eq.1 ) then
               do 1430 j = 1 , (nexp-1)/nreal + 1
                  nl = (j-1)*nreal + 1
                  nu = min0(nl+nreal-1,nexp)
                  write (LFN,99011) str , (SCR(k),k=ii+nl-1,ii+nu-1)
                  str = ablnks
 1430          continue
            endif
 1450    continue
         write (LFN,99007)
      endif
C
C  write the $overlap datalist unless the AO basis is orthogonal:
C
      l2 = Ndim*(Ndim+1)/2
      if ( .not.Ortho ) then
         write (LFN,99012)
         call fesraw(SCR)
         l2 = Ndim*(Ndim+1)/2
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
         write (LFN,99007)
      endif
C
C  write the $density datalist:
C
      write (LFN,99014)
      if ( Open ) then
         Alpha = .true.
         Beta = .false.
         call fedraw(SCR,SCR)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
         Alpha = .false.
         Beta = .true.
         call fedraw(SCR,SCR)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
      else
         Alpha = .false.
         Beta = .false.
         call fedraw(SCR,SCR)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
      endif
      write (LFN,99007)
C
C  write the $fock datalist:
C
      if ( Open ) then
         Alpha = .true.
         Beta = .false.
         Iwfock = 1
         call fefao(SCR,Iwfock)
         if ( Iwfock.ne.0 ) then
            write (LFN,99015)
            call pack(SCR,Ndim,Nbas,l2)
            write (LFN,99013) (SCR(i),i=1,l2)
            Alpha = .false.
            Beta = .true.
            call fefao(SCR,Iwfock)
            call pack(SCR,Ndim,Nbas,l2)
            write (LFN,99013) (SCR(i),i=1,l2)
            write (LFN,99007)
         endif
      else
         Alpha = .false.
         Beta = .false.
         Iwfock = 1
         call fefao(SCR,Iwfock)
         if ( Iwfock.ne.0 ) then
            write (LFN,99015)
            call pack(SCR,Ndim,Nbas,l2)
            write (LFN,99013) (SCR(i),i=1,l2)
            write (LFN,99007)
         endif
      endif
C
C  write the $lcaomo datalist:
C
      if ( Open ) then
         Alpha = .true.
         Beta = .false.
         call feaomo(SCR,iaomo)
         if ( iaomo.eq.1 ) then
            write (LFN,99016)
            write (LFN,99013) (SCR(i),i=1,Ndim*Ndim)
            Alpha = .false.
            Beta = .true.
            call feaomo(SCR,iaomo)
            write (LFN,99013) (SCR(i),i=1,Ndim*Ndim)
            write (LFN,99007)
         endif
      else
         Alpha = .false.
         Beta = .false.
         call feaomo(SCR,iaomo)
         if ( iaomo.eq.1 ) then
            write (LFN,99016)
            write (LFN,99013) (SCR(i),i=1,Ndim*Ndim)
            write (LFN,99007)
         endif
      endif
C
C  write the $dipole datalist:
C
      idip = 1
      call fedxyz(SCR,idip)
      if ( idip.ne.0 ) then
         write (LFN,99017)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
         idip = 2
         call fedxyz(SCR,idip)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
         idip = 3
         call fedxyz(SCR,idip)
         call pack(SCR,Ndim,Nbas,l2)
         write (LFN,99013) (SCR(i),i=1,l2)
         write (LFN,99007)
      endif
      return
C
99001 format (/1x,'The routine which writes the ARCHIVE file assumes ',
     &        'NBAS = NDIM.  Since',/1x,
     &        'this condition is not satisfied, ',
     &        'the ARCHIVE file will not be written.')
99002 format (1x,78A1)
99003 format (1x,'$NBO  $END')
99004 format (1x,'$COORD')
99005 format (1x,9A8,a6)
99006 format (1x,2I5,3F15.6)
99007 format (1x,'$END')
99008 format (1x,'$BASIS')
99009 format (1x,1x,a8,1x,17(i3,1x))
99010 format (1x,'$CONTRACT')
99011 format (1x,1x,a8,1x,4(e15.7,1x))
99012 format (1x,'$OVERLAP')
99013 format (1x,1x,5E15.7)
99014 format (1x,'$DENSITY')
99015 format (1x,'$FOCK')
99016 format (1x,'$LCAOMO')
99017 format (1x,'$DIPOLE')
      end
@* INDEX.
