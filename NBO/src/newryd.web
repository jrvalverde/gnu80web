@*newryd.
\section*{\sf Dummy Arguments}  \begin{description}

\item[PASSED:] T
\item[OUTPUT:] S
\item[PASSED:] TPNAO
\item[PASSED:] DMBLK
\item[PASSED:] SBLK
\item[PASSED:] EVECT
\item[PASSED:] OCC
\item[PASSED:] EVAL
\item[PASSED:] EVAL2
\item[PASSED:] LIST
\item[INPUT:] IRPNAO

\end{description} \section*{\sf Common Variables}  \begin{description}

\item[Modifies]     NOTHING 
\item[Transmits as argument]  LARC
\item[Uses]  LARC    LSTOCC  MXAOLM  NAOCTR  NAOL    NBAS    NDIM

\end{description}  \section*{\sf External Subprograms}  \begin{description}

\item[Calls]       FEPNAO  RYDIAG  SVPNAO
\item[Called by]   NAO

\end{description}
@a
C*****************************************************************************
      subroutine newryd(T,S,TPNAO,DMBLK,SBLK,EVECT,OCC,EVAL,EVAL2,LIST,
     &                  IRPNAO)
C*****************************************************************************
      implicit none
      double precision DMBLK , EVAL , EVAL2 , EVECT , OCC , one , S ,
     &                 SBLK , T , TPNAO
      integer i , iadd , il , ilbl , im1 , imax , inao , iorb , IRPNAO ,
     &        Ispin , j , jorb , jorbl , Label , Larc , Lbl , LIST ,
     &        Lorb , Lorbc , Lstemt
      integer Lstocc , MAXATM , MAXBAS , Munit , Mxao , Mxaolm , Mxbo ,
     &        Naoctr , Naol , Natoms , Nbas , nc , Ndim , nl , nm ,
     &        nrydc , nskip , nstart
      parameter (MAXATM=99,MAXBAS=500)
      common /nbinfo/ Ispin , Natoms , Ndim , Nbas , Mxbo , Mxao ,
     &                Mxaolm , Munit
      common /nbbas / Label(MAXBAS,6) , Naoctr(MAXBAS) , Naol(MAXBAS) ,
     &                Lstocc(MAXBAS) , Lstemt(MAXBAS) , Larc(MAXBAS) ,
     &                Lbl(MAXBAS) , Lorbc(MAXBAS) , Lorb(MAXBAS)
      dimension T(Ndim,Ndim) , S(Ndim,Ndim) , TPNAO(Ndim,Ndim) ,
     &          OCC(Ndim) , DMBLK(Mxaolm,Mxaolm) , SBLK(Mxaolm,Mxaolm) ,
     &          EVAL(Nbas) , EVECT(Mxaolm,Mxaolm) , EVAL2(Nbas) ,
     &          LIST(Mxaolm)
      data one/1.0D0/
C
C  compute new rydberg naos after the schmidt orthogonalization to
C  the minimal NAO set has been done:
C
C  if requested (irpnao=jprint(11)=1), update pnao transformation with tryd:
C
      if ( IRPNAO.eq.1 ) call fepnao(TPNAO)
C
      nl = 1
      iorb = 0
 100  iorb = iorb + nl
      if ( iorb.le.Nbas ) then
         nl = 1
         ilbl = Naoctr(iorb)
         il = Naol(iorb)/100
         nm = il*2 + 1
         imax = Nbas - iorb
         do 150 iadd = 1 , imax
            jorb = iorb + iadd
            jorbl = Naol(jorb)/100
            if ( Naoctr(jorb).ne.ilbl .or. jorbl.ne.il ) goto 200
            nl = nl + 1
 150     continue
 200     nc = nl/nm
         nskip = 0
         imax = iorb - 1 + nc
         do 250 i = 1 , Nbas
            inao = Lstocc(i)
            if ( inao.ge.iorb .and. inao.le.imax ) nskip = nskip + 1
 250     continue
         if ( nskip.ne.nc ) then
            nstart = nskip + 1
            nrydc = nc - nskip
C  end of loop starting at 100
            call rydiag(T,S,TPNAO,DMBLK,SBLK,OCC,EVAL,EVECT,EVAL2,iorb,
     &                  nc,nm,nstart,nrydc,Larc,LIST,IRPNAO)
         endif
         goto 100
      endif
C  restore s:
      do 400 i = 1 , Nbas
         im1 = i - 1
         do 300 j = 1 , im1
            S(j,i) = S(i,j)
 300     continue
         S(i,i) = one
 400  continue
C
C  save updated t-pnao transformation:
C
      if ( IRPNAO.eq.1 ) call svpnao(TPNAO)
      return
      end
@* INDEX.
