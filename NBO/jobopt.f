      SUBROUTINE JOBOPT(NBOOPT)
C******************************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(KEYLEN = 9)
      LOGICAL ERROR,END,EQUAL,NEXTWD,READ
      DIMENSION NBOOPT(10)
C
      COMMON/NBFLAG/ROHF,UHF,CI,OPEN,COMPLX,ALPHA,BETA,MCSCF,AUHF,ORTHO
      LOGICAL ROHF,UHF,CI,OPEN,COMPLX,ALPHA,BETA,MCSCF,AUHF,ORTHO
      COMMON/NBINFO/ISPIN,NATOMS,NDIM,NBAS,MXBO,MXAO,MXAOLM,MUNIT
      COMMON/NBOPT/IWDM,IW3C,IWAPOL,IWHYBS,IWPNAO,IWTNAO,IWTNAB,
     + IWTNBO,IWFOCK,IWCUBF,IPSEUD,KOPT,IPRINT,IWDETL,IWMULP,ICHOOS,
     + JCORE,JPRINT(60)
      COMMON/NBIO/LFNIN,LFNPR,LFNAO,LFNPNA,LFNNAO,LFNPNH,LFNNHO,LFNPNB,
     +            LFNNBO,LFNPNL,LFNNLM,LFNMO,LFNDM,LFNNAB,LFNPPA,LFNARC,
     +            LFNDAF,LFNDEF
      COMMON/NBTHR/THRSET,PRJSET,ACCTHR,CRTSET,E2THR,ATHR,PTHR,ETHR,
     +              DTHR
C
      DIMENSION KEYWD(KEYLEN),K3CBND(6),KEPERT(6),KLFNPR(5),KTHRSH(6),
     * KDETL(6),KMULA(5),KMULOR(6),KPRJTH(6),KNBNLM(7),
     * KAOPRE(6),KNLMO(4),KNAOMO(5),KNBOMO(5),KNOBND(6),KNPA(3),
     * KSKIPB(6),KRPNAO(5),KBNDID(6),KNLMMO(6),KRESON(5),KPPNAO(7),
     * KAONAO(5),KNANBO(6),KAONBO(5),KAONLM(6),KFNBO(4),KFNLMO(5),
     * KDMNBO(5),KDMNLM(6),KPRINT(5),KNANLM(7),KSPNAO(5),KSPNHO(5),
     * KSPNBO(5),KAOINF(6),KAOPNB(6),KAOMO(4),KNAONH(6),KNHNLM(7),
     * KAONHO(5),KFNHO(4),KAOPNH(6),KFNAO(4),KNHONB(6),KSPNLM(6),
     * KRSSTR(6),KDMNHO(5),KDMNAO(5),KPLOT(4),KAOPNL(7),KDIAO(4),
     * KBEND(4),KNHOMO(5),KSAO(3),KFAO(3),KDMAO(4),KBOAO(4),KDINLM(6),
     * KNBOSM(6),KNBO(3),KDIPOL(6),KDINAO(5),KDINHO(5),KDINBO(5),
     * KNBDAF(6),KARCHV(7)
      DIMENSION KALT(4)
C
      DATA K3CBND/1H3,1HC,1HB,1HO,1HN,1HD/,KLFNPR/1HL,1HF,1HN,1HP,1HR/,
     * KTHRSH/1HT,1HH,1HR,1HE,1HS,1HH/,KEPERT/1HE,1H2,1HP,1HE,1HR,1HT/,
     * KPLOT/1HP,1HL,1HO,1HT/,KDETL/1HD,1HE,1HT,1HA,1HI,1HL/,
     * KMULA/1HM,1HU,1HL,1HA,1HT/,KMULOR/1HM,1HU,1HL,1HO,1HR,1HB/,
     * KPRJTH/1HP,1HR,1HJ,1HT,1HH,1HR/,KAOPRE/1HA,1HO,1HP,1HN,1HA,1HO/,
     * KNLMO/1HN,1HL,1HM,1HO/,KNPA/1HN,1HP,1HA/,KNBO/1HN,1HB,1HO/,
     * KNAOMO/1HN,1HA,1HO,1HM,1HO/,KNBOMO/1HN,1HB,1HO,1HM,1HO/,
     * KNOBND/1HN,1HO,1HB,1HO,1HN,1HD/,KSKIPB/1HS,1HK,1HI,1HP,1HB,1HO/,
     * KRPNAO/1HR,1HP,1HN,1HA,1HO/,KBNDID/1HB,1HN,1HD,1HI,1HD,1HX/,
     * KNLMMO/1HN,1HL,1HM,1HO,1HM,1HO/,KRESON/1HR,1HE,1HS,1HO,1HN/,
     * KPPNAO/1HP,1HA,1HO,1HP,1HN,1HA,1HO/,KAONAO/1HA,1HO,1HN,1HA,1HO/,
     * KNANBO/1HN,1HA,1HO,1HN,1HB,1HO/,KAONBO/1HA,1HO,1HN,1HB,1HO/
C
      DATA KAONLM/1HA,1HO,1HN,1HL,1HM,1HO/,KFNBO/1HF,1HN,1HB,1HO/,
     * KFNLMO/1HF,1HN,1HL,1HM,1HO/,KPRINT/1HP,1HR,1HI,1HN,1HT/,
     * KDMNBO/1HD,1HM,1HN,1HB,1HO/,KDMNLM/1HD,1HM,1HN,1HL,1HM,1HO/,
     * KNANLM/1HN,1HA,1HO,1HN,1HL,1HM,1HO/,KAOMO/1HA,1HO,1HM,1HO/,
     * KSPNAO/1HS,1HP,1HN,1HA,1HO/,KSPNHO/1HS,1HP,1HN,1HH,1HO/,
     * KSPNBO/1HS,1HP,1HN,1HB,1HO/,KFNAO/1HF,1HN,1HA,1HO/,
     * KAOINF/1HA,1HO,1HI,1HN,1HF,1HO/,KAOPNB/1HA,1HO,1HP,1HN,1HB,1HO/,
     * KAONHO/1HA,1HO,1HN,1HH,1HO/,KFNHO/1HF,1HN,1HH,1HO/,
     * KAOPNH/1HA,1HO,1HP,1HN,1HH,1HO/,KRSSTR/1HR,1HE,1HS,1HS,1HT,1HR/,
     * KNBNLM/1HN,1HB,1HO,1HN,1HL,1HM,1HO/,KDIAO/1HD,1HI,1HA,1HO/,
     * KDMNHO/1HD,1HM,1HN,1HH,1HO/,KDMNAO/1HD,1HM,1HN,1HA,1HO/,
     * KBEND/1HB,1HE,1HN,1HD/,KNBOSM/1HN,1HB,1HO,1HS,1HU,1HM/,
     * KNHOMO/1HN,1HH,1HO,1HM,1HO/,KSAO/1HS,1HA,1HO/,KFAO/1HF,1HA,1HO/
C
      DATA KDMAO/1HD,1HM,1HA,1HO/,KBOAO/1HB,1HO,1HA,1HO/,
     * KDIPOL/1HD,1HI,1HP,1HO,1HL,1HE/,KNAONH/1HN,1HA,1HO,1HN,1HH,1HO/,
     * KNHNLM/1HN,1HH,1HO,1HN,1HL,1HM,1HO/,KDINAO/1HD,1HI,1HN,1HA,1HO/,
     * KNHONB/1HN,1HH,1HO,1HN,1HB,1HO/,KSPNLM/1HS,1HP,1HN,1HL,1HM,1HO/,
     * KAOPNL/1HA,1HO,1HP,1HN,1HL,1HM,1HO/,KDINHO/1HD,1HI,1HN,1HH,1HO/,
     * KDINBO/1HD,1HI,1HN,1HB,1HO/,KDINLM/1HD,1HI,1HN,1HL,1HM,1HO/,
     * KNBDAF/1HN,1HB,1HO,1HD,1HA,1HF/,
     * KARCHV/1HA,1HR,1HC,1HH,1HI,1HV,1HE/
C
      DATA KALT/1H$,1HE,1HN,1HD/
C
      DATA ZERO,ONE/0.0D0,1.0D0/
      DATA IFULL,IVAL,ILEW/4HFULL,3HVAL,3HLEW/
      DATA IPRNT,IWRIT,IREAD/4HPRNT,4HWRIT,4HREAD/
C
C  READ IN JOB OPTIONS, IN A KEYWORD DIRECTED MANNER:
C
      NUMOPT = 0
      if(NBOOPT(1).eq.1) GOTO 4500
C
C  BEGIN LOOP TO IDENTIFY KEYWORD "KEYWD":
C
      NEXTWD = .TRUE.
  100 LENG = KEYLEN
      if(NEXTWD) CALL HFLD(KEYWD,LENG,END)
      NEXTWD = .TRUE.
      if((LENG.eq.0).OR.END) GO TO 4500
      if(EQUAL(KEYWD,KALT,4)) GO TO 4500
      NUMOPT = NUMOPT + 1
C
C  KEYWORD: 3CBOND -- SEARCH FOR THREE-CENTER BONDS
C   (DEFAULT IS TO SEARCH ONLY FOR ONE- AND TWO-CENTER NBOS)
      if(.NOT.EQUAL(KEYWD,K3CBND,6)) GO TO 500
        IW3C = 1
        GO TO 100
C  KEYWORD: LFNPR -- SPECIFY OUTPUT LFN
  500 IF(.NOT.EQUAL(KEYWD,KLFNPR,5)) GO TO 510
      CALL IFLD(LFNPR,ERROR)
        if(ERROR) CALL HALT('LFNPR')
        GO TO 100
C  KEYWORD: THRESH -- SPECIFY FIXED OCCUPANCY THRESHOLD FOR NBO SEARCH
  510 IF(.NOT.EQUAL(KEYWD,KTHRSH,6)) GO TO 540
      CALL RFLD(THRSET,ERROR)
        if(ERROR) CALL HALT('THRESH')
        GO TO 100
C  KEYWORD: DETAIL -- PRINT DETAILS OF NBO SEARCH PROCEDURE
  540 IF(.NOT.EQUAL(KEYWD,KDETL,6))  GO TO 550
        IWDETL = 1
        GO TO 100
C  KEYWORD: MULAT -- PRINT MULLIKEN POPULATIONS BY ATOM
  550 IF(.NOT.EQUAL(KEYWD,KMULA,5))  GO TO 560
        IWMULP = 1
        GO TO 100
C  KEYWORD: MULORB -- PRINT MULLIKEN POPULATIONS BY ORBITAL AND ATOM
  560 IF(.NOT.EQUAL(KEYWD,KMULOR,6)) GO TO 580
        IWMULP = 2
        GO TO 100
C  KEYWORD: PRJTHR -- USER SETS VALUE OF PROJECTION THRESHOLD FOR NBO SEARCH
C           FOR REJECTING LINEARLY DEPENDENT HYBRIDS
  580 IF(.NOT.EQUAL(KEYWD,KPRJTH,6)) GO TO 610
      CALL RFLD(PRJSET,ERROR)
        if(ERROR) CALL HALT('PRJTHR')
        GO TO 100
C  KEYWORD: FNBO -- PRINT NBO FOCK MATRIX
  610 IF(.NOT.EQUAL(KEYWD,KFNBO,4)) GO TO 620
        JPRINT(37) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(37),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(37).eq.IVAL) JPRINT(37) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AOPNAO -- OUTPUT RAW AO TO PNAO TRANSFORMATION
  620 IF(.NOT.EQUAL(KEYWD,KAOPRE,6)) GO TO 640
        JPRINT(44) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(44),LFNPNA,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(44).eq.IVAL) JPRINT(44) = IFULL
          if(JPRINT(44).eq.ILEW) JPRINT(44) = IFULL
        END IF
        GO TO 100
C  KEYWORD: NLMOMO -- COMPUTE AND PRINT NLMO TO MO TRANSF.
  640 IF(.NOT.EQUAL(KEYWD,KNLMMO,6)) GO TO 650
        JPRINT(8) = 1
        JPRINT(13) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(13),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
        END IF
        GO TO 100
C  KEYWORD: NLMO -- COMPUTE AND PRINT NLMOS
  650 IF(.NOT.EQUAL(KEYWD,KNLMO,4))  GO TO 660
        if(LENG.ne.4) GO TO 660
        JPRINT(8) = 1
        GO TO 100
C  KEYWORD: NAOMO -- COMPUTE AND PRINT NAO TO MO TRANSF.
  660 IF(.NOT.EQUAL(KEYWD,KNAOMO,5)) GO TO 670
        JPRINT(9) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(9),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
        END IF
        GO TO 100
C  KEYWORD: NBOMO -- COMPUTE AND PRINT NBO TO MO TRANSF.
  670 IF(.NOT.EQUAL(KEYWD,KNBOMO,5)) GO TO 680
        JPRINT(45) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(45),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
        END IF
        GO TO 100
C  KEYWORD: NOBOND -- COMPUTE ONLY ONE-CENTER NBOS
  680 IF(.NOT.EQUAL(KEYWD,KNOBND,6)) GO TO 690
        JPRINT(10) = 1
        GO TO 100
C  KEYWORD: SKIPBO -- SKIP NBO PROCEDURE
  690 IF(.NOT.EQUAL(KEYWD,KSKIPB,6)) GO TO 700
        JPRINT(1) = 1
        GO TO 100
C  KEYWORD: RPNAO -- COMPUTE REVISED PURE AO TO PNAO TRANSF.
  700 IF(.NOT.EQUAL(KEYWD,KRPNAO,5)) GO TO 710
        JPRINT(11) = 1
        GO TO 100
C  KEYWORD: BNDIDX -- PRINT BOND INDICES
  710 IF(.NOT.EQUAL(KEYWD,KBNDID,6)) GO TO 730
        JPRINT(12) = 1
        GO TO 100
C  KEYWORD: RESONANCE -- ALLOW STRONGLY "NON-LEWIS" NBO OCCUPANCIES
C   (OVERRIDES AUTOMATIC SHUTDOWN OF NBO PROCEDURE IN STRONGLY
C    DELOCALIZED CASES)
  730 IF(.NOT.EQUAL(KEYWD,KRESON,5)) GO TO 740
        JPRINT(14) = 1
        GO TO 100
C  KEYWORD: PAOPNAO -- I/O WITH PAO TO PNAO TRANSFORMATION
  740 IF(.NOT.EQUAL(KEYWD,KPPNAO,7)) GO TO 750
        IWPNAO = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .TRUE.
          CALL KEYPAR(KEYWD,LENG,IWPNAO,LFNPPA,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(IWPNAO.eq.IVAL) IWPNAO = IFULL
          if(IWPNAO.eq.ILEW) IWPNAO = IFULL
        END IF
        GO TO 100
C  KEYWORD: AONAO -- I/O WITH AO TO NAO TRANSFORMATION
  750 IF(.NOT.EQUAL(KEYWD,KAONAO,5)) GO TO 760
        IWTNAO = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .TRUE.
          CALL KEYPAR(KEYWD,LENG,IWTNAO,LFNNAO,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(IWTNAO.eq.IVAL) IWTNAO = IFULL
          if(IWTNAO.eq.ILEW) IWTNAO = IFULL
        END IF
        GO TO 100
C  KEYWORD: NAONBO -- I/O WITH NAO TO NBO TRANSFORMATION
  760 IF(.NOT.EQUAL(KEYWD,KNANBO,6)) GO TO 770
        IWTNAB = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .TRUE.
          CALL KEYPAR(KEYWD,LENG,IWTNAB,LFNNAB,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(IWTNAB.eq.IVAL) IWTNAB = IFULL
        END IF
        GO TO 100
C  KEYWORD: AONBO -- OUTPUT AO TO NBO TRANSF. INFORMATION
  770 IF(.NOT.EQUAL(KEYWD,KAONBO,5)) GO TO 780
        IWTNBO = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,IWTNBO,LFNNBO,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(IWTNBO.eq.IVAL) IWTNBO = IFULL
        END IF
        GO TO 100
C  KEYWORD: FNLMO -- PRINT NLMO FOCK MATRIX
  780 IF(.NOT.EQUAL(KEYWD,KFNLMO,5)) GO TO 790
        JPRINT(8)  = 1
        JPRINT(15) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(15),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(15).eq.IVAL) JPRINT(15) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DMNBO -- PRINT NBO DENSITY MATRIX
  790 IF(.NOT.EQUAL(KEYWD,KDMNBO,5)) GO TO 800
        JPRINT(16) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(16),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(16).eq.IVAL) JPRINT(16) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DMNLMO -- PRINT NLMO DENSITY MATRIX
  800 IF(.NOT.EQUAL(KEYWD,KDMNLM,6)) GO TO 810
        JPRINT(8)  = 1
        JPRINT(17) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(17),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(17).eq.IVAL) JPRINT(17) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AONLMO -- COMPUTE AND OUTPUT AO TO NLMO TRANSF.
  810 IF(.NOT.EQUAL(KEYWD,KAONLM,6)) GO TO 820
        JPRINT(23) = IFULL
        JPRINT(8)  = 1
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(23),LFNNLM,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(23).eq.IVAL) JPRINT(23) = IFULL
        END IF
        GO TO 100
C  KEYWORD: PRINT -- READ IN PRINT OPTION LEVEL "IPRINT"
  820 IF(.NOT.EQUAL(KEYWD,KPRINT,5)) GO TO 830
      CALL IFLD(IPRINT,ERROR)
        if(ERROR) CALL HALT('PRINT')
        GO TO 100
C  KEYWORD: NAONLMO -- PRINT NAO TO NLMO TRANSFORMATION MATRIX
  830 IF(.NOT.EQUAL(KEYWD,KNANLM,7)) GO TO 840
        JPRINT(8) = 1
        JPRINT(18) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(18),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(18).eq.IVAL) JPRINT(18) = IFULL
        END IF
        GO TO 100
C  KEYWORD: SPNAO -- PRINT S-PNAO OVERLAP MATRIX
  840 IF(.NOT.EQUAL(KEYWD,KSPNAO,5)) GO TO 850
        JPRINT(19) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(19),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(19).eq.IVAL) JPRINT(19) = IFULL
          if(JPRINT(19).eq.ILEW) JPRINT(19) = IFULL
        END IF
        GO TO 100
C  KEYWORD: SPNHO -- PRINT S-PNHO OVERLAP MATRIX
  850 IF(.NOT.EQUAL(KEYWD,KSPNHO,5)) GO TO 860
        JPRINT(20) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(20),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(20).eq.IVAL) JPRINT(20) = IFULL
          if(JPRINT(20).eq.ILEW) JPRINT(20) = IFULL
        END IF
        GO TO 100
C  KEYWORD: NHONLMO -- OUTPUT THE NHO TO NLMO TRANSFORMATION
  860 IF(.NOT.EQUAL(KEYWD,KNHNLM,7)) GO TO 870
        JPRINT(24) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(24),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(24).eq.IVAL) JPRINT(24) = IFULL
        END IF
        GO TO 100
C  KEYWORD: SPNBO -- PRINT S-PNBO OVERLAP MATRIX
  870 IF(.NOT.EQUAL(KEYWD,KSPNBO,5)) GO TO 880
        JPRINT(21) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(21),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(21).eq.IVAL) JPRINT(21) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AOINFO -- WRITE BASIS SET INFO
  880 IF(.NOT.EQUAL(KEYWD,KAOINF,6)) GO TO 910
        JPRINT(22) = LFNAO
        CALL IFLD(ITEMP,ERROR)
        if(.NOT.ERROR) JPRINT(22) = ITEMP
        GO TO 100
C  KEYWORD: AOPNBO -- WRITE AO TO PNBO TRANSFORMATION
  910 IF(.NOT.EQUAL(KEYWD,KAOPNB,6)) GO TO 920
        JPRINT(25) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(25),LFNPNB,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(25).eq.IVAL) JPRINT(25) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AOMO -- WRITE AO TO MO TRANSFORMATION
  920 IF(.NOT.EQUAL(KEYWD,KAOMO,4)) GO TO 930
        JPRINT(26) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(26),LFNMO,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
        END IF
        GO TO 100
C  KEYWORD: DMAO -- WRITE AO DENSITY MATRIX
  930 IF(.NOT.EQUAL(KEYWD,KDMAO,4)) GO TO 940
        JPRINT(27) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(27),LFNDM,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(27).eq.IVAL) JPRINT(27) = IFULL
          if(JPRINT(27).eq.ILEW) JPRINT(27) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AONHO -- WRITE AO TO NHO TRANSFORMATION
  940 IF(.NOT.EQUAL(KEYWD,KAONHO,5)) GO TO 950
        JPRINT(28) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(28),LFNNHO,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(28).eq.IVAL) JPRINT(28) = IFULL
          if(JPRINT(28).eq.ILEW) JPRINT(28) = IFULL
        END IF
        GO TO 100
C  KEYWORD: FNHO -- PRINT NHO FOCK MATRIX
  950 IF(.NOT.EQUAL(KEYWD,KFNHO,4)) GO TO 960
        JPRINT(29) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(29),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(29).eq.IVAL) JPRINT(29) = IFULL
          if(JPRINT(29).eq.ILEW) JPRINT(29) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AOPNHO -- WRITE AO TO PNHO TRANSFORMATION
  960 IF(.NOT.EQUAL(KEYWD,KAOPNH,6)) GO TO 970
        JPRINT(30) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(30),LFNPNH,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(30).eq.IVAL) JPRINT(30) = IFULL
          if(JPRINT(30).eq.ILEW) JPRINT(30) = IFULL
        END IF
        GO TO 100
C  KEYWORD: FNAO -- PRINT NAO FOCK MATRIX
  970 IF(.NOT.EQUAL(KEYWD,KFNAO,4)) GO TO 980
        JPRINT(31) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(31),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(31).eq.IVAL) JPRINT(31) = IFULL
          if(JPRINT(31).eq.ILEW) JPRINT(31) = IFULL
        END IF
        GO TO 100
C  KEYWORD: RESSTR -- FIND MULTIPLE RESONANCE STRUCTURES
  980 IF(.NOT.EQUAL(KEYWD,KRSSTR,6)) GO TO 990
        JPRINT(14) = 1
        JPRINT(32) = 1
        GO TO 100
C  KEYWORD: NAONHO -- OUTPUT THE NAO TO NHO TRANSFORMATION
  990 IF(.NOT.EQUAL(KEYWD,KNAONH,6)) GO TO 1010
        JPRINT(33) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(33),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(33).eq.IVAL) JPRINT(33) = IFULL
          if(JPRINT(33).eq.ILEW) JPRINT(33) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DMNHO -- PRINT NHO DENSITY MATRIX
 1010 IF(.NOT.EQUAL(KEYWD,KDMNHO,5)) GO TO 1020
        JPRINT(34) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(34),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(34).eq.IVAL) JPRINT(34) = IFULL
          if(JPRINT(34).eq.ILEW) JPRINT(34) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DMNAO -- PRINT NAO DENSITY MATRIX
 1020 IF(.NOT.EQUAL(KEYWD,KDMNAO,5)) GO TO 1040
        JPRINT(35) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(35),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(35).eq.IVAL) JPRINT(35) = IFULL
          if(JPRINT(35).eq.ILEW) JPRINT(35) = IFULL
        END IF
        GO TO 100
C  KEYWORD: BEND -- PRINT NHO DIRECTIONALITY AND BOND BENDING INFO
 1040 IF(.NOT.EQUAL(KEYWD,KBEND,4)) GO TO 1050
        JPRINT(36) = 1
        CALL RFLD(TEMP,ERROR)
        if(ERROR) GO TO 100
        ATHR = DABS(TEMP)
        CALL RFLD(TEMP,ERROR)
        if(ERROR) GO TO 100
        PTHR = DABS(TEMP)
        if(PTHR.lt.ONE) PTHR = ONE
        CALL RFLD(TEMP,ERROR)
        if(ERROR) GO TO 100
        ETHR = DABS(TEMP)
        GO TO 100
C  KEYWORD: NHOMO -- COMPUTE AND PRINT NHO TO MO TRANSF.
 1050 IF(.NOT.EQUAL(KEYWD,KNHOMO,5)) GO TO 1060
        JPRINT(38) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(38),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
        END IF
        GO TO 100
C  KEYWORD: SAO -- PRINT AO OVERLAP MATRIX
 1060 IF(.NOT.EQUAL(KEYWD,KSAO,3)) GO TO 1070
        JPRINT(39) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(39),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(39).eq.IVAL) JPRINT(39) = IFULL
          if(JPRINT(39).eq.ILEW) JPRINT(39) = IFULL
        END IF
        GO TO 100
C  KEYWORD: FAO -- PRINT AO FOCK MATRIX
 1070 IF(.NOT.EQUAL(KEYWD,KFAO,3)) GO TO 1080
        JPRINT(40) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(40),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(40).eq.IVAL) JPRINT(40) = IFULL
          if(JPRINT(40).eq.ILEW) JPRINT(40) = IFULL
        END IF
        GO TO 100
C  KEYWORD: NHONBO -- OUTPUT NHO TO NBO TRANSFORMATION
 1080 IF(.NOT.EQUAL(KEYWD,KNHONB,6)) GO TO 1090
        JPRINT(41) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(41),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(41).eq.IVAL) JPRINT(41) = IFULL
        END IF
        GO TO 100
C  KEYWORD: BOAO -- PRINT AO BOND-ORDER MATRIX
 1090 IF(.NOT.EQUAL(KEYWD,KBOAO,4)) GO TO 1100
        JPRINT(42) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(42),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(42).eq.IVAL) JPRINT(42) = IFULL
          if(JPRINT(42).eq.ILEW) JPRINT(42) = IFULL
        END IF
        GO TO 100
C  KEYWORD: E2PERT -- 2ND-ORDER PERTURBATIVE ANALYSIS OF THE NBO FOCK MATRIX
 1100 IF(.NOT.EQUAL(KEYWD,KEPERT,6)) GO TO 1110
        JPRINT(3) = 1
        CALL RFLD(TEMP,ERROR)
        if(ERROR) GO TO 100
        E2THR = DABS(TEMP)
        GO TO 100
C  KEYWORD: PLOT -- WRITE AO BASIS, DENSITY, AND TRANSFORMS FOR PLOTTING
 1110 IF(.NOT.EQUAL(KEYWD,KPLOT,4)) GO TO 1120
        JPRINT(43) = 1
        JPRINT(8) = 1
        GO TO 100
C  KEYWORD: NPA -- PRINT THE NATURAL POPULATION ANALYSIS
 1120 IF(.NOT.EQUAL(KEYWD,KNPA,3)) GO TO 1130
        JPRINT(4) = 1
        GO TO 100
C  KEYWORD: NBOSUM -- PRINT THE NBO SUMMARY
 1130 IF(.NOT.EQUAL(KEYWD,KNBOSM,6)) GO TO 1140
        JPRINT(6) = 1
        GO TO 100
C  KEYWORD: NBO -- PRINT THE NBO ANALYSIS
 1140 IF(.NOT.EQUAL(KEYWD,KNBO,3)) GO TO 1150
        if(LENG.ne.3) GO TO 1150
        JPRINT(5) = 1
        GO TO 100
C  KEYWORD: DIPOLE -- PRINT NBO/NLMO DIPOLE ANALYSIS:
 1150 IF(.NOT.EQUAL(KEYWD,KDIPOL,6)) GO TO 1160
        JPRINT(46) = 1
        JPRINT(8) = 1
        CALL RFLD(TEMP,ERROR)
        if(ERROR) GO TO 100
        DTHR = DABS(TEMP)
        GO TO 100
C  KEYWORD: NBONLMO -- PRINT NBO TO NLMO TRANSFORMATION MATRIX
 1160 IF(.NOT.EQUAL(KEYWD,KNBNLM,7)) GO TO 1170
        JPRINT(8) = 1
        JPRINT(47) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(47),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(47).eq.IVAL) JPRINT(47) = IFULL
        END IF
        GO TO 100
C  KEYWORD: SPNLMO -- OUTPUT THE PNLMO OVERLAP MATRIX
 1170 IF(.NOT.EQUAL(KEYWD,KSPNLM,6)) GO TO 1180
        JPRINT(8) = 1
        JPRINT(48) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(48),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(48).eq.IVAL) JPRINT(48) = IFULL
        END IF
        GO TO 100
C  KEYWORD: AOPNLMO -- OUTPUT THE AO-PNLMO TRANSFORMATION MATRIX
 1180 IF(.NOT.EQUAL(KEYWD,KAOPNL,7)) GO TO 1190
        JPRINT(8) = 1
        JPRINT(49) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(49),LFNPNL,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(49).eq.IVAL) JPRINT(49) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DIAO -- OUTPUT THE AO DIPOLE INTEGRALS
 1190 IF(.NOT.EQUAL(KEYWD,KDIAO,4)) GO TO 1200
        JPRINT(50) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(50),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(50).eq.IVAL) JPRINT(50) = IFULL
          if(JPRINT(50).eq.ILEW) JPRINT(50) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DINAO -- OUTPUT THE NAO DIPOLE INTEGRALS
 1200 IF(.NOT.EQUAL(KEYWD,KDINAO,5)) GO TO 1210
        JPRINT(51) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(51),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(51).eq.IVAL) JPRINT(51) = IFULL
          if(JPRINT(51).eq.ILEW) JPRINT(51) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DINHO -- OUTPUT THE NHO DIPOLE INTEGRALS
 1210 IF(.NOT.EQUAL(KEYWD,KDINHO,5)) GO TO 1220
        JPRINT(52) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(52),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(52).eq.IVAL) JPRINT(52) = IFULL
          if(JPRINT(52).eq.ILEW) JPRINT(52) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DINBO -- OUTPUT THE NBO DIPOLE INTEGRALS
 1220 IF(.NOT.EQUAL(KEYWD,KDINBO,5)) GO TO 1230
        JPRINT(53) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(53),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(53).eq.IVAL) JPRINT(53) = IFULL
        END IF
        GO TO 100
C  KEYWORD: DINLMO -- OUTPUT THE NLMO DIPOLE INTEGRALS
 1230 IF(.NOT.EQUAL(KEYWD,KDINLM,6)) GO TO 1240
        JPRINT(8)  = 1
        JPRINT(54) = IFULL
        LENG = KEYLEN
        CALL HFLD(KEYWD,LENG,END)
        if(.NOT.END) then
          READ = .FALSE.
          CALL KEYPAR(KEYWD,LENG,JPRINT(54),LFNDEF,READ,ERROR)
          if(ERROR) NEXTWD = .FALSE.
          if(JPRINT(54).eq.IVAL) JPRINT(54) = IFULL
        END IF
        GO TO 100
C  KEYWORD: NBODAF -- CHOOSE AN ALTERNATE DAF
 1240 IF(.NOT.EQUAL(KEYWD,KNBDAF,6)) GO TO 1250
        LFNDAF = ABS(LFNDAF)
        CALL IFLD(ITEMP,ERROR)
        if(.NOT.ERROR) LFNDAF = ABS(ITEMP)
        GO TO 100
C  KEYWORD: ARCHIVE -- WRITE THE ARCHIVE FILE
 1250 IF(.NOT.EQUAL(KEYWD,KARCHV,7)) GO TO 1260
        JPRINT(7) = LFNARC
        CALL IFLD(ITEMP,ERROR)
        if(.NOT.ERROR) JPRINT(7) = ABS(ITEMP)
        GO TO 100
 1260 GO TO 4800
C------------------------------------------------------------------------------
 4500 CONTINUE
      CALL PRNOPT(NBOOPT,NUMOPT)
      RETURN
C
C
C  ABORT PROGRAM: UNRECOGNIZABLE KEYWORD ENCOUNTERED
C
 4800 WRITE(LFNPR,9800) (KEYWD(I),I=1,6)
        STOP
C
C  INCOMPATIBLE JOB OPTIONS HAVE BEEN REQUESTED:
C
 4900 CONTINUE
        WRITE(LFNPR,9900)
        STOP
C
 9800 FORMAT(1X,'Error: Unrecognizable keyword  >>',6A1,'<<',/,1X
     *   ,       'Program must halt.')
 9900 FORMAT(1X,'The NBO program must stop because the options /MULAT/',
     + ' and /MULORB/',/1X,'currently require the AO bond order matrix',
     + ', rather than the AO density',/1X,'matrix.  The program could ',
     + 'be modified to permit this.')
      END
      SUBROUTINE PRNOPT(NBOOPT,NUMOPT)
C******************************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(KEYLEN = 9)
      LOGICAL ERROR,END,EQUAL,NEXTWD,READ
      DIMENSION NBOOPT(10)
C
      COMMON/NBFLAG/ROHF,UHF,CI,OPEN,COMPLX,ALPHA,BETA,MCSCF,AUHF,ORTHO
      LOGICAL ROHF,UHF,CI,OPEN,COMPLX,ALPHA,BETA,MCSCF,AUHF,ORTHO
      COMMON/NBINFO/ISPIN,NATOMS,NDIM,NBAS,MXBO,MXAO,MXAOLM,MUNIT
      COMMON/NBOPT/IWDM,IW3C,IWAPOL,IWHYBS,IWPNAO,IWTNAO,IWTNAB,
     + IWTNBO,IWFOCK,IWCUBF,IPSEUD,KOPT,IPRINT,IWDETL,IWMULP,ICHOOS,
     + JCORE,JPRINT(60)
      COMMON/NBIO/LFNIN,LFNPR,LFNAO,LFNPNA,LFNNAO,LFNPNH,LFNNHO,LFNPNB,
     +            LFNNBO,LFNPNL,LFNNLM,LFNMO,LFNDM,LFNNAB,LFNPPA,LFNARC,
     +            LFNDAF,LFNDEF
      COMMON/NBTHR/THRSET,PRJSET,ACCTHR,CRTSET,E2THR,ATHR,PTHR,ETHR,
     +              DTHR
C
      DIMENSION KEYWD(KEYLEN),K3CBND(6),KEPERT(6),KLFNPR(5),KTHRSH(6),
     * KDETL(6),KMULA(5),KMULOR(6),KPRJTH(6),KNBNLM(7),
     * KAOPRE(6),KNLMO(4),KNAOMO(5),KNBOMO(5),KNOBND(6),KNPA(3),
     * KSKIPB(6),KRPNAO(5),KBNDID(6),KNLMMO(6),KRESON(5),KPPNAO(7),
     * KAONAO(5),KNANBO(6),KAONBO(5),KAONLM(6),KFNBO(4),KFNLMO(5),
     * KDMNBO(5),KDMNLM(6),KPRINT(5),KNANLM(7),KSPNAO(5),KSPNHO(5),
     * KSPNBO(5),KAOINF(6),KAOPNB(6),KAOMO(4),KNAONH(6),KNHNLM(7),
     * KAONHO(5),KFNHO(4),KAOPNH(6),KFNAO(4),KNHONB(6),KSPNLM(6),
     * KRSSTR(6),KDMNHO(5),KDMNAO(5),KPLOT(4),KAOPNL(7),KDIAO(4),
     * KBEND(4),KNHOMO(5),KSAO(3),KFAO(3),KDMAO(4),KBOAO(4),KDINLM(6),
     * KNBOSM(6),KNBO(3),KDIPOL(6),KDINAO(5),KDINHO(5),KDINBO(5),
     * KNBDAF(6),KARCHV(7)
      DIMENSION KALT(4)
C
      DATA K3CBND/1H3,1HC,1HB,1HO,1HN,1HD/,KLFNPR/1HL,1HF,1HN,1HP,1HR/,
     * KTHRSH/1HT,1HH,1HR,1HE,1HS,1HH/,KEPERT/1HE,1H2,1HP,1HE,1HR,1HT/,
     * KPLOT/1HP,1HL,1HO,1HT/,KDETL/1HD,1HE,1HT,1HA,1HI,1HL/,
     * KMULA/1HM,1HU,1HL,1HA,1HT/,KMULOR/1HM,1HU,1HL,1HO,1HR,1HB/,
     * KPRJTH/1HP,1HR,1HJ,1HT,1HH,1HR/,KAOPRE/1HA,1HO,1HP,1HN,1HA,1HO/,
     * KNLMO/1HN,1HL,1HM,1HO/,KNPA/1HN,1HP,1HA/,KNBO/1HN,1HB,1HO/,
     * KNAOMO/1HN,1HA,1HO,1HM,1HO/,KNBOMO/1HN,1HB,1HO,1HM,1HO/,
     * KNOBND/1HN,1HO,1HB,1HO,1HN,1HD/,KSKIPB/1HS,1HK,1HI,1HP,1HB,1HO/,
     * KRPNAO/1HR,1HP,1HN,1HA,1HO/,KBNDID/1HB,1HN,1HD,1HI,1HD,1HX/,
     * KNLMMO/1HN,1HL,1HM,1HO,1HM,1HO/,KRESON/1HR,1HE,1HS,1HO,1HN/,
     * KPPNAO/1HP,1HA,1HO,1HP,1HN,1HA,1HO/,KAONAO/1HA,1HO,1HN,1HA,1HO/,
     * KNANBO/1HN,1HA,1HO,1HN,1HB,1HO/,KAONBO/1HA,1HO,1HN,1HB,1HO/
C
      DATA KAONLM/1HA,1HO,1HN,1HL,1HM,1HO/,KFNBO/1HF,1HN,1HB,1HO/,
     * KFNLMO/1HF,1HN,1HL,1HM,1HO/,KPRINT/1HP,1HR,1HI,1HN,1HT/,
     * KDMNBO/1HD,1HM,1HN,1HB,1HO/,KDMNLM/1HD,1HM,1HN,1HL,1HM,1HO/,
     * KNANLM/1HN,1HA,1HO,1HN,1HL,1HM,1HO/,KAOMO/1HA,1HO,1HM,1HO/,
     * KSPNAO/1HS,1HP,1HN,1HA,1HO/,KSPNHO/1HS,1HP,1HN,1HH,1HO/,
     * KSPNBO/1HS,1HP,1HN,1HB,1HO/,KFNAO/1HF,1HN,1HA,1HO/,
     * KAOINF/1HA,1HO,1HI,1HN,1HF,1HO/,KAOPNB/1HA,1HO,1HP,1HN,1HB,1HO/,
     * KAONHO/1HA,1HO,1HN,1HH,1HO/,KFNHO/1HF,1HN,1HH,1HO/,
     * KAOPNH/1HA,1HO,1HP,1HN,1HH,1HO/,KRSSTR/1HR,1HE,1HS,1HS,1HT,1HR/,
     * KNBNLM/1HN,1HB,1HO,1HN,1HL,1HM,1HO/,KDIAO/1HD,1HI,1HA,1HO/,
     * KDMNHO/1HD,1HM,1HN,1HH,1HO/,KDMNAO/1HD,1HM,1HN,1HA,1HO/,
     * KBEND/1HB,1HE,1HN,1HD/,KNBOSM/1HN,1HB,1HO,1HS,1HU,1HM/,
     * KNHOMO/1HN,1HH,1HO,1HM,1HO/,KSAO/1HS,1HA,1HO/,KFAO/1HF,1HA,1HO/
C
      DATA KDMAO/1HD,1HM,1HA,1HO/,KBOAO/1HB,1HO,1HA,1HO/,
     * KDIPOL/1HD,1HI,1HP,1HO,1HL,1HE/,KNAONH/1HN,1HA,1HO,1HN,1HH,1HO/,
     * KNHNLM/1HN,1HH,1HO,1HN,1HL,1HM,1HO/,KDINAO/1HD,1HI,1HN,1HA,1HO/,
     * KNHONB/1HN,1HH,1HO,1HN,1HB,1HO/,KSPNLM/1HS,1HP,1HN,1HL,1HM,1HO/,
     * KAOPNL/1HA,1HO,1HP,1HN,1HL,1HM,1HO/,KDINHO/1HD,1HI,1HN,1HH,1HO/,
     * KDINBO/1HD,1HI,1HN,1HB,1HO/,KDINLM/1HD,1HI,1HN,1HL,1HM,1HO/,
     * KNBDAF/1HN,1HB,1HO,1HD,1HA,1HF/,
     * KARCHV/1HA,1HR,1HC,1HH,1HI,1HV,1HE/
C
      DATA KALT/1H$,1HE,1HN,1HD/
C
      DATA ZERO,ONE/0.0D0,1.0D0/
      DATA IFULL,IVAL,ILEW/4HFULL,3HVAL,3HLEW/
      DATA IPRNT,IWRIT,IREAD/4HPRNT,4HWRIT,4HREAD/
C
C  IF THE PRINT LEVEL IS SET TO ZERO AND NO OTHER OPTIONS WERE ENTERED,
C  COMPLETELY SHUT OFF PROGRAM PRINTING:
C
      if(NUMOPT.eq.1.AND.IPRINT.eq.0) IPRINT = -1
C
C  CHECK FOR JOB OPTIONS THAT ARE CURRENTLY INCOMPATABLE:
C
      if((IWDM.eq.0).AND.(IWMULP.ne.0)) GO TO 4900
C
C  CHECK FOR JOB OPTIONS THAT ARE STRICTLY INCOMPATIBLE:
C
      if(ORTHO) then
        IWTNAO     = 0    ! AO-NAO TRANSFORMATION
        JPRINT(9)  = 0    ! NAO-MO TRANSFORMATION
        JPRINT(11) = 0    ! RPNAO
        JPRINT(18) = 0    ! NAO-NLMO TRANSFORMATION
        JPRINT(19) = 0    ! PNAO OVERLAP
        JPRINT(20) = 0    ! PNHO OVERLAP
        JPRINT(21) = 0    ! PNBO OVERLAP
        JPRINT(25) = 0    ! AO-PNBO TRANSFORMATION
        JPRINT(30) = 0    ! AO-PNHO TRANSFORMATION
        JPRINT(31) = 0    ! NAO FOCK MATRIX
        JPRINT(33) = 0    ! NAO-NHO TRANSFORMATION
        JPRINT(35) = 0    ! NAO DENSITY
        JPRINT(39) = 0    ! AO OVERLAP
        JPRINT(44) = 0    ! AO-PNAO TRANSFORMATION
        JPRINT(48) = 0    ! PNLMO OVERLAP
        JPRINT(49) = 0    ! AO-PNLMO TRANSFORMATION
        JPRINT(51) = 0    ! NAO DIPOLE
      END IF
C------------------------------------------------------------------------------
C
C  START PRINTING NBO OUTPUT:
C
      if(IPRINT.ge.0) then
        WRITE(LFNPR,6000)
        if(NUMOPT.GT.0) WRITE(LFNPR,6010)
C------------------------------------------------------------------------------
 6000 FORMAT(/1X,79('*')/,13X,
     * 'N A T U R A L   A T O M I C   O R B I T A L   A N D'/,
     * 10X,'N A T U R A L   B O N D   O R B I T A L   ',
     *    'A N A L Y S I S',/1X,79('*'))
 6010 FORMAT(1X)
C------------------------------------------------------------------------------
C
C  JOB CONTROL KEYWORDS:
C
        if(JPRINT(4).ne.0) WRITE(LFNPR,6020)
        if(JPRINT(5).ne.0) WRITE(LFNPR,6030)
        if(JPRINT(6).ne.0) WRITE(LFNPR,6040)
        if(JPRINT(14).ne.0) WRITE(LFNPR,6050)
        if(JPRINT(10).ne.0) WRITE(LFNPR,6060)
        if(IW3C.ne.0) WRITE(LFNPR,6070)
        if(JPRINT(1).ne.0) WRITE(LFNPR,6080)
        if(JPRINT(8).ne.0) WRITE(LFNPR,6090)
C------------------------------------------------------------------------------
 6020 FORMAT(1X,'      /NPA    / : Print Natural Population Analysis')
 6030 FORMAT(1X,'      /NBO    / : Print Natural Bond Orbital Analysis')
 6040 FORMAT(1X,'      /NBOSUM / : Print summary of the NBO analysis')
 6050 FORMAT(1X,'      /RESON  / : Allow strongly delocalized NBO ',
     *  'set')
 6060 FORMAT(1X,'      /NOBOND / : No two-center NBO search')
 6070 FORMAT(1X,'      /3CBOND / : Search for 3-center bonds')
 6080 FORMAT(1X,'      /SKIPBO / : Skip NBO transformation step')
 6090 FORMAT(1X,'      /NLMO   / : Form Natural Localized Molecular'
     *,  ' Orbitals')
C------------------------------------------------------------------------------
C
C  JOB THRESHOLD KEYWORDS:
C
        if(JPRINT(36).ne.0) WRITE(LFNPR,6500)
        if(ATHR.ge.ZERO.OR.PTHR.GE.ZERO.OR.ETHR.GE.ZERO)
     +             WRITE(LFNPR,6510) DABS(ATHR),DABS(PTHR),DABS(ETHR)
        if(JPRINT(3).ne.0) WRITE(LFNPR,6520)
        if(E2THR.GT.ZERO) WRITE(LFNPR,6530) E2THR
        if(JPRINT(46).ne.0) WRITE(LFNPR,6540)
        if(DTHR.ge.ZERO) WRITE(LFNPR,6550) DABS(DTHR)
        if(THRSET.GT.ZERO) WRITE(LFNPR,6560) THRSET
        if(PRJSET.GT.ZERO) WRITE(LFNPR,6570) PRJSET
C------------------------------------------------------------------------------
 6500 FORMAT(1X,'      /BEND   / : Print NHO directionality table')
 6510 FORMAT(1X,'                  Print thresholds set to (',F4.1,
     *   ',',F5.1,',',F5.2,')')
 6520 FORMAT(1X,'      /E2PERT / : Analyze NBO Fock matrix')
 6530 FORMAT(1X,'                  Print threshold set to ',F5.2)
 6540 FORMAT(1X,'      /DIPOLE / : Print NBO/NLMO dipole moment ',
     *   'analysis')
 6550 FORMAT(1X,'                  Print threshold set to ',F5.2)
 6560 FORMAT(1X,'      /THRESH / : set to ',F5.2)
 6570 FORMAT(1X,'      /PRJTHR / : set to ',F5.2)
C------------------------------------------------------------------------------
C
C  MATRIX OUTPUT KEYWORDS:
C
        if(JPRINT(44).eq.IFULL) then
          WRITE(LFNPR,7000)
        ELSE IF(IOINQR(JPRINT(44)).eq.IPRNT) then
          WRITE(LFNPR,7002) JPRINT(44)
        ELSE IF(IOINQR(JPRINT(44)).eq.IWRIT) then
          WRITE(LFNPR,7004) ABS(JPRINT(44))
        END IF
        if(IWTNAO.eq.IFULL) then
          WRITE(LFNPR,7010)
        ELSE IF(IOINQR(IWTNAO).eq.IPRNT) then
          WRITE(LFNPR,7012) IWTNAO
        ELSE IF(IOINQR(IWTNAO).eq.IWRIT) then
          WRITE(LFNPR,7014) ABS(IWTNAO)
        ELSE IF(IOINQR(IWTNAO).eq.IREAD) then
          WRITE(LFNPR,7016) ABS(IWTNAO/1000)
        END IF
        if(JPRINT(30).eq.IFULL) then
          WRITE(LFNPR,7020)
        ELSE IF(IOINQR(JPRINT(30)).eq.IPRNT) then
          WRITE(LFNPR,7022) JPRINT(30)
        ELSE IF(IOINQR(JPRINT(30)).eq.IWRIT) then
          WRITE(LFNPR,7024) ABS(JPRINT(30))
        END IF
        if(JPRINT(28).eq.IFULL) then
          WRITE(LFNPR,7030)
        ELSE IF(IOINQR(JPRINT(28)).eq.IPRNT) then
          WRITE(LFNPR,7032) JPRINT(28)
        ELSE IF(IOINQR(JPRINT(28)).eq.IWRIT) then
          WRITE(LFNPR,7034) ABS(JPRINT(28))
        END IF
        if(JPRINT(25).eq.IFULL) then
          WRITE(LFNPR,7040)
        ELSE IF(JPRINT(25).eq.ILEW) then
          WRITE(LFNPR,7042)
        ELSE IF(IOINQR(JPRINT(25)).eq.IPRNT) then
          WRITE(LFNPR,7044) JPRINT(25)
        ELSE IF(IOINQR(JPRINT(25)).eq.IWRIT) then
          WRITE(LFNPR,7046) ABS(JPRINT(25))
        END IF
        if(IWTNBO.eq.IFULL) then
          WRITE(LFNPR,7050)
        ELSE IF(IWTNBO.eq.ILEW) then
          WRITE(LFNPR,7052)
        ELSE IF(IOINQR(IWTNBO).eq.IPRNT) then
          WRITE(LFNPR,7054) IWTNBO
        ELSE IF(IOINQR(IWTNBO).eq.IWRIT) then
          WRITE(LFNPR,7056) ABS(IWTNBO)
        END IF
        if(JPRINT(49).eq.IFULL) then
          WRITE(LFNPR,7060)
        ELSE IF(JPRINT(49).eq.ILEW) then
          WRITE(LFNPR,7062)
        ELSE IF(IOINQR(JPRINT(49)).eq.IPRNT) then
          WRITE(LFNPR,7064) JPRINT(49)
        ELSE IF(IOINQR(JPRINT(49)).eq.IWRIT) then
          WRITE(LFNPR,7066) ABS(JPRINT(49))
        END IF
        if(JPRINT(23).eq.IFULL) then
          WRITE(LFNPR,7070)
        ELSE IF(JPRINT(23).eq.ILEW) then
          WRITE(LFNPR,7072)
        ELSE IF(IOINQR(JPRINT(23)).eq.IPRNT) then
          WRITE(LFNPR,7074) JPRINT(23)
        ELSE IF(IOINQR(JPRINT(23)).eq.IWRIT) then
          WRITE(LFNPR,7076) ABS(JPRINT(23))
        END IF
        if(JPRINT(26).eq.IFULL) then
          WRITE(LFNPR,7080)
        ELSE IF(JPRINT(26).eq.IVAL) then
          WRITE(LFNPR,7082)
        ELSE IF(JPRINT(26).eq.ILEW) then
          WRITE(LFNPR,7084)
        ELSE IF(IOINQR(JPRINT(26)).eq.IPRNT) then
          WRITE(LFNPR,7086) JPRINT(26)
        ELSE IF(IOINQR(JPRINT(26)).eq.IWRIT) then
          WRITE(LFNPR,7088) ABS(JPRINT(26))
        END IF
        if(IWPNAO.eq.IFULL) then
          WRITE(LFNPR,7090)
        ELSE IF(IOINQR(IWPNAO).eq.IPRNT) then
          WRITE(LFNPR,7092) IWPNAO
        ELSE IF(IOINQR(IWPNAO).eq.IWRIT) then
          WRITE(LFNPR,7094) ABS(IWPNAO)
        ELSE IF(IOINQR(IWPNAO).eq.IREAD) then
          WRITE(LFNPR,7096) ABS(IWPNAO/1000)
        END IF
        if(JPRINT(33).eq.IFULL) then
          WRITE(LFNPR,7100)
        ELSE IF(IOINQR(JPRINT(33)).eq.IPRNT) then
          WRITE(LFNPR,7102) JPRINT(33)
        ELSE IF(IOINQR(JPRINT(33)).eq.IWRIT) then
          WRITE(LFNPR,7104) ABS(JPRINT(33))
        END IF
        if(IWTNAB.eq.IFULL) then
          WRITE(LFNPR,7110)
        ELSE IF(IWTNAB.eq.ILEW) then
          WRITE(LFNPR,7112)
        ELSE IF(IOINQR(IWTNAB).eq.IPRNT) then
          WRITE(LFNPR,7114) IWTNAB
        ELSE IF(IOINQR(IWTNAB).eq.IWRIT) then
          WRITE(LFNPR,7116) ABS(IWTNAB)
        ELSE IF(IOINQR(IWTNAB).eq.IREAD) then
          WRITE(LFNPR,7118) ABS(IWTNAB/1000)
        END IF
        if(JPRINT(18).eq.IFULL) then
          WRITE(LFNPR,7120)
        ELSE IF(JPRINT(18).eq.ILEW) then
          WRITE(LFNPR,7122)
        ELSE IF(IOINQR(JPRINT(18)).eq.IPRNT) then
          WRITE(LFNPR,7124) JPRINT(18)
        ELSE IF(IOINQR(JPRINT(18)).eq.IWRIT) then
          WRITE(LFNPR,7126) ABS(JPRINT(18))
        END IF
        if(JPRINT(9).eq.IFULL) then
          WRITE(LFNPR,7130)
        ELSE IF(JPRINT(9).eq.IVAL) then
          WRITE(LFNPR,7132)
        ELSE IF(JPRINT(9).eq.ILEW) then
          WRITE(LFNPR,7134)
        ELSE IF(IOINQR(JPRINT(9)).eq.IPRNT) then
          WRITE(LFNPR,7136) JPRINT(9)
        ELSE IF(IOINQR(JPRINT(9)).eq.IWRIT) then
          WRITE(LFNPR,7138) ABS(JPRINT(9))
        END IF
        if(JPRINT(41).eq.IFULL) then
          WRITE(LFNPR,7140)
        ELSE IF(JPRINT(41).eq.ILEW) then
          WRITE(LFNPR,7142)
        ELSE IF(IOINQR(JPRINT(41)).eq.IPRNT) then
          WRITE(LFNPR,7144) JPRINT(41)
        ELSE IF(IOINQR(JPRINT(41)).eq.IWRIT) then
          WRITE(LFNPR,7146) ABS(JPRINT(41))
        END IF
        if(JPRINT(24).eq.IFULL) then
          WRITE(LFNPR,7150)
        ELSE IF(JPRINT(24).eq.ILEW) then
          WRITE(LFNPR,7152)
        ELSE IF(IOINQR(JPRINT(24)).eq.IPRNT) then
          WRITE(LFNPR,7154) JPRINT(24)
        ELSE IF(IOINQR(JPRINT(24)).eq.IWRIT) then
          WRITE(LFNPR,7156) ABS(JPRINT(24))
        END IF
        if(JPRINT(38).eq.IFULL) then
          WRITE(LFNPR,7160)
        ELSE IF(JPRINT(38).eq.IVAL) then
          WRITE(LFNPR,7162)
        ELSE IF(JPRINT(38).eq.ILEW) then
          WRITE(LFNPR,7164)
        ELSE IF(IOINQR(JPRINT(38)).eq.IPRNT) then
          WRITE(LFNPR,7166) JPRINT(38)
        ELSE IF(IOINQR(JPRINT(38)).eq.IWRIT) then
          WRITE(LFNPR,7168) ABS(JPRINT(38))
        END IF
        if(JPRINT(47).eq.IFULL) then
          WRITE(LFNPR,7170)
        ELSE IF(JPRINT(47).eq.ILEW) then
          WRITE(LFNPR,7172)
        ELSE IF(IOINQR(JPRINT(47)).eq.IPRNT) then
          WRITE(LFNPR,7174) JPRINT(47)
        ELSE IF(IOINQR(JPRINT(47)).eq.IWRIT) then
          WRITE(LFNPR,7176) ABS(JPRINT(47))
        END IF
        if(JPRINT(45).eq.IFULL) then
          WRITE(LFNPR,7180)
        ELSE IF(JPRINT(45).eq.IVAL) then
          WRITE(LFNPR,7182)
        ELSE IF(JPRINT(45).eq.ILEW) then
          WRITE(LFNPR,7184)
        ELSE IF(IOINQR(JPRINT(45)).eq.IPRNT) then
          WRITE(LFNPR,7186) JPRINT(45)
        ELSE IF(IOINQR(JPRINT(45)).eq.IWRIT) then
          WRITE(LFNPR,7188) ABS(JPRINT(45))
        END IF
        if(JPRINT(13).eq.IFULL) then
          WRITE(LFNPR,7190)
        ELSE IF(JPRINT(13).eq.IVAL) then
          WRITE(LFNPR,7192)
        ELSE IF(JPRINT(13).eq.ILEW) then
          WRITE(LFNPR,7194)
        ELSE IF(IOINQR(JPRINT(13)).eq.IPRNT) then
          WRITE(LFNPR,7196) JPRINT(13)
        ELSE IF(IOINQR(JPRINT(13)).eq.IWRIT) then
          WRITE(LFNPR,7198) ABS(JPRINT(13))
        END IF
        if(JPRINT(42).eq.IFULL) then
          WRITE(LFNPR,7200)
        ELSE IF(IOINQR(JPRINT(42)).eq.IPRNT) then
          WRITE(LFNPR,7202) JPRINT(42)
        ELSE IF(IOINQR(JPRINT(42)).eq.IWRIT) then
          WRITE(LFNPR,7204) ABS(JPRINT(42))
        END IF
        if(JPRINT(27).eq.IFULL) then
          WRITE(LFNPR,7210)
        ELSE IF(IOINQR(JPRINT(27)).eq.IPRNT) then
          WRITE(LFNPR,7212) JPRINT(27)
        ELSE IF(IOINQR(JPRINT(27)).eq.IWRIT) then
          WRITE(LFNPR,7214) ABS(JPRINT(27))
        END IF
        if(JPRINT(35).eq.IFULL) then
          WRITE(LFNPR,7220)
        ELSE IF(IOINQR(JPRINT(35)).eq.IPRNT) then
          WRITE(LFNPR,7222) JPRINT(35)
        ELSE IF(IOINQR(JPRINT(35)).eq.IWRIT) then
          WRITE(LFNPR,7224) ABS(JPRINT(35))
        END IF
        if(JPRINT(34).eq.IFULL) then
          WRITE(LFNPR,7230)
        ELSE IF(IOINQR(JPRINT(34)).eq.IPRNT) then
          WRITE(LFNPR,7232) JPRINT(34)
        ELSE IF(IOINQR(JPRINT(34)).eq.IWRIT) then
          WRITE(LFNPR,7234) ABS(JPRINT(34))
        END IF
        if(JPRINT(16).eq.IFULL) then
          WRITE(LFNPR,7240)
        ELSE IF(JPRINT(16).eq.ILEW) then
          WRITE(LFNPR,7242)
        ELSE IF(IOINQR(JPRINT(16)).eq.IPRNT) then
          WRITE(LFNPR,7244) JPRINT(16)
        ELSE IF(IOINQR(JPRINT(16)).eq.IWRIT) then
          WRITE(LFNPR,7246) ABS(JPRINT(16))
        END IF
        if(JPRINT(17).eq.IFULL) then
          WRITE(LFNPR,7250)
        ELSE IF(JPRINT(17).eq.ILEW) then
          WRITE(LFNPR,7252)
        ELSE IF(IOINQR(JPRINT(17)).eq.IPRNT) then
          WRITE(LFNPR,7254) JPRINT(17)
        ELSE IF(IOINQR(JPRINT(17)).eq.IWRIT) then
          WRITE(LFNPR,7256) ABS(JPRINT(17))
        END IF
        if(JPRINT(40).eq.IFULL) then
          WRITE(LFNPR,7260)
        ELSE IF(IOINQR(JPRINT(40)).eq.IPRNT) then
          WRITE(LFNPR,7262) JPRINT(40)
        ELSE IF(IOINQR(JPRINT(40)).eq.IWRIT) then
          WRITE(LFNPR,7264) ABS(JPRINT(40))
        END IF
        if(JPRINT(31).eq.IFULL) then
          WRITE(LFNPR,7270)
        ELSE IF(IOINQR(JPRINT(31)).eq.IPRNT) then
          WRITE(LFNPR,7272) JPRINT(31)
        ELSE IF(IOINQR(JPRINT(31)).eq.IWRIT) then
          WRITE(LFNPR,7274) ABS(JPRINT(31))
        END IF
        if(JPRINT(29).eq.IFULL) then
          WRITE(LFNPR,7280)
        ELSE IF(IOINQR(JPRINT(29)).eq.IPRNT) then
          WRITE(LFNPR,7282) JPRINT(29)
        ELSE IF(IOINQR(JPRINT(29)).eq.IWRIT) then
          WRITE(LFNPR,7284) ABS(JPRINT(29))
        END IF
        if(JPRINT(37).eq.IFULL) then
          WRITE(LFNPR,7290)
        ELSE IF(JPRINT(37).eq.ILEW) then
          WRITE(LFNPR,7292)
        ELSE IF(IOINQR(JPRINT(37)).eq.IPRNT) then
          WRITE(LFNPR,7294) JPRINT(37)
        ELSE IF(IOINQR(JPRINT(37)).eq.IWRIT) then
          WRITE(LFNPR,7296) ABS(JPRINT(37))
        END IF
        if(JPRINT(15).eq.IFULL) then
          WRITE(LFNPR,7300)
        ELSE IF(JPRINT(15).eq.ILEW) then
          WRITE(LFNPR,7302)
        ELSE IF(IOINQR(JPRINT(15)).eq.IPRNT) then
          WRITE(LFNPR,7304) JPRINT(15)
        ELSE IF(IOINQR(JPRINT(15)).eq.IWRIT) then
          WRITE(LFNPR,7306) ABS(JPRINT(15))
        END IF
        if(JPRINT(50).eq.IFULL) then
          WRITE(LFNPR,7310)
        ELSE IF(IOINQR(JPRINT(50)).eq.IPRNT) then
          WRITE(LFNPR,7312) JPRINT(50)
        ELSE IF(IOINQR(JPRINT(50)).eq.IWRIT) then
          WRITE(LFNPR,7314) ABS(JPRINT(50))
        END IF
        if(JPRINT(51).eq.IFULL) then
          WRITE(LFNPR,7320)
        ELSE IF(IOINQR(JPRINT(51)).eq.IPRNT) then
          WRITE(LFNPR,7322) JPRINT(51)
        ELSE IF(IOINQR(JPRINT(51)).eq.IWRIT) then
          WRITE(LFNPR,7324) ABS(JPRINT(51))
        END IF
        if(JPRINT(52).eq.IFULL) then
          WRITE(LFNPR,7330)
        ELSE IF(IOINQR(JPRINT(52)).eq.IPRNT) then
          WRITE(LFNPR,7332) JPRINT(52)
        ELSE IF(IOINQR(JPRINT(52)).eq.IWRIT) then
          WRITE(LFNPR,7334) ABS(JPRINT(52))
        END IF
        if(JPRINT(53).eq.IFULL) then
          WRITE(LFNPR,7340)
        ELSE IF(JPRINT(53).eq.ILEW) then
          WRITE(LFNPR,7342)
        ELSE IF(IOINQR(JPRINT(53)).eq.IPRNT) then
          WRITE(LFNPR,7344) JPRINT(53)
        ELSE IF(IOINQR(JPRINT(53)).eq.IWRIT) then
          WRITE(LFNPR,7346) ABS(JPRINT(53))
        END IF
        if(JPRINT(54).eq.IFULL) then
          WRITE(LFNPR,7350)
        ELSE IF(JPRINT(54).eq.ILEW) then
          WRITE(LFNPR,7352)
        ELSE IF(IOINQR(JPRINT(54)).eq.IPRNT) then
          WRITE(LFNPR,7354) JPRINT(54)
        ELSE IF(IOINQR(JPRINT(54)).eq.IWRIT) then
          WRITE(LFNPR,7356) ABS(JPRINT(54))
        END IF
        if(JPRINT(39).eq.IFULL) then
          WRITE(LFNPR,7360)
        ELSE IF(IOINQR(JPRINT(39)).eq.IPRNT) then
          WRITE(LFNPR,7362) JPRINT(39)
        ELSE IF(IOINQR(JPRINT(39)).eq.IWRIT) then
          WRITE(LFNPR,7364) ABS(JPRINT(39))
        END IF
        if(JPRINT(19).eq.IFULL) then
          WRITE(LFNPR,7370)
        ELSE IF(IOINQR(JPRINT(19)).eq.IPRNT) then
          WRITE(LFNPR,7372) JPRINT(19)
        ELSE IF(IOINQR(JPRINT(19)).eq.IWRIT) then
          WRITE(LFNPR,7374) ABS(JPRINT(19))
        END IF
        if(JPRINT(20).eq.IFULL) then
          WRITE(LFNPR,7380)
        ELSE IF(IOINQR(JPRINT(20)).eq.IPRNT) then
          WRITE(LFNPR,7382) JPRINT(20)
        ELSE IF(IOINQR(JPRINT(20)).eq.IWRIT) then
          WRITE(LFNPR,7384) ABS(JPRINT(20))
        END IF
        if(JPRINT(21).eq.IFULL) then
          WRITE(LFNPR,7390)
        ELSE IF(JPRINT(21).eq.ILEW) then
          WRITE(LFNPR,7392)
        ELSE IF(IOINQR(JPRINT(21)).eq.IPRNT) then
          WRITE(LFNPR,7394) JPRINT(21)
        ELSE IF(IOINQR(JPRINT(21)).eq.IWRIT) then
          WRITE(LFNPR,7396) ABS(JPRINT(21))
        END IF
        if(JPRINT(48).eq.IFULL) then
          WRITE(LFNPR,7400)
        ELSE IF(JPRINT(48).eq.ILEW) then
          WRITE(LFNPR,7402)
        ELSE IF(IOINQR(JPRINT(48)).eq.IPRNT) then
          WRITE(LFNPR,7404) JPRINT(48)
        ELSE IF(IOINQR(JPRINT(48)).eq.IWRIT) then
          WRITE(LFNPR,7406) ABS(JPRINT(48))
        END IF
C------------------------------------------------------------------------------
 7000 FORMAT(1X,'      /AOPNAO / : Print the AO to PNAO transformation')
 7002 FORMAT(1X,'      /AOPNAO / : Print ',I3,' columns of the AO to ',
     *   'PNAO transformation')
 7004 FORMAT(1X,'      /AOPNAO / : Write the AO to PNAO transformation',
     *   ' to LFN',I3)
 7010 FORMAT(1X,'      /AONAO  / : Print the AO to NAO transformation')
 7012 FORMAT(1X,'      /AONAO  / : Print ',I3,' columns of the AO ',
     *   'to NAO transformation')
 7014 FORMAT(1X,'      /AONAO  / : Write the AO to NAO transformation ',
     *   'to LFN',I3)
 7016 FORMAT(1X,'      /AONAO  / : Read AO to NAO transformation from ',
     *          'LFN',I3)
 7020 FORMAT(1X,'      /AOPNHO / : Print the AO to PNHO ',
     *   'transformation')
 7022 FORMAT(1X,'      /AOPNHO / : Print ',I3,' columns of the AO to ',
     *   'PNHO transformation')
 7024 FORMAT(1X,'      /AOPNHO / : Write the AO to PNHO transformation',
     *   ' to LFN',I3)
 7030 FORMAT(1X,'      /AONHO  / : Print the AO to NHO transformation')
 7032 FORMAT(1X,'      /AONHO  / : Print ',I3,' columns of the AO to ',
     *   'NHO transformation')
 7034 FORMAT(1X,'      /AONHO  / : Write the AO to NHO transformation ',
     *   'to LFN',I3)
 7040 FORMAT(1X,'      /AOPNBO / : Print the AO to PNBO ',
     *   'transformation')
 7042 FORMAT(1X,'      /AOPNBO / : Print the occupied PNBOs in the AO ',
     *   'basis')
 7044 FORMAT(1X,'      /AOPNBO / : Print ',I3,' columns of the AO to ',
     *   'PNBO transformation')
 7046 FORMAT(1X,'      /AOPNBO / : Write the AO to PNBO transformation',
     *   ' to LFN',I3)
 7050 FORMAT(1X,'      /AONBO  / : Print the AO to NBO transformation')
 7052 FORMAT(1X,'      /AONBO  / : Print the occupied NBOs in the AO ',
     *   'basis')
 7054 FORMAT(1X,'      /AONBO  / : Print ',I3,' columns of the AO ',
     *   'to NBO transformation')
 7056 FORMAT(1X,'      /AONBO  / : Write the AO to NBO transformation ',
     *   'to LFN',I3)
 7060 FORMAT(1X,'      /AOPNLMO/ : Print the AO to PNLMO ',
     *   'transformation')
 7062 FORMAT(1X,'      /AOPNLMO/ : Print the occupied PNLMOs in the AO',
     *   ' basis')
 7064 FORMAT(1X,'      /AOPNLMO/ : Print ',I3,' columns of the AO to ',
     *   'PNLMO transformation')
 7066 FORMAT(1X,'      /AOPNLMO/ : Write the AO to PNLMO transformation'
     * ,  ' to LFN',I3)
 7070 FORMAT(1X,'      /AONLMO / : Print the AO to NLMO ',
     *   'transformation')
 7072 FORMAT(1X,'      /AONLMO / : Print the occupied NLMOs in the AO ',
     *   'basis')
 7074 FORMAT(1X,'      /AONLMO / : Print ',I3,' columns of the AO to ',
     *   'NLMO transformation')
 7076 FORMAT(1X,'      /AONLMO / : Write the AO to NLMO transformation',
     *   ' to LFN',I3)
 7080 FORMAT(1X,'      /AOMO   / : Print all MOs in the AO basis')
 7082 FORMAT(1X,'      /AOMO   / : Print core and valence MOs in ',
     *   'the AO basis')
 7084 FORMAT(1X,'      /AOMO   / : Print the occupied MOs in the AO ',
     *   'basis')
 7086 FORMAT(1X,'      /AOMO   / : Print ',I3,' lowest energy MOs ',
     *   'in the AO basis')
 7088 FORMAT(1X,'      /AOMO   / : Write the AO to MO transformation ',
     *   'to LFN',I3)
 7090 FORMAT(1X,'      /PAOPNAO/ : Print the PAO to PNAO ',
     *   'transformation')
 7092 FORMAT(1X,'      /PAOPNAO/ : Print ',I3,' columns of the PAO ',
     *   'to PNAO transformation')
 7094 FORMAT(1X,'      /PAOPNAO/ : Write the PAO to PNAO ',
     *   'transformation to LFN',I3)
 7096 FORMAT(1X,'      /PAOPNAO/ : Read PAO to PNAO transformation ',
     *          'from LFN',I3)
 7100 FORMAT(1X,'      /NAONHO / : Print the NAO to NHO transformation')
 7102 FORMAT(1X,'      /NAONHO / : Print ',I3,' columns of the NAO ',
     *   'to NHO transformation')
 7104 FORMAT(1X,'      /NAONHO / : Write the NAO to NHO transformation '
     * ,  'to LFN',I3)
 7110 FORMAT(1X,'      /NAONBO / : Print the NAO to NBO transformation')
 7112 FORMAT(1X,'      /NAONBO / : Print the occupied NBOs in the NAO ',
     *   'basis')
 7114 FORMAT(1X,'      /NAONBO / : Print ',I3,' columns of the NAO ',
     *   'to NBO transformation')
 7116 FORMAT(1X,'      /NAONBO / : Write the NAO to NBO transformation '
     * ,  'to LFN',I3)
 7118 FORMAT(1X,'      /NAONBO / : Read NAO to NBO transformation from',
     *          ' LFN',I3)
 7120 FORMAT(1X,'      /NAONLMO/ : Print the NAO to NLMO ',
     *   'transformation')
 7122 FORMAT(1X,'      /NAONLMO/ : Print the occupied NLMOs in the NAO',
     *   ' basis')
 7124 FORMAT(1X,'      /NAONLMO/ : Print ',I3,' columns of the NAO ',
     *   'to NLMO transformation')
 7126 FORMAT(1X,'      /NAONLMO/ : Write the NAO to NLMO ',
     *   'transformation to LFN',I3)
 7130 FORMAT(1X,'      /NAOMO  / : Print all MOs in the NAO basis')
 7132 FORMAT(1X,'      /NAOMO  / : Print core and valence MOs in ',
     *   'the NAO basis')
 7134 FORMAT(1X,'      /NAOMO  / : Print the occupied MOs in the NAO ',
     *   'basis')
 7136 FORMAT(1X,'      /NAOMO  / : Print ',I3,' lowest energy MOs ',
     *   'in the NAO basis')
 7138 FORMAT(1X,'      /NAOMO  / : Write the NAO to MO transformation ',
     *   'to LFN',I3)
 7140 FORMAT(1X,'      /NHONBO / : Print the NHO to NBO transformation')
 7142 FORMAT(1X,'      /NHONBO / : Print the occupied NBOs in the NHO ',
     *   'basis')
 7144 FORMAT(1X,'      /NHONBO / : Print ',I3,' columns of the NHO ',
     *   'to NBO transformation')
 7146 FORMAT(1X,'      /NHONBO / : Write the NHO to NBO transformation '
     * ,  'to LFN',I3)
 7150 FORMAT(1X,'      /NHONLMO/ : Print the NHO to NLMO ',
     *   'transformation')
 7152 FORMAT(1X,'      /NHONLMO/ : Print the occupied NLMOs in the NHO',
     *   ' basis')
 7154 FORMAT(1X,'      /NHONLMO/ : Print ',I3,' columns of the NHO ',
     *   'to NLMO transformation')
 7156 FORMAT(1X,'      /NHONLMO/ : Write the NHO to NLMO ',
     *   'transformation to LFN',I3)
 7160 FORMAT(1X,'      /NHOMO  / : Print all MOs in the NHO basis')
 7162 FORMAT(1X,'      /NHOMO  / : Print core and valence MOs in ',
     *   'the NHO basis')
 7164 FORMAT(1X,'      /NHOMO  / : Print the occupied MOs in the NHO ',
     *   'basis')
 7166 FORMAT(1X,'      /NHOMO  / : Print ',I3,' lowest energy MOs ',
     *   'in the NHO basis')
 7168 FORMAT(1X,'      /NHOMO  / : Write the NHO to MO transformation ',
     *   'to LFN',I3)
 7170 FORMAT(1X,'      /NBONLMO/ : Print the NBO to NLMO ',
     *   'transformation')
 7172 FORMAT(1X,'      /NBONLMO/ : Print the occupied NLMOs in the NBO',
     *   ' basis')
 7174 FORMAT(1X,'      /NBONLMO/ : Print ',I3,' columns of the NBO ',
     *   'to NLMO transformation')
 7176 FORMAT(1X,'      /NBONLMO/ : Write the NBO to NLMO ',
     *   'transformation to LFN',I3)
 7180 FORMAT(1X,'      /NBOMO  / : Print all MOs in the NBO basis')
 7182 FORMAT(1X,'      /NBOMO  / : Print core and valence MOs in ',
     *   'the NBO basis')
 7184 FORMAT(1X,'      /NBOMO  / : Print the occupied MOs in the NBO ',
     *   'basis')
 7186 FORMAT(1X,'      /NBOMO  / : Print ',I3,' lowest energy MOs ',
     *   'in the NBO basis')
 7188 FORMAT(1X,'      /NBOMO  / : Write the NBO to MO transformation ',
     *   'to LFN',I3)
 7190 FORMAT(1X,'      /NLMOMO / : Print all MOs in the NLMO basis')
 7192 FORMAT(1X,'      /NLMOMO / : Print core and valence MOs in ',
     *   'the NLMO basis')
 7194 FORMAT(1X,'      /NLMOMO / : Print the occupied MOs in the NLMO ',
     *   'basis')
 7196 FORMAT(1X,'      /NLMOMO / : Print ',I3,' lowest energy MOs ',
     *   'in the NLMO basis')
 7198 FORMAT(1X,'      /NLMOMO / : Write the NLMO to MO transformation',
     *   ' to LFN',I3)
 7200 FORMAT(1X,'      /BOAO   / : Print the AO bond-order matrix')
 7202 FORMAT(1X,'      /BOAO   / : Print ',I3,' columns of the AO ',
     *   'bond-order matrix')
 7204 FORMAT(1X,'      /BOAO   / : Write the AO bond-order matrix to ',
     *   'LFN',I3)
 7210 FORMAT(1X,'      /DMAO   / : Print the AO density matrix')
 7212 FORMAT(1X,'      /DMAO   / : Print ',I3,' columns of the AO ',
     *   'density matrix')
 7214 FORMAT(1X,'      /DMAO   / : Write the AO density matrix to ',
     *   'LFN',I3)
 7220 FORMAT(1X,'      /DMNAO  / : Print the NAO density matrix')
 7222 FORMAT(1X,'      /DMNAO  / : Print ',I3,' columns of the NAO ',
     *   'density matrix')
 7224 FORMAT(1X,'      /DMNAO  / : Write the NAO density matrix to ',
     *   'LFN',I3)
 7230 FORMAT(1X,'      /DMNHO  / : Print the NHO density matrix')
 7232 FORMAT(1X,'      /DMNHO  / : Print ',I3,' columns of the NHO ',
     *   'density matrix')
 7234 FORMAT(1X,'      /DMNHO  / : Write the NHO density matrix to ',
     *   'LFN',I3)
 7240 FORMAT(1X,'      /DMNBO  / : Print the NBO density matrix')
 7242 FORMAT(1X,'      /DMNBO  / : Print the density matrix elements ',
     *   'of the occupied NBOs')
 7244 FORMAT(1X,'      /DMNBO  / : Print ',I3,' columns of the NBO ',
     *   'density matrix')
 7246 FORMAT(1X,'      /DMNBO  / : Write the NBO density matrix to ',
     *   'LFN',I3)
 7250 FORMAT(1X,'      /DMNLMO / : Print the NLMO density matrix')
 7252 FORMAT(1X,'      /DMNLMO / : Print the density matrix elements ',
     *   'of the occupied NLMOs')
 7254 FORMAT(1X,'      /DMNLMO / : Print ',I3,' columns of the NLMO ',
     *   'density matrix')
 7256 FORMAT(1X,'      /DMNLMO / : Write the NLMO density matrix to ',
     *   'LFN',I3)
 7260 FORMAT(1X,'      /FAO    / : Print the AO Fock matrix')
 7262 FORMAT(1X,'      /FAO    / : Print ',I3,' columns of the AO ',
     *   'Fock matrix')
 7264 FORMAT(1X,'      /FAO    / : Write the AO Fock matrix to ',
     *   'LFN',I3)
 7270 FORMAT(1X,'      /FNAO   / : Print the NAO Fock matrix')
 7272 FORMAT(1X,'      /FNAO   / : Print ',I3,' columns of the NAO ',
     *   'Fock matrix')
 7274 FORMAT(1X,'      /FNAO   / : Write the NAO Fock matrix to ',
     *   'LFN',I3)
 7280 FORMAT(1X,'      /FNHO   / : Print the NHO Fock matrix')
 7282 FORMAT(1X,'      /FNHO   / : Print ',I3,' columns of the NHO ',
     *   'Fock matrix')
 7284 FORMAT(1X,'      /FNHO   / : Write the NHO Fock matrix to ',
     *   'LFN',I3)
 7290 FORMAT(1X,'      /FNBO   / : Print the NBO Fock matrix')
 7292 FORMAT(1X,'      /FNBO   / : Print the Fock matrix elements of ',
     *   'the occupied NBOs')
 7294 FORMAT(1X,'      /FNBO   / : Print ',I3,' columns of the NBO ',
     *   'Fock matrix')
 7296 FORMAT(1X,'      /FNBO   / : Write the NBO Fock matrix to ',
     *   'LFN',I3)
 7300 FORMAT(1X,'      /FNLMO  / : Print the NLMO Fock matrix')
 7302 FORMAT(1X,'      /FNLMO  / : Print the Fock matrix elements of ',
     *   'the occupied NLMOs')
 7304 FORMAT(1X,'      /FNLMO  / : Print ',I3,' columns of the NLMO ',
     *   'Fock matrix')
 7306 FORMAT(1X,'      /FNLMO  / : Write the NLMO Fock matrix to ',
     *   'LFN',I3)
 7310 FORMAT(1X,'      /DIAO   / : Print the AO dipole integrals')
 7312 FORMAT(1X,'      /DIAO   / : Print ',I3,' columns of the AO ',
     *   'dipole matrices')
 7314 FORMAT(1X,'      /DIAO   / : Write the AO dipole integrals',
     *   ' to LFN',I3)
 7320 FORMAT(1X,'      /DINAO  / : Print the NAO dipole integrals')
 7322 FORMAT(1X,'      /DINAO  / : Print ',I3,' columns of the NAO ',
     *   'dipole matrices')
 7324 FORMAT(1X,'      /DINAO  / : Write the NAO dipole integrals',
     *   ' to LFN',I3)
 7330 FORMAT(1X,'      /DINHO  / : Print the NHO dipole integrals')
 7332 FORMAT(1X,'      /DINHO  / : Print ',I3,' columns of the NHO ',
     *   'dipole matrices')
 7334 FORMAT(1X,'      /DINHO  / : Write the NHO dipole integrals',
     *   ' to LFN',I3)
 7340 FORMAT(1X,'      /DINBO  / : Print the NBO dipole integrals')
 7342 FORMAT(1X,'      /DINBO  / : Print the dipole integrals of ',
     *   'occupied NBOs')
 7344 FORMAT(1X,'      /DINBO  / : Print ',I3,' columns of the NBO ',
     *   'dipole matrices')
 7346 FORMAT(1X,'      /DINBO  / : Write the NBO dipole integrals',
     *   ' to LFN',I3)
 7350 FORMAT(1X,'      /DINLMO / : Print the NLMO dipole integrals')
 7352 FORMAT(1X,'      /DINLMO / : Print the dipole integrals of ',
     *   'occupied NLMOs')
 7354 FORMAT(1X,'      /DINLMO / : Print ',I3,' columns of the NLMO ',
     *   'dipole matrices')
 7356 FORMAT(1X,'      /DINLMO / : Write the NLMO dipole integrals',
     *   ' to LFN',I3)
 7360 FORMAT(1X,'      /SAO    / : Print the AO overlap matrix')
 7362 FORMAT(1X,'      /SAO    / : Print ',I3,' columns of the AO ',
     *   'overlap matrix')
 7364 FORMAT(1X,'      /SAO    / : Write the AO overlap matrix to ',
     *   'LFN',I3)
 7370 FORMAT(1X,'      /SPNAO  / : Print the PNAO overlap matrix')
 7372 FORMAT(1X,'      /SPNAO  / : Print ',I3,' columns of the PNAO ',
     *   'overlap matrix')
 7374 FORMAT(1X,'      /SPNAO  / : Write the PNAO overlap matrix to ',
     *   'LFN',I3)
 7380 FORMAT(1X,'      /SPNHO  / : Print the PNHO overlap matrix')
 7382 FORMAT(1X,'      /SPNHO  / : Print ',I3,' columns of the PNHO ',
     *   'overlap matrix')
 7384 FORMAT(1X,'      /SPNHO  / : Write the PNHO overlap matrix to ',
     *   'LFN',I3)
 7390 FORMAT(1X,'      /SPNBO  / : Print the PNBO overlap matrix')
 7392 FORMAT(1X,'      /SPNBO  / : Print the overlap matrix elements ',
     *   'of the occupied PNBOs')
 7394 FORMAT(1X,'      /SPNBO  / : Print ',I3,' columns of the PNBO ',
     *   'overlap matrix')
 7396 FORMAT(1X,'      /SPNBO  / : Write the PNBO overlap matrix to ',
     *   'LFN',I3)
 7400 FORMAT(1X,'      /SPNLMO / : Print the PNLMO overlap matrix')
 7402 FORMAT(1X,'      /SPNLMO / : Print the overlap matrix elements ',
     *   'of the occupied PNLMOs')
 7404 FORMAT(1X,'      /SPNLMO / : Print ',I3,' columns of the PNLMO ',
     *   'overlap matrix')
 7406 FORMAT(1X,'      /SPNLMO / : Write the PNLMO overlap matrix to ',
     *   'LFN',I3)
C------------------------------------------------------------------------------
C
C  OTHER OUTPUT CONTROL KEYWORDS:
C
        if(LFNPR.ne.6) WRITE(LFNPR,8000) LFNPR
        if(JPRINT(43).ne.0) WRITE(LFNPR,8010)
        if(IWDETL.ne.0) WRITE(LFNPR,8020)
        if(JPRINT(7).ne.0) WRITE(LFNPR,8030) JPRINT(7)
        if(JPRINT(12).ne.0) WRITE(LFNPR,8040)
        if(LFNDAF.ge.0) WRITE(LFNPR,8050) LFNDAF
        if(JPRINT(22).ne.0) WRITE(LFNPR,8060) JPRINT(22)
        if(IWMULP.eq.1) WRITE(LFNPR,8070)
        if(IWMULP.eq.2) WRITE(LFNPR,8080)
        if(JPRINT(32).ne.0) WRITE(LFNPR,8090)
        if(JPRINT(11).ne.0) WRITE(LFNPR,8100)
C
        if(IPRINT.lt.10) then
          WRITE(LFNPR,8500) IPRINT
        ELSE
          IPRINT = IPRINT - 10
        END IF
C------------------------------------------------------------------------------
 8000 FORMAT(1X,'      /LFNPR  / : set to',I3)
 8010 FORMAT(1X,'      /PLOT   / : Write information for the orbital',
     *   ' plotter')
 8020 FORMAT(1X,'      /DETAIL / : Write out details of NBO search')
 8030 FORMAT(1X,'      /ARCHIVE/ : Write the archive file to LFN',I3)
 8040 FORMAT(1X,'      /BNDIDX / : Print bond indices based on ',
     *  'the NAO density matrix')
 8050 FORMAT(1X,'      /NBODAF / : NBO direct access file written on',
     *   ' LFN',I3)
 8060 FORMAT(1X,'      /AOINFO / : Write AO information to LFN',I3)
 8070 FORMAT(1X,'      /MULAT  / : Print Mulliken populations',
     *                ' by atom')
 8080 FORMAT(1X,'      /MULORB / : Print Mulliken populations',
     *                ' by orbital and atom')
 8090 FORMAT(1X,'      /RESSTR / : Search for resonance structures')
 8100 FORMAT(1X,'      /RPNAO  / : Revise TPNAO with TRYD and TRED')
 8500 FORMAT(1X,'      /PRINT  / : Print level set to',I3)
C------------------------------------------------------------------------------
      END IF
C
C  SET PRINT LEVEL OPTIONS:
C
      if(IPRINT.GT.0) then
        JPRINT(4)  =  1                          ! NATURAL POPULATION ANALYSIS
        JPRINT(5)  =  1                          ! NBO ANALYSIS
      END IF
C
      if(IPRINT.GT.1) then
        JPRINT(3)  =  1                          ! PERTURBATION ANALYSIS
        JPRINT(6)  =  1                          ! PRINT SUMMARY OF NBOS
        JPRINT(36) =  1                          ! PRINT HYBRID DIR. TABLE
      END IF
C
      if(IPRINT.GT.2) then
        JPRINT(8)  =  1                          ! NLMO ANALYSIS
        JPRINT(12) =  1                          ! PRINT BOND INDICES
        JPRINT(46) =  1                          ! PRINT NBO/NLMO DIPOLE MOMENT
      END IF
C
      if(IPRINT.GT.3) then
        if(JPRINT(7).eq.0)  JPRINT(7)  = LFNARC  ! ARCHIVE
        if(JPRINT(9).eq.0)  JPRINT(9)  = IFULL   ! PRINT FULL T-NAO-MO
        if(JPRINT(13).eq.0) JPRINT(13) = IFULL   ! PRINT FULL T-NLMO-MO
                            JPRINT(14) = 1       ! RESONANCE
        if(JPRINT(15).eq.0) JPRINT(15) = IFULL   ! PRINT NLMO FOCK MATRIX
        if(JPRINT(16).eq.0) JPRINT(16) = IFULL   ! PRINT NBO DENSITY MATRIX
        if(JPRINT(17).eq.0) JPRINT(17) = IFULL   ! PRINT NLMO DENSITY MATRIX
        if(JPRINT(18).eq.0) JPRINT(18) = IFULL   ! PRINT T-NAO-NLMO
        if(JPRINT(19).eq.0) JPRINT(19) = IFULL   ! PRINT PNAO OVERLAP MATRIX
        if(JPRINT(20).eq.0) JPRINT(20) = IFULL   ! PRINT PNHO OVERLAP MATRIX
        if(JPRINT(21).eq.0) JPRINT(21) = IFULL   ! PRINT PNBO OVERLAP MATRIX
        if(JPRINT(24).eq.0) JPRINT(24) = IFULL   ! PRINT T-NHO-NLMO
        if(JPRINT(29).eq.0) JPRINT(29) = IFULL   ! PRINT NHO FOCK MATRIX
        if(JPRINT(31).eq.0) JPRINT(31) = IFULL   ! PRINT NAO FOCK MATRIX
        if(JPRINT(33).eq.0) JPRINT(33) = IFULL   ! PRINT T-NAO-NAO
        if(JPRINT(34).eq.0) JPRINT(34) = IFULL   ! PRINT NHO DENSITY MATRIX
        if(JPRINT(35).eq.0) JPRINT(35) = IFULL   ! PRINT NAO DENSITY MATRIX
        if(JPRINT(37).eq.0) JPRINT(37) = IFULL   ! PRINT NBO FOCK MATRIX
        if(JPRINT(38).eq.0) JPRINT(38) = IFULL   ! PRINT FULL T-NHO-MO
        if(JPRINT(39).eq.0) JPRINT(39) = IFULL   ! PRINT AO OVERLAP MATRIX
        if(JPRINT(40).eq.0) JPRINT(40) = IFULL   ! PRINT AO FOCK MATRIX
        if(JPRINT(41).eq.0) JPRINT(41) = IFULL   ! PRINT T-NHO-NBO
        if(JPRINT(42).eq.0) JPRINT(42) = IFULL   ! PRINT AO BOND-ORDER MATRIX
        JPRINT(43)                     = 1       ! PLOT KEYWORD
        if(JPRINT(45).eq.0) JPRINT(45) = IFULL   ! PRINT FULL T-NBO-MO
        if(JPRINT(47).eq.0) JPRINT(47) = IFULL   ! PRINT T-NBO-NLMO
        if(JPRINT(48).eq.0) JPRINT(48) = IFULL   ! PRINT PNLMO OVERLAP MATRIX
        if(JPRINT(50).eq.0) JPRINT(50) = IFULL   ! PRINT AO DIPOLE INTEGRALS
        if(JPRINT(51).eq.0) JPRINT(51) = IFULL   ! PRINT NAO DIPOLE INTEGRALS
        if(JPRINT(52).eq.0) JPRINT(52) = IFULL   ! PRINT NHO DIPOLE INTEGRALS
        if(JPRINT(53).eq.0) JPRINT(53) = IFULL   ! PRINT NBO DIPOLE INTEGRALS
        if(JPRINT(54).eq.0) JPRINT(54) = IFULL   ! PRINT NLMO DIPOLE INTEGRALS
        if(IWTNAB.eq.0)     IWTNAB     = IFULL   ! PRINT T-NAO-NBO
                            IWDETL     = 1       ! PRINT DETAILS OF NBO SEARCH
        if(IWDM.ne.0)       IWMULP     = 2       ! MULL POP BY ATOM AND ORBITAL
      END IF
C
C  TAKE CARE OF THE PLOT OPTION:
C
      if(JPRINT(43).ne.0) then
        if(JPRINT(22).eq.0) JPRINT(22) =  LFNAO    ! WRITE AO BASIS SET INFO
        if(IWTNAO.eq.0)     IWTNAO     = -LFNNAO   ! WRITE T-AO-NAO
        if(JPRINT(28).eq.0) JPRINT(28) = -LFNNHO   ! WRITE T-AO-NHO
        if(IWTNBO.eq.0)     IWTNBO     = -LFNNBO   ! WRITE T-AO-NBO
        if(JPRINT(23).eq.0) JPRINT(23) = -LFNNLM   ! WRITE T-AO-NLMO
        if(JPRINT(26).eq.0) JPRINT(26) = -LFNMO    ! WRITE T-AO-MO
        if(JPRINT(27).eq.0) JPRINT(27) = -LFNDM    ! WRITE AO DENSITY MATRIX
        if(JPRINT(44).eq.0) JPRINT(44) = -LFNPNA   ! WRITE T-AO-PNAO
        if(JPRINT(30).eq.0) JPRINT(30) = -LFNPNH   ! WRITE T-AO-PNHO
        if(JPRINT(25).eq.0) JPRINT(25) = -LFNPNB   ! WRITE T-AO-PNBO
        if(JPRINT(49).eq.0) JPRINT(49) = -LFNPNL   ! WRITE T-AO-PNLMO
      END IF
C
C  PRINT HYBRIDS IF THE NBO OUTPUT IS REQUESTED:
C
      IWHYBS = JPRINT(5)
      RETURN
C
C  ABORT PROGRAM: UNRECOGNIZABLE KEYWORD ENCOUNTERED
C
 4800 WRITE(LFNPR,9800) (KEYWD(I),I=1,6)
        STOP
C
C  INCOMPATIBLE JOB OPTIONS HAVE BEEN REQUESTED:
C
 4900 CONTINUE
        WRITE(LFNPR,9900)
        STOP
C
 9800 FORMAT(1X,'Error: Unrecognizable keyword  >>',6A1,'<<',/,1X
     *   ,       'Program must halt.')
 9900 FORMAT(1X,'The NBO program must stop because the options /MULAT/',
     + ' and /MULORB/',/1X,'currently require the AO bond order matrix',
     + ', rather than the AO density',/1X,'matrix.  The program could ',
     + 'be modified to permit this.')
      END
